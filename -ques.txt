// DISREGARD PREVIOUS UPLOADED CODEBASE. CURRENT CODEBASE START

// STRUCTURE
/Users/kennyg/Downloads/comprehensive-health-questionnaire
├── -comprehensive-health-questionnaire-Snapshot.txt
├── .env
├── .env.local
├── .git
│   ├── COMMIT_EDITMSG
│   ├── FETCH_HEAD
│   ├── HEAD
│   ├── ORIG_HEAD
│   ├── config
│   ├── description
│   ├── hooks
│   │   ├── applypatch-msg.sample
│   │   ├── commit-msg.sample
│   │   ├── fsmonitor-watchman.sample
│   │   ├── post-update.sample
│   │   ├── pre-applypatch.sample
│   │   ├── pre-commit.sample
│   │   ├── pre-merge-commit.sample
│   │   ├── pre-push.sample
│   │   ├── pre-rebase.sample
│   │   ├── pre-receive.sample
│   │   ├── prepare-commit-msg.sample
│   │   ├── push-to-checkout.sample
│   │   ├── sendemail-validate.sample
│   │   └── update.sample
│   ├── index
│   ├── info
│   │   └── exclude
│   ├── logs
│   │   ├── HEAD
│   │   └── refs
│   │       ├── heads
│   │       │   └── main
│   │       └── remotes
│   │           └── origin
│   │               └── main
│   ├── objects
│   │   ├── 02
│   │   │   └── aa733c6063d341224067f22cd890ae393e2bbc
│   │   ├── 03
│   │   │   └── 49768355dbf1380d84e73b45cae3d818d4ede7
│   │   ├── 05
│   │   │   └── 3d06ad4ecfc5626be29bf8e560491743762c0a
│   │   ├── 09
│   │   │   └── 06e7622bc90d6c0c69279249d063193a9223c4
│   │   ├── 0a
│   │   │   └── b64dc8b63d49f08ca8e67bc6869bbd1de853ed
│   │   ├── 0b
│   │   │   └── 28606fcfaf53a6e4c6bc7d6bdd87131fdb3051
│   │   ├── 0c
│   │   │   └── 9310f5ac25bd8878e162bd2ee4c25c026c7632
│   │   ├── 11
│   │   │   └── 05321294f267481f0577190323d5579b749caf
│   │   ├── 12
│   │   │   └── dfd64e6378360c782125155acb61cfc7b2f03c
│   │   ├── 13
│   │   │   └── 2c8672cbc8c9070722205fac2d6889a305eb00
│   │   ├── 21
│   │   │   ├── 83e80e80467dab196c11874247b81b9abeead2
│   │   │   └── fa917dbb716d32a10b71aa5f5ba72c33437429
│   │   ├── 26
│   │   │   └── 14a2ebbd81b9e5cdcbc21bbfe106ddaa86dcc1
│   │   ├── 2b
│   │   │   └── 898181431c2a6ed0769cc3f33728407b1ee445
│   │   ├── 2c
│   │   │   └── cb8c37ef6eec1db5d8fe3b78e92f7a50794708
│   │   ├── 2d
│   │   │   └── f337f43e06d69afd14a7d8471183a990cce5b6
│   │   ├── 31
│   │   │   └── 33f2cf70838eaaa23ad6272aaead4217d64265
│   │   ├── 33
│   │   │   └── 4b22c5357f19b24e114309713dc9ebbbd4bf8e
│   │   ├── 37
│   │   │   └── c7e1dc2fea7cf62c1f993d555483990a92dffa
│   │   ├── 3b
│   │   │   └── 6aa443c4cbff9f57e629cd104e50e279d6b140
│   │   ├── 44
│   │   │   └── 4ce81ea2c9b64f15438a84018c57b3d6b4c2c1
│   │   ├── 45
│   │   │   ├── 357e9e4fe1bbec91ad3888b00e7dd2e7fef514
│   │   │   ├── 506b3dcd0c381573efb4dd33d983561ffe7f9c
│   │   │   └── 900122530312722274d15a4f8afb355a24ee79
│   │   ├── 47
│   │   │   └── 9cee977cc1077b3fcd9419a41e0be5fac4d40e
│   │   ├── 48
│   │   │   └── 0aa8682cf883454e1bef7591328e4e94c5a322
│   │   ├── 4c
│   │   │   └── a8cf60d50791b9384ffe74bd914fa73b6a7fb5
│   │   ├── 4d
│   │   │   └── 0fdeefed5501a86860a53dab240d4625989f90
│   │   ├── 4e
│   │   │   └── 15d55fe52922f3bb24505bdee4df08d5c85fee
│   │   ├── 4f
│   │   │   └── 74cdffde2debc163d5dc6917ac2d6e83c9cc7d
│   │   ├── 55
│   │   │   └── 62b385555d2208ec5b557d26b8de78242a9935
│   │   ├── 5b
│   │   │   └── 6c6bef23a30f48776073eef7f6599df05b3b3d
│   │   ├── 63
│   │   │   └── 55363f68b9ea74ce537cace11d3567b2a7f645
│   │   ├── 64
│   │   │   └── 0106add8d3c0734e0b578c94d66a64b468b762
│   │   ├── 65
│   │   │   └── 6672f6605f96d70e5516487c5ee122ce95b3b2
│   │   ├── 68
│   │   │   └── 370f8e1c800566a34a9d6f3c7a03223d2a2824
│   │   ├── 73
│   │   │   └── 721487b3226c87c452848f308ba67d0b081fdb
│   │   ├── 74
│   │   │   ├── 5ae0b01376d23e7e193f6033114a59dc489d81
│   │   │   └── 68492847f8232ea33923257062814629232834
│   │   ├── 7b
│   │   │   └── 67005902824cc228f4900646dfa7e350fb2e65
│   │   ├── 80
│   │   │   └── b6885df66660335e0b1a86c4f14b3f0379b6cf
│   │   ├── 83
│   │   │   └── d35598048c194a6c36bf7830c2e21f88afb3dd
│   │   ├── 87
│   │   │   └── 9603d825c9b9a7857c151ece4cade4521fae36
│   │   ├── 8b
│   │   │   └── a5b5dd591a91d0e938a9e79e0681b0345d8222
│   │   ├── 8f
│   │   │   └── 9ed862677a357edc5fad318ea7f514b8b5bb1d
│   │   ├── 91
│   │   │   └── cd618e68c0879a9261cfcfab17adb26724467f
│   │   ├── 93
│   │   │   ├── 0e22f1e97072687c94b1fe266e74aba062e64e
│   │   │   └── 71e2a8d6e96f1739d02b52ced9fcf34ad073da
│   │   ├── 94
│   │   │   └── 9e244a0c0161b997112dba35edd7ff20147d3b
│   │   ├── 96
│   │   │   └── fd6c75b7e87e3523082494513f7808ca02d437
│   │   ├── 98
│   │   │   └── 0af20039d6207eb4279c7d78d2775d38eda635
│   │   ├── 99
│   │   │   └── 1220011fcf8db3f6d52bde7ef0a48b49d7ee88
│   │   ├── a1
│   │   │   └── 331a2e267eba7d340ef1f1edada18ae111e756
│   │   ├── a5
│   │   │   └── 47bf36d8d11a4f89c59c144f24795749086dd1
│   │   ├── a8
│   │   │   └── aaec0e877dd3972a68c9948dc4b6e8d76ec871
│   │   ├── b3
│   │   │   ├── 89880e1c8f94361c2ceb520454cc77b99ae537
│   │   │   └── c24e9102c4e20d7eea102154c0e78d6e7f2f85
│   │   ├── bb
│   │   │   └── 8dd2e7b4af9e19c79361a498e6d5a561f3fb41
│   │   ├── bc
│   │   │   └── 191c477fd7cfb4de0110836e7c6bae0313d8c8
│   │   ├── c4
│   │   │   └── caf8cd8e1378956994801fe70759efa578f2d9
│   │   ├── c6
│   │   │   └── 249d53221192e2aa08bbc4028423cdeaeef57c
│   │   ├── c8
│   │   │   └── 65d37c22e5b5f6b4efd55f891d9a6107b433ce
│   │   ├── cf
│   │   │   ├── 9aee622cddf5cc853632327ed173b3911fbef8
│   │   │   └── d9171155431052e304a8db56868610aa68e3ff
│   │   ├── d3
│   │   │   ├── 0701e2c0ae753f733d142c7a9c91f035d8d3b0
│   │   │   └── 43680e287119e42c181383929ff8d7288415c5
│   │   ├── d4
│   │   │   ├── cd6296746674289b3dac3c7f264d22b9cfe5af
│   │   │   └── cee25b49a78a307bc0d54beeb479a69f6880ea
│   │   ├── d7
│   │   │   └── 37bf0ea5cdd7600d6285527f3c2daede93d44d
│   │   ├── da
│   │   │   └── 71d74628ed40e65ce97e141f95c8eb76ed8a08
│   │   ├── dd
│   │   │   └── 751066e88d2a74847ce89e2220b6c2d119cc1b
│   │   ├── de
│   │   │   └── fce10f0a7635afb24b192e0b65b5275757dbf3
│   │   ├── df
│   │   │   └── adca2772038ed1860ffa39ac9e64def484a55e
│   │   ├── e0
│   │   │   └── 71498f6da605ea36e1c6c375da595b0cf57484
│   │   ├── e1
│   │   │   └── 800961a55236a27cd46cd2c5ef3f6181936ce3
│   │   ├── e2
│   │   │   ├── 908738af598754107407e156faf2bf88ee317a
│   │   │   └── d71036f47da8457904a20f7c4be0732e491a86
│   │   ├── e6
│   │   │   └── d9008e6877918d2104ce5e796f24c60fd3f056
│   │   ├── e8
│   │   │   └── ad4ba63a8405cdd80d49a213e461135dfc8af5
│   │   ├── ed
│   │   │   └── d8995beccfcd9145af1573a16e98f56806683c
│   │   ├── ee
│   │   │   └── 74d5941d920f01ba0bf393e9f73866e25cb892
│   │   ├── f0
│   │   │   └── 61e234b375db0130000ce48e44dd765e3bc8a2
│   │   ├── f4
│   │   │   ├── 2787bf722c0373dc3ccd2b8e0dffce63c9cae0
│   │   │   └── b1ee86a61f8b7c43eeafe8eb09b902760b40a7
│   │   ├── f5
│   │   │   ├── 36d9ed1a8cd97fae612c7764b7d6bb6ae539d4
│   │   │   └── 60d5f84cf290231ea6829925a3582baf7c78a0
│   │   ├── f7
│   │   │   ├── 9a90490b1ae59e5b92700018999d3f9b180b1d
│   │   │   └── a82a5370122a66a20de95d46cb445e663f82df
│   │   ├── fd
│   │   │   └── 0cb9901bc4b912141898ea778611ffeee8a806
│   │   ├── fe
│   │   │   └── ed72b297bce1c67c1356d21f25554a1c28d6d9
│   │   ├── ff
│   │   │   └── c6783cee9c67b880f46b62f0be06e6d4ed62d9
│   │   ├── info
│   │   └── pack
│   └── refs
│       ├── heads
│       │   └── main
│       ├── remotes
│       │   └── origin
│       │       └── main
│       └── tags
├── .gitignore
├── .snapshots
│   ├── config.json
│   ├── readme.md
│   └── sponsors.md
├── App.tsx
├── README.md
├── components
│   ├── AppHeader.tsx
│   ├── NavigationControls.tsx
│   ├── SaveProgressButton.tsx
│   ├── common
│   │   ├── Button.tsx
│   │   ├── CheckboxCard.tsx
│   │   ├── EmptyFieldOptions.tsx
│   │   ├── InputField.tsx
│   │   ├── ProgressBar.tsx
│   │   ├── RadioCard.tsx
│   │   ├── SectionHeader.tsx
│   │   ├── SelectField.tsx
│   │   ├── Spinner.tsx
│   │   ├── TextareaField.tsx
│   │   ├── ThemeToggle.tsx
│   │   └── Toast.tsx
│   └── formSections
│       ├── FamilyHistoryEntryRow.tsx
│       ├── Section0_Initial.tsx
│       ├── Section10_Lifestyle_Stress.tsx
│       ├── Section11_Environment_Exposures.tsx
│       ├── Section12_System_Review.tsx
│       ├── Section13_Readiness_Expectations.tsx
│       ├── Section1_BasicInfo.tsx
│       ├── Section2_ChiefComplaints.tsx
│       ├── Section3_HealthTimeline.tsx
│       ├── Section4_MedicalHistory.tsx
│       ├── Section5_FamilyHistory.tsx
│       ├── Section6_ChildhoodHistory.tsx
│       ├── Section7_Lifestyle_Diet.tsx
│       ├── Section8_Lifestyle_Activity.tsx
│       ├── Section9_Lifestyle_Sleep.tsx
│       ├── SpecialDietEntryRow.tsx
│       ├── SupplementEntryRow.tsx
│       ├── TimelineEntryCard.tsx
│       └── symptomReview
│           ├── SymptomCategoryBlock.tsx
│           ├── SymptomRatingInput.tsx
│           └── SymptomRatingRow.tsx
├── constants.ts
├── contexts
│   ├── FormContext.tsx
│   └── UIContext.tsx
├── copas-terminal-Snapshot.md
├── index.html
├── index.tsx
├── initprompt.tsx
├── initq.tsx
├── metadata.json
├── package-lock.json
├── package.json
├── styles
│   └── theme.css
├── tsconfig.json
├── types.ts
├── utils
│   └── localStorage.ts
├── vite.config.ts
├── z.md
├── zcomment.md
└── zwebcss.md

103 directories, 182 files


// comprehensive-health-questionnaire//index.tsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { FormProvider } from './contexts/FormContext';
import { UIProvider } from './contexts/UIContext';
import './styles/theme.css';

const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error("Could not find root element to mount to");
}

const root = ReactDOM.createRoot(rootElement);
root.render(
  <React.StrictMode>
    <UIProvider>
      <FormProvider>
        <App />
      </FormProvider>
    </UIProvider>
  </React.StrictMode>
);
// comprehensive-health-questionnaire//App.tsx

import React, { useEffect } from 'react';
import { useFormContext } from './contexts/FormContext';
import { useUIContext } from './contexts/UIContext';
import AppHeader from './components/AppHeader';
import ProgressBar from './components/common/ProgressBar';
import NavigationControls from './components/NavigationControls';
import Toast from './components/common/Toast';
import SectionHeader from './components/common/SectionHeader';

// Import Section Components
import Section0Initial from './components/formSections/Section0_Initial';
import Section1BasicInfo from './components/formSections/Section1_BasicInfo';
import Section2ChiefComplaints from './components/formSections/Section2_ChiefComplaints';
import Section3HealthTimeline from './components/formSections/Section3_HealthTimeline';
import Section4MedicalHistory from './components/formSections/Section4_MedicalHistory';
import Section5FamilyHistory from './components/formSections/Section5_FamilyHistory';
import Section6ChildhoodHistory from './components/formSections/Section6_ChildhoodHistory';
import Section7LifestyleDiet from './components/formSections/Section7_Lifestyle_Diet';
import Section8LifestyleActivity from './components/formSections/Section8_Lifestyle_Activity';
import Section9LifestyleSleep from './components/formSections/Section9_Lifestyle_Sleep';
import Section10LifestyleStress from './components/formSections/Section10_Lifestyle_Stress';
import Section11EnvironmentExposures from './components/formSections/Section11_Environment_Exposures';
import Section12SystemReview from './components/formSections/Section12_System_Review';
import Section13ReadinessExpectations from './components/formSections/Section13_Readiness_Expectations';

const sectionMetadata = [
  { component: Section0Initial, title: "Selamat Datang", icon: "👋" },
  { component: Section1BasicInfo, title: "Informasi Dasar", icon: "👤" },
  { component: Section2ChiefComplaints, title: "Keluhan Utama", icon: "🎯" },
  { component: Section3HealthTimeline, title: "Linimasa Kesehatan", icon: "🗓️" },
  { component: Section4MedicalHistory, title: "Riwayat Medis", icon: "📜" },
  { component: Section5FamilyHistory, title: "Riwayat Kesehatan Keluarga", icon: "👨‍👩‍👧‍👦" },
  { component: Section6ChildhoodHistory, title: "Riwayat Masa Kanak-Kanak", icon: "🧸" },
  { component: Section7LifestyleDiet, title: "Gaya Hidup: Pola Makan & Nutrisi", icon: "🥗" },
  { component: Section8LifestyleActivity, title: "Gaya Hidup: Aktivitas Fisik", icon: "🏃‍♂️" },
  { component: Section9LifestyleSleep, title: "Gaya Hidup: Pola Tidur & Istirahat", icon: "😴" },
  { component: Section10LifestyleStress, title: "Gaya Hidup: Manajemen Stres", icon: "🧘" },
  { component: Section11EnvironmentExposures, title: "Lingkungan & Paparan", icon: "🌳" },
  { component: Section12SystemReview, title: "Tinjauan Sistem Tubuh", icon: "🩺" },
  { component: Section13ReadinessExpectations, title: "Kesiapan & Harapan", icon: "💡" },
];

const App: React.FC = () => {
  const { currentSection, totalSections, loadSavedData, formData } = useFormContext(); 
  const { toastMessage } = useUIContext();

  useEffect(() => {
    loadSavedData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); 

  useEffect(() => {
    const sectionHeader = document.getElementById('section-header');
    if (sectionHeader) {
      sectionHeader.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }, [currentSection]);

  const { component: CurrentSectionComponent, title, icon } = sectionMetadata[currentSection];
  const patientFirstName = formData.basicInfo?.fullName?.split(' ')[0];

  return (
    <div className="mx-auto max-w-3xl w-full px-4 md:px-6 lg:px-8 py-8 min-h-screen flex flex-col">
      <AppHeader title="Formulir Kesehatan Komprehensif" />
      
      <main className="flex-grow bg-card text-card-foreground p-6 md:p-8 rounded-lg shadow-lg animate-fadeIn">
        <ProgressBar currentStep={currentSection} totalSteps={totalSections} />
        
        <div className="mt-6 mb-4">
          <SectionHeader 
            title={title} 
            icon={icon} 
            patientFirstName={currentSection > 0 ? patientFirstName : undefined} 
          />
        </div>

        <div className="mb-6">
          <NavigationControls />
        </div>
        
        <CurrentSectionComponent />
        
        <div className="mt-6">
          <NavigationControls />
        </div>
      </main>

      {toastMessage && <Toast message={toastMessage.text} type={toastMessage.type} />}
    </div>
  );
};

export default App;

// comprehensive-health-questionnaire//index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Comprehensive Health Questionnaire</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: '#6B46C1',
            'primary-light': '#8B5CF6', // For progress bar gradient
            secondary: '#10B981',
            accent: '#F59E0B',
            danger: '#EF4444',
            background: '#F9FAFB',
            surface: '#FFFFFF',
            'text-primary': '#111827',
            'text-secondary': '#6B7280',
            'border-color': '#E5E7EB',
          },
          borderRadius: {
            app: '12px', // var(--radius)
          },
          boxShadow: {
            app: '0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -2px rgba(0,0,0,0.1)', // Adjusted for better look
            'app-lg': '0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -4px rgba(0,0,0,0.1)', // Adjusted
          },
          keyframes: {
            fadeIn: {
              '0%': { opacity: '0' },
              '100%': { opacity: '1' },
            },
            fadeInDown: {
              '0%': { opacity: '0', transform: 'translateY(-20px)' },
              '100%': { opacity: '1', transform: 'translateY(0)' },
            },
            slideIn: { // Gentle slide in from bottom
              '0%': { opacity: '0', transform: 'translateY(10px)' },
              '100%': { opacity: '1', transform: 'translateY(0)' },
            },
            slideInRight: {
              '0%': { opacity: '0', transform: 'translateX(20px)' },
              '100%': { opacity: '1', transform: 'translateX(0)' },
            },
            shimmer: {
              '0%': { backgroundPosition: '-1000px 0' },
              '100%': { backgroundPosition: '1000px 0' },
            }
          },
          animation: {
            fadeIn: 'fadeIn 0.5s ease-out',
            fadeInDown: 'fadeInDown 0.6s ease-out',
            slideIn: 'slideIn 0.5s ease-out',
            slideInRight: 'slideInRight 0.5s ease-out',
            shimmer: 'shimmer 2s linear infinite',
          }
        }
      },
      plugins: [],
    }
  </script>
  <style>
    /* Custom scrollbar for a more refined look */
    ::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }
    ::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 10px;
    }
    ::-webkit-scrollbar-thumb {
      background: #c4b5fd; /* primary-lighter shade */
      border-radius: 10px;
    }
    ::-webkit-scrollbar-thumb:hover {
      background: #a78bfa; /* primary-light shade */
    }
    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }
    /* Custom style for range slider thumb */
    input[type="range"].range-slider::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 20px;
      height: 20px;
      background: #6B46C1; /* primary color */
      cursor: pointer;
      border-radius: 50%;
      margin-top: -7px; /* Adjust to center thumb on track */
    }

    input[type="range"].range-slider::-moz-range-thumb {
      width: 20px;
      height: 20px;
      background: #6B46C1; /* primary color */
      cursor: pointer;
      border-radius: 50%;
      border: none;
    }
  </style>
<script type="importmap">
{
  "imports": {
    "react": "https://esm.sh/react@^19.1.0",
    "react-dom/": "https://esm.sh/react-dom@^19.1.0/",
    "react/": "https://esm.sh/react@^19.1.0/"
  }
}
</script>
<link rel="stylesheet" href="/index.css">
</head>
<body class="bg-background text-text-primary">
  <div id="root"></div>
  <script type="module" src="/index.tsx"></script>
</body>
</html>

// comprehensive-health-questionnaire//contexts/FormContext.tsx

import React, { createContext, useContext, useState, ReactNode, useCallback, useEffect } from 'react';
import { FormData } from '../types';
import { TOTAL_FORM_SECTIONS, LOCAL_STORAGE_KEY } from '../constants';
import { useUIContext } from './UIContext';

interface FormContextType {
  currentSection: number;
  formData: FormData;
  totalSections: number;
  updateFormData: (field: keyof FormData | string, value: any) => void;
  nextSection: () => void;
  prevSection: () => void;
  saveProgress: () => void;
  loadSavedData: () => void;
  resetForm: () => void;
  isSubmitting: boolean;
  handleSubmit: () => Promise<void>;
}

const FormContext = createContext<FormContextType | undefined>(undefined);

export const FormProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [currentSection, setCurrentSection] = useState<number>(0);
  const [formData, setFormData] = useState<FormData>({});
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const { showToast } = useUIContext();

  const totalSections = TOTAL_FORM_SECTIONS;

  const updateFormData = useCallback((field: keyof FormData | string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  }, []);

  const handleSubmit = useCallback(async () => {
    setIsSubmitting(true);
    showToast('Mengirim formulir...', 'info');
    console.log("Form Data to Submit:", formData);

    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 2000));

    // This is where you would typically send data to a backend (e.g., Formspree)
    // For now, we'll simulate success
    const isSuccess = true; // Math.random() > 0.2; // Simulate potential failure

    if (isSuccess) {
      showToast('Formulir berhasil dikirim!', 'success');
       // setCurrentSection(0); // Reset to first section
       // setFormData({}); // Clear form data
       // localStorage.removeItem(LOCAL_STORAGE_KEY); // Clear local storage
       // The above lines are now part of resetForm
      setFormData({}); // Clear data first before resetForm sets section to 0, to avoid saving empty data
      setCurrentSection(0);
      localStorage.removeItem(LOCAL_STORAGE_KEY);

    } else {
      showToast('Gagal mengirim formulir. Silakan coba lagi.', 'error');
    }
    setIsSubmitting(false);
  }, [formData, showToast]); // Removed resetForm from here to manually control order

  const nextSection = useCallback(() => {
    if (currentSection < totalSections - 1) {
      setCurrentSection(prev => prev + 1);
    } else {
      handleSubmit();
    }
  }, [currentSection, totalSections, handleSubmit]);

  const prevSection = useCallback(() => {
    if (currentSection > 0) {
      setCurrentSection(prev => prev - 1);
    }
  }, [currentSection]);

  const saveProgress = useCallback(() => {
    try {
      // Only save if there's actual data or if it's not the initial empty state
      if (Object.keys(formData).length > 0 || currentSection > 0) {
        const progress = { currentSection, formData };
        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(progress));
        showToast('Progres berhasil disimpan!', 'success');
      }
    } catch (error) {
      console.error("Failed to save progress:", error);
      showToast('Gagal menyimpan progres.', 'error');
    }
  }, [currentSection, formData, showToast]);

  const loadSavedData = useCallback(() => {
    try {
      const savedProgress = localStorage.getItem(LOCAL_STORAGE_KEY);
      if (savedProgress) {
        const { currentSection: savedSection, formData: savedFormData } = JSON.parse(savedProgress);
        if (savedSection !== undefined && savedFormData) {
           // Basic validation: ensure savedSection is within bounds
          if (savedSection >= 0 && savedSection < totalSections) {
            setCurrentSection(savedSection);
            setFormData(savedFormData);
            showToast('Progres sebelumnya berhasil dimuat.', 'info');
          } else {
            localStorage.removeItem(LOCAL_STORAGE_KEY); // Clear invalid data
          }
        }
      }
    } catch (error) {
      console.error("Failed to load saved data:", error);
      localStorage.removeItem(LOCAL_STORAGE_KEY); // Clear potentially corrupted data
    }
  }, [showToast, totalSections]);
  
  const resetForm = useCallback(() => { // This is not used by handleSubmit anymore, but can be called externally
    setFormData({});
    setCurrentSection(0);
    localStorage.removeItem(LOCAL_STORAGE_KEY);
    showToast('Formulir telah direset.', 'info');
  }, [showToast]);


  // Auto-save progress can be very aggressive. Consider debouncing or specific triggers.
  // For this example, it's kept simple. A more robust solution might use a "dirty" flag.
   useEffect(() => {
    const timer = setTimeout(() => {
      // Check if formData is not empty to prevent saving initial state repeatedly.
      if (Object.keys(formData).length > 0) {
        // console.log("Autosaving progress due to formData or currentSection change...");
        // saveProgress(); // This was commented out in original, can be enabled if desired.
                       // Be mindful of frequency if re-enabled.
      }
    }, 30000); 
    return () => clearTimeout(timer);
  }, [formData, currentSection, saveProgress]);


  return (
    <FormContext.Provider value={{ 
      currentSection, 
      formData, 
      totalSections, 
      updateFormData, 
      nextSection, 
      prevSection, 
      saveProgress, 
      loadSavedData,
      resetForm, // Expose resetForm
      isSubmitting,
      handleSubmit
    }}>
      {children}
    </FormContext.Provider>
  );
};

export const useFormContext = (): FormContextType => {
  const context = useContext(FormContext);
  if (!context) {
    throw new Error('useFormContext must be used within a FormProvider');
  }
  return context;
};

// comprehensive-health-questionnaire//contexts/UIContext.tsx
import React, { createContext, useContext, useState, ReactNode, useCallback, useEffect } from 'react';
import { ToastMessage, ToastType } from '../types';

type Theme = 'light' | 'dark';

interface UIContextType {
  toastMessage: ToastMessage | null;
  showToast: (text: string, type?: ToastType, duration?: number) => void;
  hideToast: () => void;
  theme: Theme;
  toggleTheme: () => void;
}

const UIContext = createContext<UIContextType | undefined>(undefined);

let toastIdCounter = 0;

export const UIProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [toastMessage, setToastMessage] = useState<ToastMessage | null>(null);
  const [toastTimeoutId, setToastTimeoutId] = useState<number | null>(null);
  const [theme, setTheme] = useState<Theme>('light');

  useEffect(() => {
    const root = window.document.documentElement;
    root.setAttribute('data-theme', theme);
    root.classList.toggle('dark', theme === 'dark');
  }, [theme]);

  const toggleTheme = () => {
    setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));
  };

  const hideToast = useCallback(() => {
    setToastMessage(null);
    if (toastTimeoutId) {
      clearTimeout(toastTimeoutId);
      setToastTimeoutId(null);
    }
  }, [toastTimeoutId]);

  const showToast = useCallback((text: string, type: ToastType = 'info', duration: number = 3000) => {
    if (toastTimeoutId) {
      clearTimeout(toastTimeoutId);
    }
    const newToastId = toastIdCounter++;
    setToastMessage({ text, type, id: newToastId });
    
    const newTimeoutId = window.setTimeout(() => {
        setToastMessage(currentToast => (currentToast && currentToast.id === newToastId ? null : currentToast));
    }, duration);
    setToastTimeoutId(newTimeoutId);
  }, [toastTimeoutId]);


  return (
    <UIContext.Provider value={{ toastMessage, showToast, hideToast, theme, toggleTheme }}>
      {children}
    </UIContext.Provider>
  );
};

export const useUIContext = (): UIContextType => {
  const context = useContext(UIContext);
  if (!context) {
    throw new Error('useUIContext must be used within a UIProvider');
  }
  return context;
};

// comprehensive-health-questionnaire//.snapshots/readme.md
# Snapshots Directory

This directory contains snapshots of your code for AI interactions. Each snapshot is a markdown file that includes relevant code context and project structure information.

## What's included in snapshots?
- Selected code files and their contents
- Project structure (if enabled)
- Your prompt/question for the AI

## Configuration
You can customize snapshot behavior in `config.json`.

// comprehensive-health-questionnaire//.snapshots/sponsors.md
# Thank you for using Snapshots for AI

Thanks for using Snapshots for AI. We hope this tool has helped you solve a problem or two. 

If you would like to support our work, please help us by considering the following offers and requests:

## Ways to Support

### Join the GBTI Network!!! 🙏🙏🙏
The GBTI Network is a community of developers who are passionate about open source and community-driven development. Members enjoy access to exclussive tools, resources, a private MineCraft server, a listing in our members directory, co-op opportunities and more.

- Support our work by becoming a [GBTI Network member](https://gbti.network/membership/).

### Try out BugHerd 🐛
BugHerd is a visual feedback and bug-tracking tool designed to streamline website development by enabling users to pin feedback directly onto web pages. This approach facilitates clear communication among clients, designers, developers, and project managers.

- Start your free trial with [BugHerd](https://partners.bugherd.com/55z6c8az8rvr) today.

### Hire Developers from Codeable 👥
Codeable connects you with top-tier professionals skilled in frameworks and technologies such as Laravel, React, Django, Node, Vue.js, Angular, Ruby on Rails, and Node.js. Don't let the WordPress focus discourage you. Codeable experts do it all.

- Visit [Codeable](https://www.codeable.io/developers/?ref=z8h3e) to hire your next team member. 

### Lead positive reviews on our marketplace listing ⭐⭐⭐⭐⭐
- Rate us on [VSCode marketplace](https://marketplace.visualstudio.com/items?itemName=GBTI.snapshots-for-ai)
- Review us on [Cursor marketplace](https://open-vsx.org/extension/GBTI/snapshots-for-ai)

### Star Our GitHub Repository ⭐
- Star and watch our [repository](https://github.com/gbti-network/vscode-snapshots-for-ai)

### 📡 Stay Connected
Follow us on your favorite platforms for updates, news, and community discussions:
- **[Twitter/X](https://twitter.com/gbti_network)**
- **[GitHub](https://github.com/gbti-network)**
- **[YouTube](https://www.youtube.com/channel/UCh4FjB6r4oWQW-QFiwqv-UA)**
- **[Dev.to](https://dev.to/gbti)**
- **[Daily.dev](https://dly.to/zfCriM6JfRF)**
- **[Hashnode](https://gbti.hashnode.dev/)**
- **[Discord Community](https://gbti.network)**
- **[Reddit Community](https://www.reddit.com/r/GBTI_network)**

---

Thank you for supporting open source software! 🙏

// comprehensive-health-questionnaire//copas-terminal-Snapshot.md
/bin/bash -c '
# --- Configuration ---
  # FOLDER_PATH="/Users/kennyg/GitHub-radicalz1-T86"
  FOLDER_PATH="/Users/kennyg/Downloads"
  WS="comprehensive-health-questionnaire"
  WORK_DIR=""
  OUTPUT_FILENAME="${WORK_DIR}-${WS}-Snapshot.txt"

# --- Execute Report ---
   Codebase=TRUE
   Errors=TRUE
   CountLines=TRUEx
   DBResetSeedUsers=TRUEx

# --- Path Generation ---
  BASE_DIR="${FOLDER_PATH}/${WS}"
  PROJECT_NAME=$(basename "$BASE_DIR")
  PROJECT_DIR="${BASE_DIR}/${WORK_DIR}"
  OUTPUT_FILE="${BASE_DIR}/${OUTPUT_FILENAME}"

# === Codebase Configuration ===
  # TARGET DIR 
    TARGET_DIRS=("$PROJECT_DIR")
  # NOT DIR
    NOT_DIRS=(
      "*/.next/*" 
      "*/.vscode/*" 
      "*/.e2e/*" 
      "*/.git/*" 
      "*/node_modules/*" 
      "*/playwright-report/*" 
      "*/public/*" 
      "*/scripts/*" 
      "*/test*"
    )
  # NOT FILES
    NOT_FILES=(
      ".env*" 
      "package-lock.json" 
      "README.md" 
      "playwright.config.ts" 
      "TODO.md"
      "GEMINI-log.md" 
      "manifesto.md" 
      "GEMINI.md" 
      "Roadmap.md" 
      "${OUTPUT_FILENAME}"
    )
  # FILES ON ROOT
    FILES_TO_INCLUDE=(
      "GEMINI.md"
    )

# === Lines of Code Configuration ===
    PROCESS_LOW_THRESHOLD=true
    LINE_THRESHOLD_HIGH=250
    LINE_THRESHOLD_LOW=150
        
    EXCLUDE_DIRS_CLINES=(
      "$PROJECT_DIR/.gemini" 
      "$PROJECT_DIR/.next" 
      "$PROJECT_DIR/.vscode" 
      "$PROJECT_DIR/.git"
      "$PROJECT_DIR/e2e" 
      "$PROJECT_DIR/node_modules" 
      "$PROJECT_DIR/playwright-report"
      "$PROJECT_DIR/public" 
      "$PROJECT_DIR/scripts" 
      "$PROJECT_DIR/supabase" 
      "$PROJECT_DIR/test-results"
    )
    EXCLUDE_FILES_CLINES=(
      ".DS_Store" 
      ".env*" 
      "*.json" 
      "*.md" 
      "*.lock" 
      "*.css" 
      "*.config.js" 
      "*.config.ts"
      "*.bak" 
      "*.txt" 
      "*.log" 
      "*.html" 
      "*.yaml" 
      "database.types.ts"
    )

# --- Script Execution ---
    echo "Generating report to: ${OUTPUT_FILE}"
    rm -f "$OUTPUT_FILE" && touch "$OUTPUT_FILE"

# Block 1: Gather all codebase information
    if [ "$Codebase" = "TRUE" ]; then
      echo "Gathering codebase information..."
      {
        echo "// DISREGARD PREVIOUS UPLOADED CODEBASE. CURRENT CODEBASE START"
        echo ""
        echo "// STRUCTURE"
        tree "$BASE_DIR" -a -I "node_modules"
        echo ""

        for DIR in "${TARGET_DIRS[@]}"; do
          FIND_ARGS=("-type" "f")
          for EXCLUDE_DIR in "${NOT_DIRS[@]}"; do FIND_ARGS+=("-not" "-path" "$EXCLUDE_DIR"); done
          for EXCLUDE_FILE in "${NOT_FILES[@]}"; do FIND_ARGS+=("-not" "-name" "$EXCLUDE_FILE"); done

          find "$DIR" "${FIND_ARGS[@]}" -print0 |
          while IFS= read -r -d "" file;
 do
            if file --mime-type "$file" | grep -q "text/"; then
              echo ""
              RELATIVE_PATH=$(echo "$file" | sed "s|^${BASE_DIR}/|${PROJECT_NAME}/|")
              echo "// $RELATIVE_PATH"
              cat "$file"
            fi
          done
        done

        for FILE_NAME in "${FILES_TO_INCLUDE[@]}"; do
          FILE_PATH="$BASE_DIR/$FILE_NAME"
          if [ -f "$FILE_PATH" ]; then
            echo ""
            echo "// FILE: $(basename "$FILE_PATH")"
            cat "$FILE_PATH"
          fi
        done
      } >> "$OUTPUT_FILE"
    fi

  # Block 2: Run analysis checks
    if [ "$Errors" = "TRUE" ]; then
      echo "Running build analysis checks..."
      (
        cd "$PROJECT_DIR" || { echo "Error: Could not change to directory ${PROJECT_DIR}"; exit 1; }
        {
          echo ""
          echo "--- START OF TYPESCRIPT CHECK ---"
          echo "Running TypeScript check..."
          pnpm tsc --noEmit || true

          echo ""
          echo "--- START OF LINTER CHECK ---"
          echo "Running linter..."
          pnpm lint || true
        }
      ) >> "$OUTPUT_FILE" 2>&1
    fi

  # Block 3: Count lines of code
    if [ "$CountLines" = "TRUE" ]; then
        echo "Counting lines of code..."

        TEMP_FILE_HIGH=$(mktemp)
        find_args=()
        for dir in "${EXCLUDE_DIRS_CLINES[@]}"; do
          find_args+=(-path "$dir" -prune -o)
        done
        for file_pattern in "${EXCLUDE_FILES_CLINES[@]}"; do
          find_args+=(-not -name "$file_pattern")
        done
        find_args+=("-type" "f" "-print0")

        if [ "$PROCESS_LOW_THRESHOLD" = true ]; then
          TEMP_FILE_LOW=$(mktemp)
          while IFS= read -r -d "" file_path;
 do
            lines=$(wc -l < "$file_path" | tr -d " ")
            if (( lines >= LINE_THRESHOLD_HIGH )); then
              echo "$lines $file_path" >> "$TEMP_FILE_HIGH"
            elif (( lines >= LINE_THRESHOLD_LOW )); then
              echo "$lines $file_path" >> "$TEMP_FILE_LOW"
            fi
          done < <(find "$PROJECT_DIR" "${find_args[@]}")
        else
          while IFS= read -r -d "" file_path;
 do
            lines=$(wc -l < "$file_path" | tr -d " ")
            if (( lines >= LINE_THRESHOLD_HIGH )); then
              echo "$lines $file_path" >> "$TEMP_FILE_HIGH"
            fi
          done < <(find "$PROJECT_DIR" "${find_args[@]}")
        fi

        {
          echo ""
          echo "--- START OF LINE COUNT REPORT ---"
          echo "Read and refactor each of these updated files, one by one, which has 200+ lines strictly adhering to rules in \`$BASE_DIR/GEMINI.md\` :"
          cat "$TEMP_FILE_HIGH"
        } >> "$OUTPUT_FILE"

        if [ "$PROCESS_LOW_THRESHOLD" = true ]; then
          {
            echo ""
            echo "--- FILES WITH 150-199 LINES ---"
            cat "$TEMP_FILE_LOW"
          } >> "$OUTPUT_FILE"
        fi
        
        rm "$TEMP_FILE_HIGH"
        if [ "$PROCESS_LOW_THRESHOLD" = true ]; then
          rm "$TEMP_FILE_LOW"
        fi
    fi

  # Block 4: Reset Database
    if [ "$DBResetSeedUsers" = "TRUE" ]; then
        echo "Resetting database and seeding users..."
        {
          echo ""
          echo "--- START OF DB RESET LOG ---"
          (cd "$PROJECT_DIR" && supabase db reset --debug && node $PROJECT_DIR/supabase/seed-users.mjs)
          echo "--- END OF DB RESET LOG ---"
        } >> "$OUTPUT_FILE" 2>&1
    fi

    echo "" >> "$OUTPUT_FILE"
    echo "// END" >> "$OUTPUT_FILE"
    echo "Analysis complete. Report generated at ${OUTPUT_FILE}"
'

// comprehensive-health-questionnaire//utils/localStorage.ts

import { FormData } from '../types';
import { LOCAL_STORAGE_KEY } from '../constants';

interface SavedProgress {
  currentSection: number;
  formData: FormData;
}

export const saveProgressToLocalStorage = (currentSection: number, formData: FormData): boolean => {
  try {
    const progress: SavedProgress = { currentSection, formData };
    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(progress));
    return true;
  } catch (error) {
    console.error("Failed to save progress to localStorage:", error);
    return false;
  }
};

export const loadProgressFromLocalStorage = (): SavedProgress | null => {
  try {
    const savedProgress = localStorage.getItem(LOCAL_STORAGE_KEY);
    if (savedProgress) {
      return JSON.parse(savedProgress) as SavedProgress;
    }
    return null;
  } catch (error) {
    console.error("Failed to load progress from localStorage:", error);
    localStorage.removeItem(LOCAL_STORAGE_KEY); // Clear potentially corrupted data
    return null;
  }
};

export const clearProgressFromLocalStorage = (): void => {
  try {
    localStorage.removeItem(LOCAL_STORAGE_KEY);
  } catch (error) {
    console.error("Failed to clear progress from localStorage:", error);
  }
};

// comprehensive-health-questionnaire//types.ts
// Define interfaces for specific condition entries
export interface ConditionEntry {
  id: string; // For unique key prop
  condition: string;
  year?: string;
  is_present?: boolean; // Added is_present field
}

// Define interface for Medical Conditions Data
export interface MedicalConditionsData {
  autoimmune?: ConditionEntry[];
  autoimmuneOther?: string;
  cardiovascular?: ConditionEntry[];
  cardiovascularOther?: string;
  endocrine?: ConditionEntry[];
  endocrineOther?: string;
  gastrointestinal?: ConditionEntry[];
  gastrointestinalOther?: string;
  neurological?: ConditionEntry[];
  neurologicalOther?: string;
  musculoskeletal?: ConditionEntry[];
  musculoskeletalOther?: string;
  respiratory?: ConditionEntry[];
  respiratoryOther?: string;
  skin?: ConditionEntry[];
  skinOther?: string;
  hematology?: {
    anemiaType?: string;
    anemiaYear?: string;
    anemiaIsPresent?: boolean;
    clottingDisorderType?: string;
    clottingDisorderYear?: string;
    clottingDisorderIsPresent?: boolean;
  };
  hematologyOther?: string;
  oncology?: {
    cancerType?: string;
    cancerYear?: string;
    cancerStatus?: string;
    cancerIsPresent?: boolean;
  };
  oncologyOther?: string;
  chronicInfections?: {
    lyme?: string;
    lymeYear?: string;
    lymeIsPresent?: boolean;
    ebv?: string;
    ebvYear?: string;
    ebvIsPresent?: boolean;
    herpes?: string;
    herpesYear?: string;
    herpesIsPresent?: boolean;
    fungal?: string;
    fungalYear?: string;
    fungalIsPresent?: boolean;
    parasiteType?: string;
    parasiteYear?: string;
    parasiteIsPresent?: boolean;
  };
  chronicInfectionsOther?: string;
}


export interface FormData {
  // Section 0: Initial
  formFiller?: 'self' | 'other';
  relationshipToPatient?: string;
  contactPreference?: 'whatsapp' | 'email';
  contactDetail?: string;
  // Add new fields from Section 0 cross-check
  contactPerson?: 'patient' | 'filler';
  mainContactName?: string;


  // Section 1: Basic Info
  fullName?: string;
  dob?: string;
  gender?: 'male' | 'female' | 'other';
  height?: string; // cm
  weight?: string; // kg
  height_empty_reason?: EmptyReason;
  weight_empty_reason?: EmptyReason;

  // Section 2: Chief Complaints
  chiefComplaints?: {
    description: string;
    onset: string;
    severity: number;
  }[];
  consultationExpectations?: string;
  healthGoals?: string;
  previousTreatments?: string;
  worseningFactors?: string;
  improvingFactors?: string;

  // Section 3: Health Timeline
  healthTimeline?: TimelineEntry[];

  // Section 4: Medical History
  medicalConditions?: MedicalConditionsData; // Use the new interface
  surgeries?: string; // Keep as is for now, can be detailed later
  surgeries_empty_reason?: EmptyReason;
  hospitalizations?: string; // Reason and year
  hospitalizations_empty_reason?: EmptyReason;
  medicationAllergies?: string; // Drug and reaction
  medicationAllergies_empty_reason?: EmptyReason;
  foodAllergiesDiagnosed?: string; // Food and reaction (IgE)
  foodAllergiesDiagnosed_empty_reason?: EmptyReason;
  foodIntolerancesSensitivities?: string; // Food and symptoms (non-IgE)
  foodIntolerancesSensitivities_empty_reason?: EmptyReason;
  bloodTransfusion?: {
    hasTransfusion: boolean;
    year?: string;
    reason?: string;
  };
  adultVaccinationsReactions?: string;
  adultVaccinationsReactions_empty_reason?: EmptyReason;

  // Section 5: Family History
  familyHistory?: FamilyHistoryEntry[];

  // Section 6: Childhood History & Development
  birthStatus?: 'full_term' | 'premature' | 'post_term';
  prematureWeeks?: string;
  prematureWeeks_empty_reason?: EmptyReason;
  deliveryMethod?: 'vaginal' | 'emergency_csection' | 'planned_csection' | 'induced' | 'assisted_delivery';
  deliveryMethodReason?: string;
  deliveryMethodReason_empty_reason?: EmptyReason;
  birthWeight?: string; // e.g., "3.2 kg" or "3200 grams"
  birthWeight_empty_reason?: EmptyReason;
  breastfeeding?: 'exclusive' | 'mixed' | 'formula_only';
  breastfeedingDuration?: string; // e.g., "6 months"
  breastfeedingDuration_empty_reason?: EmptyReason;
  antibioticsAsChild?: 'never' | 'rare' | 'frequent' | 'very_frequent';
  recurrentChildhoodInfections?: string[]; // Store values of selected infections
  recurrentChildhoodInfectionsOther?: string;
  recurrentChildhoodInfectionsOther_empty_reason?: EmptyReason;
  developmentalHistory?: string[]; // Store values of selected developmental issues
  adverseChildhoodExperiences?: string[]; // Store values of selected ACEs
  otherChildhoodTrauma?: string;
  otherChildhoodTrauma_empty_reason?: EmptyReason;

  // Section 7 (G1): Lifestyle - Diet & Nutrition
  dietNutrition?: DietNutritionData;

  // Section 8 (G2): Lifestyle - Physical Activity
  physicalActivity?: PhysicalActivityData;

  // Section 9 (G3): Lifestyle - Sleep & Rest
  sleep?: SleepData;

  // Section 10 (G4): Lifestyle - Stress & Emotional Health
  stressEmotionalHealth?: StressEmotionalHealthData;

  // Section 11 (H): Environment & Exposures
  environmentalExposures?: EnvironmentalExposuresData;

  // Section 12 (I): System Review
  systemReview?: SystemReviewData;
  systemReviewOtherSymptoms?: string;

  // Section 13 (J): Readiness & Expectations
  readinessExpectations?: ReadinessExpectationsData;

  // ... Add types for other sections as needed

  [key: string]: any; // Allow for dynamic _empty_reason fields
}

export interface TimelineEntry {
  id: string;
  ageYear: string;
  event: string;
  symptoms: string;
}

export interface FamilyHistoryEntry {
  id: string;
  conditionCategory: string;
  conditionDetails?: string;
  relationship: string;
  ageOfDiagnosis?: string;
}

export interface SupplementEntry {
  id: string;
  nameBrand: string;
  dosage: string;
  frequency: string;
  reason: string;
  prescriber: string;
}

export interface SpecialDietEntry {
  id: string;
  dietName: string; // Could be from a list or "other"
  dietNameOther?: string; // If dietName is 'other'
  duration: string;
  eliminatedFoods?: string;
}

export interface DietNutritionData {
  generalDietPattern?: string; // e.g., 'omnivore', 'vegetarian', 'vegan', 'pescetarian', 'flexitarian', 'other'
  generalDietPatternOther?: string;

  specialDiets?: SpecialDietEntry[];

  mealsPerDay?: string;
  snacksPerDay?: string;

  avgDailyLeafyGreens?: string; // porsi
  avgDailyOtherVegetables?: string; // porsi
  avgDailyFruits?: string; // porsi
  avgDailyWholeGrains?: string; // porsi
  avgDailyNutsSeeds?: string; // sendok makan/genggam
  avgDailyAnimalProtein?: string; // porsi
  avgDailyDairyOrAlternatives?: string; // porsi/gelas
  avgDailyHealthyFats?: string; // sendok makan

  frequentFoods?: string; // textarea
  frequentFoods_empty_reason?: EmptyReason;
  avoidedDislikedFoods?: string; // textarea
  avoidedDislikedFoods_empty_reason?: EmptyReason;
  mainProteinSource?: string; // textarea
  mainProteinSource_empty_reason?: EmptyReason;
  mainFatSource?: string; // textarea
  mainFatSource_empty_reason?: EmptyReason;

  addedSugarIntake?: 'rarely_never' | '1-2_week' | '3-4_week' | 'daily';
  processedFoodIntake?: 'rarely_never' | '1-2_week' | '3-4_week' | 'daily';

  caffeineIntakeAmount?: string; // "X cangkir/gelas per hari"
  caffeineIntakeType?: string; // "Kopi, Teh, Soda, etc."
  caffeineIntakeAmount_empty_reason?: EmptyReason;
  caffeineIntakeType_empty_reason?: EmptyReason;

  alcoholIntake?: 'never' | 'social' | 'light' | 'moderate' | 'heavy';
  alcoholIntakeTypeAmount?: string; // "Bir, 1 botol per minum"
  alcoholIntakeTypeAmount_empty_reason?: EmptyReason;

  dailyWaterIntakeAmount?: string; // "X gelas/liter"
  dailyWaterIntakeType?: 'tap_cooked_uncooked' | 'bottled_gallon' | 'home_filter' | 'alkaline' | 'other';
  dailyWaterIntakeTypeFilter?: string;
  dailyWaterIntakeTypeOther?: string;
  dailyWaterIntakeAmount_empty_reason?: EmptyReason;
  dailyWaterIntakeTypeFilter_empty_reason?: EmptyReason;
  dailyWaterIntakeTypeOther_empty_reason?: EmptyReason;


  eatingHabits?: string[]; // 'hurried', 'distracted_eating', 'mindful_eating', 'skip_meals'

  foodCravings?: string[]; // 'sweet', 'salty', 'savory_msg', 'carbs', 'chocolate', 'fried', 'other'
  foodCravingsOther?: string;
  foodCravingsTiming?: string;
  foodCravingsOther_empty_reason?: EmptyReason;
  foodCravingsTiming_empty_reason?: EmptyReason;

  cookFrequency?: 'almost_always' | 'often' | 'sometimes' | 'rarely' | 'never';
  readFoodLabelsFrequency?: 'always' | 'often' | 'sometimes' | 'rarely' | 'never';

  groceryShoppingSource?: 'traditional_market' | 'supermarket' | 'organic_store' | 'online' | 'direct_farmer' | 'other';
  groceryShoppingSourceOther?: string;
  groceryShoppingSourceOther_empty_reason?: EmptyReason;

  currentSupplements?: SupplementEntry[];
}

export interface PhysicalActivityData {
  structuredExerciseFrequency?: string; // "X kali/minggu"
  structuredExerciseFrequency_empty_reason?: EmptyReason;
  mainExerciseTypes?: string; // textarea
  mainExerciseTypes_empty_reason?: EmptyReason;
  avgExerciseDuration?: string; // "X menit"
  avgExerciseDuration_empty_reason?: EmptyReason;
  avgExerciseIntensity?: 'light' | 'moderate' | 'heavy';
  otherDailyPhysicalActivity?: string; // textarea
  otherDailyPhysicalActivity_empty_reason?: EmptyReason;
  activityLevelAtWork?: 'sedentary' | 'standing' | 'walking' | 'heavy_physical';
  totalDailySittingHours?: string; // "X jam"
  totalDailySittingHours_empty_reason?: EmptyReason;
  enjoyPhysicalActivity?: 'greatly_enjoy' | 'somewhat_enjoy' | 'neutral' | 'dislike' | 'strongly_dislike';
  barriersToExercise?: string[]; // 'no_time', 'no_motivation', 'fatigue', 'pain_condition', 'no_facility', 'other'
  barriersToExerciseOther?: string;
  barriersToExerciseOther_empty_reason?: EmptyReason;
}

export interface SleepData {
  avgSleepDuration?: string; // "X jam"
  avgSleepDuration_empty_reason?: EmptyReason;
  usualBedtime?: string; // time, e.g. "22:00"
  usualBedtime_empty_reason?: EmptyReason;
  usualWakeTime?: string; // time, e.g. "06:00"
  usualWakeTime_empty_reason?: EmptyReason;
  sleepScheduleConsistent?: 'yes' | 'no';
  sleepQuality?: number; // 0-10 scale

  sleepProblems?: string[]; // e.g., 'difficulty_falling_asleep', 'frequent_waking', 'early_waking', etc.
  sleepProblemsNightWakeTime?: string; // if 'frequent_waking'
  sleepProblemsNightWakeTime_empty_reason?: EmptyReason;
  sleepProblemsNightWakeActivity?: string; // if 'frequent_waking'
  sleepProblemsNightWakeActivity_empty_reason?: EmptyReason;

  sleepEnvironmentDarkness?: 'very_dark' | 'somewhat_light' | 'quite_bright';
  sleepEnvironmentTemp?: 'cool_comfortable' | 'too_warm' | 'too_cold';
  sleepEnvironmentNoise?: 'quiet' | 'somewhat_noisy' | 'noisy_disturbing';
  petsInBed?: 'yes' | 'no';

  preSleepRoutine?: string; // textarea
  preSleepRoutine_empty_reason?: EmptyReason;
  sleepAidsUsed?: string; // textarea for name, dosage, frequency
  sleepAidsUsed_empty_reason?: EmptyReason;

  feelingOnWaking?: 'refreshed' | 'somewhat_refreshed' | 'somewhat_tired' | 'very_tired';

  napsTaken?: 'yes' | 'no';
  napDetails?: string; // "X menit, Y kali/minggu" - if napsTaken is 'yes'
  napDetails_empty_reason?: EmptyReason;
}

export interface StressEmotionalHealthData {
  avgStressLevel?: number; // 0-10 scale
  mainStressSources?: string[]; // 'work', 'finance', 'relationship_partner', 'relationship_family', 'relationship_friends', 'health_personal', 'health_family_member', 'major_life_event', 'loneliness', 'social_demands', 'other'
  mainStressSourcesOther?: string;
  mainStressSourcesOther_empty_reason?: EmptyReason;
  stressPhysicalSymptoms?: string; // textarea
  stressPhysicalSymptoms_empty_reason?: EmptyReason;
  stressEmotionalSymptoms?: string; // textarea
  stressEmotionalSymptoms_empty_reason?: EmptyReason;

  stressManagementTechniquesSelected?: string[]; // 'meditation', 'yoga_tai_chi', 'deep_breathing', 'journaling', 'time_in_nature', 'hobbies', 'talking_to_friends_family', 'professional_therapy', 'exercise', 'listening_to_music', 'other'

  meditationEffectiveness?: number;
  yogaTaiChiEffectiveness?: number;
  deepBreathingEffectiveness?: number;
  journalingEffectiveness?: number;
  timeInNatureEffectiveness?: number;
  hobbiesEffectiveness?: number;
  talkingToFriendsFamilyEffectiveness?: number;
  professionalTherapyEffectiveness?: number;
  exerciseEffectiveness?: number;
  listeningToMusicEffectiveness?: number;

  hobbiesSpecify?: string;
  hobbiesSpecify_empty_reason?: EmptyReason;
  otherStressTechniqueName?: string;
  otherStressTechniqueName_empty_reason?: EmptyReason;
  otherStressTechniqueEffectiveness?: number;

  hasConfidant?: 'yes' | 'no';
  socializingFrequency?: 'daily' | 'several_times_week' | 'several_times_month' | 'rarely_never';
  partOfCommunity?: 'yes' | 'no';

  spiritualReligiousPractice?: string;
  spiritualReligiousPractice_empty_reason?: EmptyReason;
  spiritualPracticeProvidesStrength?: 'yes' | 'sometimes' | 'no';

  settingBoundariesDifficulty?: 'easy' | 'sometimes_difficult' | 'very_difficult';
  timeForRelaxation?: string;
  timeForRelaxation_empty_reason?: EmptyReason;
  generalLifeOutlook?: 'very_optimistic' | 'somewhat_optimistic' | 'neutral' | 'somewhat_pessimistic' | 'very_pessimistic';

  significantEmotionalTrauma?: string;
  significantEmotionalTrauma_empty_reason?: EmptyReason;
  mentalHealthConsultation?: 'yes' | 'no';
  mentalHealthConsultationDetails?: string;
  mentalHealthConsultationDetails_empty_reason?: EmptyReason;
}

export interface EnvironmentalExposuresData {
  currentDwellingType?: 'urban_dense' | 'suburban' | 'rural' | 'near_industrial' | 'near_highway' | 'near_farmland';
  currentDwellingTypeIndustrialDetail?: string;
  currentDwellingTypeIndustrialDetail_empty_reason?: EmptyReason;
  currentDwellingTypeAgriculturePesticides?: 'yes' | 'no' | 'unknown';

  dwellingAge?: string; // "X tahun"
  dwellingAge_empty_reason?: EmptyReason;

  moldWaterDamageHistory?: 'yes' | 'no' | 'unknown';
  moldWaterDamageDetailsWhere?: string;
  moldWaterDamageDetailsWhere_empty_reason?: EmptyReason;
  moldWaterDamageDetailsWhen?: string;
  moldWaterDamageDetailsWhen_empty_reason?: EmptyReason;

  homeDrinkingWaterSource?: string; // Different from G1.13 as this is 'source', G1.13 is 'type consumed'
  homeDrinkingWaterSourceOther?: string;
  homeDrinkingWaterSource_empty_reason?: EmptyReason;
  homeDrinkingWaterSourceOther_empty_reason?: EmptyReason;

  homeBathingWaterSource?: 'pdam' | 'well_water' | 'mountain_spring' | 'other';
  homeBathingWaterSourceOther?: string;
  homeBathingWaterSourceOther_empty_reason?: EmptyReason;
  homeBathingWaterFiltered?: 'yes' | 'no';
  homeBathingWaterFilterType?: string;
  homeBathingWaterFilterType_empty_reason?: EmptyReason;

  indoorAirVentilation?: 'good_daily' | 'moderate_weekly' | 'poor_rarely';
  acUsage?: 'often' | 'sometimes' | 'rarely' | 'none';
  acFilterCleaningFrequency?: string;
  acFilterCleaningFrequency_empty_reason?: EmptyReason;
  airPurifierUsage?: 'yes' | 'no';
  airPurifierType?: string;
  airPurifierType_empty_reason?: EmptyReason;
  airFreshenerUsage?: 'often' | 'sometimes' | 'rarely' | 'never';
  smokingInHome?: 'yes' | 'no';

  workplaceExposures?: string[]; // 'chemicals', 'dust_fiber', 'fumes_solvents', 'heavy_metals', 'pesticides_herbicides', 'radiation', 'loud_noise', 'vibrations', 'none', 'other'
  workplaceChemicalsDetail?: string;
  workplaceChemicalsDetail_empty_reason?: EmptyReason;
  workplaceDustFiberDetail?: string;
  workplaceDustFiberDetail_empty_reason?: EmptyReason;
  workplaceFumesDetail?: string;
  workplaceFumesDetail_empty_reason?: EmptyReason;
  workplaceHeavyMetalsDetail?: string;
  workplaceHeavyMetalsDetail_empty_reason?: EmptyReason;
  workplacePesticidesDetail?: string;
  workplacePesticidesDetail_empty_reason?: EmptyReason;
  workplaceRadiationDetail?: string;
  workplaceRadiationDetail_empty_reason?: EmptyReason;
  workplaceOtherExposuresDetail?: string;
  workplaceOtherExposuresDetail_empty_reason?: EmptyReason;

  hobbiesToxicExposure?: string;
  hobbiesToxicExposure_empty_reason?: EmptyReason;

  personalCareProductsAwareness?: 'always' | 'often' | 'sometimes' | 'no';
  personalCareProductsPreference?: 'conventional' | 'natural_organic' | 'homemade' | 'no_preference';

  cleaningProductsPreference?: 'conventional' | 'natural_eco_friendly' | 'homemade';

  plasticFoodStorage?: 'often' | 'sometimes' | 'rarely_glass_stainless';
  plasticMicrowaving?: 'often' | 'sometimes' | 'rarely' | 'never';
  plasticBottleDrinking?: 'often' | 'sometimes' | 'rarely';

  largeFishConsumption?: 'often_more_2_week' | 'sometimes_1_week' | 'rarely_monthly' | 'never';

  amalgamFillings?: 'yes' | 'no' | 'unknown';
  amalgamFillingsCount?: string;
  amalgamFillingsCount_empty_reason?: EmptyReason;
  amalgamFillingsStillPresent?: 'yes' | 'no_removed'; // Only if amalgamFillings is 'yes'
  amalgamFillingsRemovedDate?: string; // Only if stillPresent is 'no_removed'
  amalgamFillingsRemovedDate_empty_reason?: EmptyReason;

  dailyGadgetUsageHours?: string;
  dailyGadgetUsageHours_empty_reason?: EmptyReason;
  gadgetProximityToBody?: 'yes' | 'no';
  proximityToTowersSUTET?: 'yes' | 'no' | 'unknown';

  travelToEndemicAreas?: string; // textarea
  travelToEndemicAreas_empty_reason?: EmptyReason;
}

export interface SymptomRating {
  frequency: number; // 0-3
  severity: number;  // 0-3
}

export interface SystemReviewData {
  [symptomId: string]: SymptomRating | string; // Allow string for systemReviewOtherSymptoms
}

export interface ReadinessExpectationsData {
  motivationForChange?: string;
  motivationForChange_empty_reason?: EmptyReason;
  lifestyleChangeReadiness?: number; // 0-10 scale
  labTestReadiness?: 'very_ready' | 'ready' | 'hesitant' | 'not_ready';
  financialLimitations?: string;
  financialLimitations_empty_reason?: EmptyReason;
  specificQuestions?: string;
  specificQuestions_empty_reason?: EmptyReason;
  referralSource?: 'doctor' | 'friend_family' | 'social_media' | 'website_article' | 'seminar_workshop' | 'other';
  referralSourceDetail?: string;
  referralSourceDetail_empty_reason?: EmptyReason;
}


export enum EmptyReason {
  Privacy = "privacy",
  Unknown = "unknown",
}

export type ToastType = 'success' | 'error' | 'info';

export interface ToastMessage {
  text: string;
  type: ToastType;
  id: number;
}

// comprehensive-health-questionnaire//styles/theme.css

:root {
  --font-sans: 'Inter', sans-serif;
  --font-display: 'Manrope', 'sans-serif';

  /* Slate palette */
  --slate-50: hsl(220 20% 97%);
  --slate-100: hsl(220 16% 94%);
  --slate-200: hsl(220 13% 91%);
  --slate-300: hsl(220 14% 85%);
  --slate-400: hsl(220 13% 65%);
  --slate-500: hsl(220 9% 55%);
  --slate-600: hsl(220 9% 45%);
  --slate-700: hsl(220 10% 35%);
  --slate-800: hsl(220 13% 25%);
  --slate-900: hsl(220 15% 18%);
  --slate-950: hsl(224 23% 7%);
  
  /* Default Light Theme */
  --brand-50: hsl(219 100% 97%);
  --brand-100: hsl(218 95% 94%);
  --brand-200: hsl(219 92% 88%);
  --brand-300: hsl(220 89% 80%);
  --brand-400: hsl(221 84% 71%);
  --brand-500: hsl(221 77% 62%);
  --brand-600: hsl(221 72% 53%);
  --brand-700: hsl(222 66% 45%);
  --brand-800: hsl(223 63% 38%);
  --brand-900: hsl(224 57% 31%);
  --brand-950: hsl(225 61% 18%);
  
  --accent-50: hsl(48 100% 97%);
  --accent-100: hsl(47 95% 93%);
  --accent-200: hsl(47 93% 86%);
  --accent-300: hsl(46 91% 76%);
  --accent-400: hsl(45 89% 65%);
  --accent-500: hsl(43 89% 55%);
  --accent-600: hsl(41 89% 48%);
  --accent-700: hsl(38 82% 41%);
  --accent-800: hsl(36 78% 34%);
  --accent-900: hsl(34 72% 28%);
  --accent-950: hsl(32 80% 15%);

  /* Main Colors */
  --background: hsl(0 0% 100%);
  --foreground: hsl(var(--slate-950));
  --primary: hsl(var(--brand-600));
  --primary-foreground: hsl(0 0% 100%);
  --secondary: hsl(var(--slate-200));
  --secondary-foreground: hsl(var(--slate-800));
  --accent: hsl(var(--accent-500));
  --accent-foreground: hsl(var(--slate-950));
  --danger: hsl(0 84% 60%);
  --danger-foreground: hsl(0 0% 100%);
  --card: hsl(0 0% 100%);
  --card-foreground: hsl(var(--slate-950));
  --border: hsl(var(--slate-200));
  --input: hsl(var(--slate-300));
  --ring: hsl(var(--brand-500));
  --text-primary: hsl(var(--slate-800));
  --text-secondary: hsl(var(--slate-600));
  --border-color: hsl(var(--slate-300));
}

html[data-theme='dark'] {
  --background: hsl(222 47% 11%);
  --foreground: hsl(var(--slate-200));
  --primary: hsl(var(--brand-500));
  --primary-foreground: hsl(var(--slate-950));
  --secondary: hsl(var(--slate-800));
  --secondary-foreground: hsl(var(--slate-200));
  --accent: hsl(var(--accent-500));
  --accent-foreground: hsl(var(--slate-50));
  --danger: hsl(0 72% 51%);
  --danger-foreground: hsl(var(--slate-50));
  --card: hsl(222 47% 11%);
  --card-foreground: hsl(var(--slate-50));
  --border: hsl(var(--slate-800));
  --input: hsl(var(--slate-800));
  --ring: hsl(var(--brand-400));
  --text-primary: hsl(var(--slate-200));
  --text-secondary: hsl(var(--slate-400));
  --border-color: hsl(var(--slate-700));

  /* Dark Theme Palette */
  --slate-50: hsl(220 14% 71%);
  --slate-100: hsl(220 14% 65%);
  --slate-200: hsl(220 13% 55%);
  --slate-300: hsl(220 14% 45%);
  --slate-400: hsl(220 13% 35%);
  --slate-500: hsl(220 10% 29%);
  --slate-600: hsl(225 10% 22%);
  --slate-700: hsl(225 10% 19%);
  --slate-800: hsl(225 10% 16%);
  --slate-900: hsl(225 11% 12%);
  --slate-950: hsl(224 23% 7%);

  --brand-50: hsl(225 35% 95%);
  --brand-100: hsl(224 44% 89%);
  --brand-200: hsl(224 52% 79%);
  --brand-300: hsl(223 58% 68%);
  --brand-400: hsl(222 65% 56%);
  --brand-500: hsl(221 72% 48%);
  --brand-600: hsl(221 77% 41%);
  --brand-700: hsl(222 81% 35%);
  --brand-800: hsl(222 84% 29%);
  --brand-900: hsl(223 85% 24%);
  --brand-950: hsl(224 86% 14%);

  --accent-50: hsl(30 50% 95%);
  --accent-100: hsl(31 57% 88%);
  --accent-200: hsl(32 66% 77%);
  --accent-300: hsl(34 75% 65%);
  --accent-400: hsl(36 84% 53%);
  --accent-500: hsl(38 92% 48%);
  --accent-600: hsl(41 94% 43%);
  --accent-700: hsl(43 92% 38%);
  --accent-800: hsl(45 88% 33%);
  --accent-900: hsl(46 83% 28%);
  --accent-950: hsl(48 90% 16%);
}

body {
  background-color: var(--background);
  color: var(--foreground);
  transition: background-color 0.3s, color 0.3s;
}

// comprehensive-health-questionnaire//components/SaveProgressButton.tsx

import React from 'react';
import { useFormContext } from '../contexts/FormContext';
import Button from './common/Button';

const SaveProgressButton: React.FC = () => {
  const { saveProgress, isSubmitting } = useFormContext();

  return (
    <Button onClick={saveProgress} variant="outline" size="sm" disabled={isSubmitting}>
      Simpan Progres
    </Button>
  );
};

export default SaveProgressButton;

// comprehensive-health-questionnaire//components/NavigationControls.tsx

import React from 'react';
import { useFormContext } from '../contexts/FormContext';
import Button from './common/Button';
import Spinner from './common/Spinner';
import SaveProgressButton from './SaveProgressButton';

const NavigationControls: React.FC = () => {
  const { currentSection, totalSections, prevSection, nextSection, handleSubmit, isSubmitting } = useFormContext();

  const isLastSection = currentSection === totalSections - 1;

  const handleNextOrSubmit = () => {
    if (isLastSection) {
      handleSubmit();
    } else {
      nextSection();
    }
  };

  return (
    <div className="flex justify-between items-center mt-8 p-4 bg-surface/80 backdrop-blur-md rounded-app shadow-app">
      <Button 
        onClick={prevSection} 
        disabled={currentSection === 0 || isSubmitting}
        variant="secondary"
      >
        Sebelumnya
      </Button>
      <SaveProgressButton />
      <Button 
        onClick={handleNextOrSubmit} 
        disabled={isSubmitting}
        variant="primary"
      >
        {isSubmitting ? (
          <div className="flex items-center justify-center">
            <Spinner size="sm" /> <span className="ml-2">Mengirim...</span>
          </div>
        ) : (
          isLastSection ? 'Kirim Formulir' : 'Berikutnya'
        )}
      </Button>
    </div>
  );
};

export default NavigationControls;

// comprehensive-health-questionnaire//components/common/InputField.tsx

import React, { useState } from 'react';
import { EmptyReason } from '../../types';
import EmptyFieldOptions from './EmptyFieldOptions';

interface InputFieldProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label: string;
  name: string;
  description?: string;
  showEmptyOptions?: boolean; // If field is not required, show privacy/unknown options
  onEmptyReasonSelect?: (name: string, reason: EmptyReason) => void;
  icon?: React.ReactNode;
}

const InputField: React.FC<InputFieldProps> = ({ 
  label, 
  name, 
  type = "text", 
  required, 
  description,
  showEmptyOptions = false,
  onEmptyReasonSelect,
  value,
  onChange,
  onBlur,
  icon,
  ...props 
}) => {
  const [isFocused, setIsFocused] = useState(false);
  const [showOptionsPopup, setShowOptionsPopup] = useState(false);

  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {
    setIsFocused(false);
    // Delay showing options to allow click on potential clear button or other elements
    setTimeout(() => {
        if (showEmptyOptions && !e.target.value && !required && !isFocused) { // Check isFocused again in timeout
            setShowOptionsPopup(true);
        }
    }, 100);
    if (onBlur) onBlur(e);
  };

  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {
    setIsFocused(true);
    setShowOptionsPopup(false); // Hide options when focusing again
    if (props.onFocus) props.onFocus(e);
  };

  const handleEmptyReasonSelected = (reason: EmptyReason) => {
    if (onEmptyReasonSelect) {
      onEmptyReasonSelect(name, reason);
    }
    setShowOptionsPopup(false);
  };

  return (
    <div className="mb-5 form-group relative">
      <label htmlFor={name} className="block text-sm font-medium text-text-primary mb-1">
        {label}
        {required && <span className="text-danger ml-1">*</span>}
      </label>
      <div className="relative">
        {icon && <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">{icon}</div>}
        <input
          id={name}
          name={name}
          type={type}
          required={required}
          value={value}
          onChange={onChange}
          onFocus={handleFocus}
          onBlur={handleBlur}
          className={`form-input block w-full px-3 py-2 border border-border-color rounded-md shadow-sm focus:ring-1 focus:ring-primary focus:border-primary sm:text-sm ${icon ? 'pl-10' : ''} ${props.disabled ? 'bg-gray-100 cursor-not-allowed' : ''}`}
          {...props}
        />
      </div>
      {description && <p className="mt-1 text-xs text-text-secondary">{description}</p>}
      {showOptionsPopup && (
        <div className="mt-2 animate-fadeIn absolute z-10 w-full">
          <EmptyFieldOptions onSelect={handleEmptyReasonSelected} />
        </div>
      )}
    </div>
  );
};

export default InputField;

// comprehensive-health-questionnaire//components/common/ProgressBar.tsx
import React from 'react';

interface ProgressBarProps {
  currentStep: number;
  totalSteps: number;
}

const ProgressBar: React.FC<ProgressBarProps> = ({ currentStep, totalSteps }) => {
  const percentage = totalSteps > 0 ? (currentStep / totalSteps) * 100 : 0;

  return (
    <div className="w-full bg-gray-200 rounded-full h-3 my-4 overflow-hidden shadow-inner">
      <div
        className="h-3 rounded-full transition-all duration-500 ease-out animate-shimmer bg-gradient-to-r from-primary via-primary-light to-primary"
        style={{ 
          width: `${percentage}%`,
          // backgroundSize: '1000px 100%' // This was part of the original inline style for shimmer.
                                          // Achieving custom background-size for animations with CDN Tailwind is hard.
                                          // The shimmer effect relies on this and keyframes for backgroundPosition.
                                          // The keyframes are defined in index.html's tailwind.config.
                                          // Without backgroundSize, the visual shimmer effect might be limited or not work as intended.
        }}
        role="progressbar"
        aria-valuenow={percentage}
        aria-valuemin={0}
        aria-valuemax={100}
      ></div>
    </div>
  );
};

export default ProgressBar;

// comprehensive-health-questionnaire//components/common/RadioCard.tsx

import React, { ReactNode } from 'react';

interface RadioCardProps {
  id: string;
  name: string;
  value: string;
  checkedValue: string | undefined;
  onChange: (value: string) => void;
  labelText?: string;
  children?: ReactNode;
  icon?: ReactNode; 
  required?: boolean;
  disabled?: boolean;
}

const RadioCard: React.FC<RadioCardProps> = ({
  id,
  name,
  value,
  checkedValue,
  onChange,
  labelText,
  children,
  icon,
  required,
  disabled = false,
}) => {
  const isChecked = checkedValue === value;

  const handleClick = () => {
    if (!disabled) {
      onChange(value);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {
    if (!disabled && (e.key === 'Enter' || e.key === ' ')) {
      e.preventDefault(); // Prevent scrolling on spacebar
      onChange(value);
    }
  };

  return (
    <div
      className={`relative bg-surface border-2 rounded-lg p-4 transition-all duration-200 ease-in-out
        ${disabled ? 'opacity-60 cursor-not-allowed bg-gray-100' : 'cursor-pointer hover:border-primary hover:-translate-y-0.5 hover:shadow-app focus-within:ring-2 focus-within:ring-primary focus-within:ring-offset-2 focus-within:ring-offset-background'}
        ${isChecked ? 'border-primary ring-2 ring-primary ring-offset-2 ring-offset-background shadow-app' : 'border-border-color'}`}
      onClick={handleClick}
      onKeyDown={handleKeyDown}
      role="radio"
      aria-checked={isChecked}
      aria-disabled={disabled}
      tabIndex={disabled ? -1 : 0}
    >
      <input
        type="radio"
        id={id}
        name={name}
        value={value}
        checked={isChecked}
        onChange={() => !disabled && onChange(value)} // hidden input, interaction via div
        className="absolute opacity-0 w-0 h-0"
        required={required}
        disabled={disabled}
      />
      <div className="flex items-center gap-3">
        {icon && <span className={`text-xl ${isChecked ? 'text-primary' : 'text-text-secondary'}`}>{icon}</span>}
        <span className={`text-text-primary ${isChecked ? 'font-semibold text-primary' : ''} ${disabled ? 'text-gray-500':''}`}>
          {labelText || children}
        </span>
      </div>
      {isChecked && (
        <div className="absolute top-2 right-2 w-5 h-5 bg-secondary text-white rounded-full flex items-center justify-center text-xs font-bold">
          ✓
        </div>
      )}
    </div>
  );
};

export default RadioCard;

// comprehensive-health-questionnaire//components/common/SectionHeader.tsx

import React, { ReactNode } from 'react';

interface SectionHeaderProps {
  title: string;
  subtitle?: string;
  icon?: ReactNode;
  patientFirstName?: string;
}

const SectionHeader: React.FC<SectionHeaderProps> = ({ title, subtitle, icon, patientFirstName }) => {
  return (
    <div id="section-header" className="mb-6 pb-3 border-b border-border-color/70">
      {patientFirstName && (
        <p className="text-md text-text-secondary mb-2 animate-fadeIn">
          Baik, {patientFirstName}. Mari lanjutkan ke bagian berikutnya.
        </p>
      )}
      <div className="flex items-center">
        {icon && <span className="mr-3 text-3xl text-primary flex-shrink-0">{icon}</span>}
        <h2 className="text-xl md:text-2xl font-semibold text-text-primary">{title}</h2>
      </div>
      {subtitle && <p className="text-sm text-text-secondary mt-1 ml-10">{subtitle}</p>}
    </div>
  );
};

export default SectionHeader;

// comprehensive-health-questionnaire//components/common/EmptyFieldOptions.tsx

import React from 'react';
import { EmptyReason } from '../../types';
import Button from './Button';

interface EmptyFieldOptionsProps {
  onSelect: (reason: EmptyReason) => void;
}

const EmptyFieldOptions: React.FC<EmptyFieldOptionsProps> = ({ onSelect }) => {
  return (
    <div className="p-3 bg-gray-50 border border-gray-200 rounded-md shadow-sm">
      <p className="text-xs text-text-secondary mb-2">Anda dapat melewati pertanyaan ini. Jika ya, mengapa?</p>
      <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
        <Button 
          size="sm" 
          variant="outline" 
          onClick={() => onSelect(EmptyReason.Privacy)}
          className="flex-1 w-full"
        >
          Privasi
        </Button>
        <Button 
          size="sm" 
          variant="outline" 
          onClick={() => onSelect(EmptyReason.Unknown)}
          className="flex-1 w-full"
        >
          Tidak Tahu
        </Button>
      </div>
    </div>
  );
};

export default EmptyFieldOptions;

// comprehensive-health-questionnaire//components/common/ThemeToggle.tsx
import React from 'react';
import { useUIContext } from '../../contexts/UIContext';

const ThemeToggle: React.FC = () => {
  const { theme, toggleTheme } = useUIContext();

  return (
    <button
      onClick={toggleTheme}
      className="p-2 rounded-full bg-secondary text-secondary-foreground hover:bg-slate-300 dark:bg-slate-700 dark:hover:bg-slate-600 transition-colors"
      aria-label={`Switch to ${theme === 'light' ? 'dark' : 'light'} mode`}
    >
      {theme === 'light' ? (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
        </svg>
      ) : (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 14.464A1 1 0 106.465 13.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm-1.414-2.12a1 1 0 011.414 0l.707.707a1 1 0 11-1.414 1.414l-.707-.707a1 1 0 010-1.414zM4 11a1 1 0 100-2H3a1 1 0 100 2h1z" clipRule="evenodd" />
        </svg>
      )}
    </button>
  );
};

export default ThemeToggle;

// comprehensive-health-questionnaire//components/common/SelectField.tsx

import React from 'react';

interface SelectOption {
  value: string;
  label: string;
  disabled?: boolean;
}

interface SelectFieldProps extends React.SelectHTMLAttributes<HTMLSelectElement> {
  label: string;
  name: string;
  options: SelectOption[];
  description?: string;
}

const SelectField: React.FC<SelectFieldProps> = ({ 
  label, 
  name, 
  options, 
  required, 
  description, 
  value,
  onChange,
  ...props 
}) => {
  return (
    <div className="mb-5 form-group">
      <label htmlFor={name} className="block text-sm font-medium text-text-primary mb-1">
        {label}
        {required && <span className="text-danger ml-1">*</span>}
      </label>
      <select
        id={name}
        name={name}
        required={required}
        value={value === undefined || value === null ? "" : value} // Ensure value is controlled correctly for default empty option
        onChange={onChange}
        className={`form-select block w-full px-3 py-2 border border-border-color rounded-md shadow-sm focus:ring-1 focus:ring-primary focus:border-primary sm:text-sm ${props.disabled ? 'bg-gray-100 cursor-not-allowed' : ''}`}
        {...props}
      >
        <option value="" disabled={required || options.some(opt => opt.value === "")}>Pilih salah satu...</option>
        {options.map(option => (
          <option key={option.value} value={option.value} disabled={option.disabled}>
            {option.label}
          </option>
        ))}
      </select>
      {description && <p className="mt-1 text-xs text-text-secondary">{description}</p>}
    </div>
  );
};

export default SelectField;

// comprehensive-health-questionnaire//components/common/TextareaField.tsx

import React, { useState } from 'react';
import { EmptyReason } from '../../types';
import EmptyFieldOptions from './EmptyFieldOptions';

interface TextareaFieldProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
  label: string;
  name: string;
  description?: string;
  showEmptyOptions?: boolean;
  onEmptyReasonSelect?: (name: string, reason: EmptyReason) => void;
}

const TextareaField: React.FC<TextareaFieldProps> = ({ 
  label, 
  name, 
  required, 
  description,
  showEmptyOptions = false,
  onEmptyReasonSelect,
  value,
  onChange,
  onBlur,
  ...props 
}) => {
  const [isFocused, setIsFocused] = useState(false);
  const [showOptionsPopup, setShowOptionsPopup] = useState(false);

  const handleBlur = (e: React.FocusEvent<HTMLTextAreaElement>) => {
    setIsFocused(false);
     setTimeout(() => {
        if (showEmptyOptions && !e.target.value && !required && !isFocused) {
            setShowOptionsPopup(true);
        }
    }, 100);
    if (onBlur) onBlur(e);
  };

  const handleFocus = (e: React.FocusEvent<HTMLTextAreaElement>) => {
    setIsFocused(true);
    setShowOptionsPopup(false);
    if (props.onFocus) props.onFocus(e);
  };

  const handleEmptyReasonSelected = (reason: EmptyReason) => {
    if (onEmptyReasonSelect) {
      onEmptyReasonSelect(name, reason);
    }
    setShowOptionsPopup(false);
  };
  
  return (
    <div className="mb-5 form-group relative">
      <label htmlFor={name} className="block text-sm font-medium text-text-primary mb-1">
        {label}
        {required && <span className="text-danger ml-1">*</span>}
      </label>
      <textarea
        id={name}
        name={name}
        required={required}
        value={value}
        onChange={onChange}
        onFocus={handleFocus}
        onBlur={handleBlur}
        rows={4}
        className={`form-textarea block w-full px-3 py-2 border border-border-color rounded-md shadow-sm focus:ring-1 focus:ring-primary focus:border-primary sm:text-sm ${props.disabled ? 'bg-gray-100 cursor-not-allowed' : ''}`}
        {...props}
      />
      {description && <p className="mt-1 text-xs text-text-secondary">{description}</p>}
      {showOptionsPopup && (
        <div className="mt-2 animate-fadeIn absolute z-10 w-full">
          <EmptyFieldOptions onSelect={handleEmptyReasonSelected} />
        </div>
      )}
    </div>
  );
};

export default TextareaField;

// comprehensive-health-questionnaire//components/common/Button.tsx

import React, { ReactNode } from 'react';
import Spinner from './Spinner'; // Import Spinner for isLoading state

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  children: ReactNode;
  variant?: 'primary' | 'secondary' | 'danger' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  isLoading?: boolean;
  icon?: ReactNode;
}

const Button: React.FC<ButtonProps> = ({ 
  children, 
  variant = 'primary', 
  size = 'md', 
  isLoading = false, 
  className = '', 
  icon,
  ...props 
}) => {
  const baseStyles = 'font-semibold rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-background transition-all duration-150 ease-in-out flex items-center justify-center gap-2';
  
  const variantStyles = {
    primary: 'bg-primary text-white hover:bg-purple-700 focus:ring-primary',
    secondary: 'bg-secondary text-white hover:bg-green-700 focus:ring-secondary',
    danger: 'bg-danger text-white hover:bg-red-700 focus:ring-danger',
    outline: 'border border-primary text-primary hover:bg-primary hover:text-white focus:ring-primary disabled:hover:bg-transparent disabled:hover:text-primary',
    ghost: 'text-primary hover:bg-purple-100 focus:ring-primary disabled:hover:bg-transparent',
  };

  const sizeStyles = {
    sm: 'py-2 px-3 text-sm',
    md: 'py-2.5 px-5 text-base',
    lg: 'py-3 px-6 text-lg',
  };

  const disabledStyles = 'disabled:opacity-60 disabled:cursor-not-allowed';

  return (
    <button
      className={`${baseStyles} ${variantStyles[variant]} ${sizeStyles[size]} ${disabledStyles} ${className}`}
      disabled={isLoading || props.disabled}
      {...props}
    >
      {isLoading ? (
        <Spinner size="sm" color={variant === 'primary' || variant === 'secondary' || variant === 'danger' ? 'text-white' : 'text-primary'} />
      ) : (
        icon && <span className="flex-shrink-0">{icon}</span>
      )}
      {children}
    </button>
  );
};

export default Button;

// comprehensive-health-questionnaire//components/common/CheckboxCard.tsx

import React, { ReactNode } from 'react';

interface CheckboxCardProps {
  id: string;
  name: string; // Can be used for grouping if needed, but value is primary identifier
  value: string;
  checked: boolean;
  onChange: (value: string, isChecked: boolean) => void;
  labelText?: string;
  children?: ReactNode;
  icon?: ReactNode;
  disabled?: boolean;
  className?: string;
}

const CheckboxCard: React.FC<CheckboxCardProps> = ({
  id,
  name,
  value,
  checked,
  onChange,
  labelText,
  children,
  icon,
  disabled = false,
  className = '',
}) => {
  const handleClick = () => {
    if (!disabled) {
      onChange(value, !checked);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {
    if (!disabled && (e.key === 'Enter' || e.key === ' ')) {
      e.preventDefault(); // Prevent scrolling on spacebar
      onChange(value, !checked);
    }
  };

  return (
    <div
      className={`relative bg-surface border-2 rounded-lg p-4 transition-all duration-200 ease-in-out
        ${disabled ? 'opacity-60 cursor-not-allowed bg-gray-100' : 'cursor-pointer hover:border-primary hover:-translate-y-0.5 hover:shadow-app focus-within:ring-2 focus-within:ring-primary focus-within:ring-offset-2 focus-within:ring-offset-background'}
        ${checked ? 'border-primary ring-2 ring-primary ring-offset-2 ring-offset-background shadow-app' : 'border-border-color'} ${className}`}
      onClick={handleClick}
      onKeyDown={handleKeyDown}
      role="checkbox"
      aria-checked={checked}
      aria-disabled={disabled}
      tabIndex={disabled ? -1 : 0}
    >
      <input
        type="checkbox"
        id={id}
        name={name}
        value={value}
        checked={checked}
        onChange={() => !disabled && onChange(value, !checked)} // hidden input, interaction via div
        className="absolute opacity-0 w-0 h-0"
        disabled={disabled}
      />
      <div className="flex items-center gap-3">
        {icon && <span className={`text-xl ${checked ? 'text-primary' : 'text-text-secondary'}`}>{icon}</span>}
        <span className={`text-text-primary ${checked ? 'font-semibold text-primary' : ''} ${disabled ? 'text-gray-500':''}`}>
          {labelText || children}
        </span>
      </div>
      {checked && (
        <div className="absolute top-2 right-2 w-5 h-5 bg-secondary text-white rounded-full flex items-center justify-center text-xs font-bold">
          ✓
        </div>
      )}
    </div>
  );
};

export default CheckboxCard;

// comprehensive-health-questionnaire//components/common/Toast.tsx
import React, { useEffect, useState } from 'react';
import { useUIContext } from '../../contexts/UIContext';
import { ToastType } from '../../types';

interface ToastProps {
  message: string;
  type: ToastType;
}

const Toast: React.FC<ToastProps> = ({ message, type }) => {
  const { hideToast } = useUIContext();
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    if (message) {
      setIsVisible(true);
      // Auto hide is handled by UIContext, this just ensures visibility on message change
    } else {
      // Delay hiding slightly for fade-out animations if added later
      // For now, direct hide:
      setIsVisible(false);
    }
  }, [message]);

  if (!isVisible || !message) return null;

  const bgColorStyles = { // Renamed from constbgColor and corrected name
    success: 'bg-secondary',
    error: 'bg-danger',
    info: 'bg-blue-500', // Standard blue for info
  };

  const iconContent = {
    success: '✓',
    error: '✕',
    info: 'ℹ',
  }

  return (
    <div 
      className={`fixed bottom-5 right-5 ${bgColorStyles[type]} text-white py-3 px-5 rounded-lg shadow-app-lg flex items-center animate-fadeIn z-50 max-w-md`}
      role="alert"
    >
      <span className="font-bold text-xl mr-3">{iconContent[type]}</span>
      <span className="flex-grow">{message}</span>
      <button 
        onClick={hideToast} 
        className="ml-4 p-1 rounded-full hover:bg-black/20 transition-colors"
        aria-label="Close toast"
      >
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
          <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
  );
};

export default Toast;

// comprehensive-health-questionnaire//components/common/Spinner.tsx

import React from 'react';

interface SpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  color?: string; // Tailwind color class e.g. 'text-primary'
  className?: string;
}

const Spinner: React.FC<SpinnerProps> = ({ size = 'md', color = 'text-primary', className = '' }) => {
  const sizeClasses = {
    sm: 'w-4 h-4 border-2',
    md: 'w-6 h-6 border-[3px]', // Slightly adjusted for better proportion
    lg: 'w-10 h-10 border-4',  // Slightly adjusted
  };

  return (
    <div 
      className={`animate-spin rounded-full ${sizeClasses[size]} ${color} border-t-transparent border-solid ${className}`}
      role="status"
    >
      <span className="sr-only">Loading...</span> {/* Added for accessibility */}
    </div>
  );
};

export default Spinner;

// comprehensive-health-questionnaire//components/AppHeader.tsx

import React from 'react';
import ThemeToggle from './common/ThemeToggle';

interface AppHeaderProps {
  title: string;
  subtitle?: string;
}

const AppHeader: React.FC<AppHeaderProps> = ({ title, subtitle }) => {
  return (
    <header className="relative text-center py-6 mb-4 animate-fadeInDown">
      <div className="absolute top-4 right-4">
        <ThemeToggle />
      </div>
      <h1 className="text-3xl md:text-4xl font-bold text-primary">{title}</h1>
      {subtitle && <p className="text-md md:text-lg text-text-secondary mt-2">{subtitle}</p>}
    </header>
  );
};

export default AppHeader;

// comprehensive-health-questionnaire//components/formSections/Section6_ChildhoodHistory.tsx

import React, { useMemo } from 'react';
import { useFormContext } from '../../contexts/FormContext';
import { FormData, EmptyReason } from '../../types';
import { 
  BIRTH_STATUS_OPTIONS, 
  DELIVERY_METHOD_OPTIONS, 
  BREASTFEEDING_OPTIONS,
  CHILDHOOD_ANTIBIOTICS_OPTIONS,
  RECURRENT_CHILDHOOD_INFECTIONS_OPTIONS,
  DEVELOPMENTAL_HISTORY_OPTIONS,
  ADVERSE_CHILDHOOD_EXPERIENCES_OPTIONS
} from '../../constants';
import InputField from '../common/InputField';
import RadioCard from '../common/RadioCard';
import SelectField from '../common/SelectField';
import CheckboxCard from '../common/CheckboxCard';
import TextareaField from '../common/TextareaField';

const Section6ChildhoodHistory: React.FC = () => {
  const { formData, updateFormData } = useFormContext();

  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    updateFormData(e.target.name as keyof FormData, e.target.value);
  };

  const handleRadioChange = (name: keyof FormData | string, value: string) => {
    updateFormData(name, value);
    // Clear conditional fields if main selection changes
    if (name === 'birthStatus' && value !== 'premature') {
      updateFormData('prematureWeeks', '');
    }
    if (name === 'deliveryMethod' && value !== 'planned_csection') {
      updateFormData('deliveryMethodReason', '');
    }
    if (name === 'breastfeeding' && value !== 'exclusive') {
      updateFormData('breastfeedingDuration', '');
    }
  };

  const handleCheckboxChange = (groupName: keyof FormData, value: string, isChecked: boolean) => {
    const currentValues = (formData[groupName] as string[] || []);
    let updatedValues: string[];

    if (isChecked) {
      updatedValues = [...currentValues, value];
    } else {
      updatedValues = currentValues.filter(item => item !== value);
    }
    updateFormData(groupName, updatedValues);

    // Clear "other" text field if "other" checkbox is unchecked
    if (groupName === 'recurrentChildhoodInfections' && value === 'other' && !isChecked) {
        updateFormData('recurrentChildhoodInfectionsOther', '');
    }
  };
  
  const handleEmptyReasonSelect = (fieldName: string, reason: EmptyReason) => {
    updateFormData(`${fieldName}_empty_reason`, reason);
    updateFormData(fieldName as keyof FormData, ''); 
  };

  const acesCount = useMemo(() => {
    return (formData.adverseChildhoodExperiences || []).length;
  }, [formData.adverseChildhoodExperiences]);

  return (
    <div>

      {/* Kelahiran */}
      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Kelahiran</legend>
        
        <p className="block text-sm font-medium text-text-primary mb-2">Status Kelahiran: <span className="text-danger ml-1">*</span></p>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          {BIRTH_STATUS_OPTIONS.map(opt => (
            <RadioCard
              key={opt.value}
              id={`birthStatus-${opt.value}`}
              name="birthStatus"
              value={opt.value}
              checkedValue={formData.birthStatus}
              onChange={(val) => handleRadioChange('birthStatus', val)}
              labelText={opt.label}
              required
            />
          ))}
        </div>
        {formData.birthStatus === 'premature' && (
          <InputField
            label="Minggu Kehamilan Saat Lahir (jika prematur):"
            name="prematureWeeks"
            type="number"
            value={formData.prematureWeeks || ''}
            onChange={handleFieldChange}
            placeholder="Contoh: 32"
            showEmptyOptions
            onEmptyReasonSelect={handleEmptyReasonSelect}
            className="mb-4 animate-fadeIn"
          />
        )}

        <SelectField
          label="Metode Persalinan:"
          name="deliveryMethod"
          options={DELIVERY_METHOD_OPTIONS}
          value={formData.deliveryMethod || ''}
          onChange={(e) => handleRadioChange('deliveryMethod', e.target.value)}
          required
          className="mb-4"
        />
        {formData.deliveryMethod === 'planned_csection' && (
          <InputField
            label="Alasan Caesar Terencana (jika ada):"
            name="deliveryMethodReason"
            value={formData.deliveryMethodReason || ''}
            onChange={handleFieldChange}
            placeholder="Contoh: Sungsang"
            showEmptyOptions
            onEmptyReasonSelect={handleEmptyReasonSelect}
            className="mb-4 animate-fadeIn"
          />
        )}
        <InputField
          label="Berat Lahir:"
          name="birthWeight"
          value={formData.birthWeight || ''}
          onChange={handleFieldChange}
          placeholder="Contoh: 3.2 kg atau 3200 gram"
          showEmptyOptions
          onEmptyReasonSelect={handleEmptyReasonSelect}
        />
      </fieldset>

      {/* Pemberian ASI */}
      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Pemberian ASI</legend>
        <SelectField
          label="Pemberian ASI:"
          name="breastfeeding"
          options={BREASTFEEDING_OPTIONS}
          value={formData.breastfeeding || ''}
          onChange={(e) => handleRadioChange('breastfeeding', e.target.value)}
          required
          className="mb-4"
        />
        {formData.breastfeeding === 'exclusive' && (
          <InputField
            label="Durasi ASI Eksklusif:"
            name="breastfeedingDuration"
            value={formData.breastfeedingDuration || ''}
            onChange={handleFieldChange}
            placeholder="Contoh: 6 bulan"
            showEmptyOptions
            onEmptyReasonSelect={handleEmptyReasonSelect}
            className="animate-fadeIn"
          />
        )}
      </fieldset>
      
      {/* Antibiotik & Infeksi */}
      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Antibiotik & Infeksi Masa Kanak-Kanak</legend>
        <SelectField
          label="Penggunaan Antibiotik Saat Bayi/Anak (<5 tahun):"
          name="antibioticsAsChild"
          options={CHILDHOOD_ANTIBIOTICS_OPTIONS}
          value={formData.antibioticsAsChild || ''}
          onChange={handleFieldChange}
          required
          className="mb-4"
        />

        <p className="block text-sm font-medium text-text-primary mb-2">Penyakit Infeksi Berulang Saat Anak-anak:</p>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 mb-2">
          {RECURRENT_CHILDHOOD_INFECTIONS_OPTIONS.map(opt => (
            <CheckboxCard
              key={opt.value}
              id={`infection-${opt.value}`}
              name="recurrentChildhoodInfections"
              value={opt.value}
              checked={(formData.recurrentChildhoodInfections || []).includes(opt.value)}
              onChange={(val, ischk) => handleCheckboxChange('recurrentChildhoodInfections', val, ischk)}
              labelText={opt.label}
            />
          ))}
        </div>
        {(formData.recurrentChildhoodInfections || []).includes('other') && (
            <InputField
                label="Jelaskan infeksi berulang lainnya:"
                name="recurrentChildhoodInfectionsOther"
                value={formData.recurrentChildhoodInfectionsOther || ''}
                onChange={handleFieldChange}
                placeholder="Sebutkan infeksi lainnya"
                showEmptyOptions
                onEmptyReasonSelect={handleEmptyReasonSelect}
                className="mt-2 animate-fadeIn"
            />
        )}
      </fieldset>

      {/* Riwayat Perkembangan */}
      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Riwayat Perkembangan</legend>
        <p className="block text-sm font-medium text-text-primary mb-2">Pilih jika ada riwayat:</p>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
          {DEVELOPMENTAL_HISTORY_OPTIONS.map(opt => (
            <CheckboxCard
              key={opt.value}
              id={`dev-${opt.value}`}
              name="developmentalHistory"
              value={opt.value}
              checked={(formData.developmentalHistory || []).includes(opt.value)}
              onChange={(val, ischk) => handleCheckboxChange('developmentalHistory', val, ischk)}
              labelText={opt.label}
            />
          ))}
        </div>
      </fieldset>

      {/* ACEs */}
      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Pengalaman Tidak Menyenangkan di Masa Kanak-Kanak (ACEs)</legend>
        <p className="text-sm text-text-secondary mb-2">Centang semua yang pernah dialami sebelum usia 18 tahun.</p>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
          {ADVERSE_CHILDHOOD_EXPERIENCES_OPTIONS.map(opt => (
            <CheckboxCard
              key={opt.value}
              id={`ace-${opt.value}`}
              name="adverseChildhoodExperiences"
              value={opt.value}
              checked={(formData.adverseChildhoodExperiences || []).includes(opt.value)}
              onChange={(val, ischk) => handleCheckboxChange('adverseChildhoodExperiences', val, ischk)}
              labelText={opt.label}
              className="text-sm" // Smaller text for these detailed options
            />
          ))}
        </div>
        <p className="mt-3 text-sm font-medium text-text-primary">Jumlah ACEs yang dicentang: <span className="font-bold text-primary">{acesCount}</span></p>
      </fieldset>

      <TextareaField
        label="Apakah ada trauma masa kanak-kanak lain yang signifikan?"
        name="otherChildhoodTrauma"
        value={formData.otherChildhoodTrauma || ''}
        onChange={handleFieldChange}
        placeholder="Jelaskan singkat jika ada..."
        rows={3}
        showEmptyOptions
        onEmptyReasonSelect={handleEmptyReasonSelect}
      />
    </div>
  );
};

export default Section6ChildhoodHistory;
// comprehensive-health-questionnaire//components/formSections/FamilyHistoryEntryRow.tsx

import React from 'react';
import { FamilyHistoryEntry } from '../../types';
import { FAMILY_HISTORY_CONDITION_CATEGORIES, FAMILY_MEMBER_RELATIONSHIP_OPTIONS, CATEGORIES_REQUIRING_DETAILS } from '../../constants';
import SelectField from '../common/SelectField';
import InputField from '../common/InputField';
import Button from '../common/Button';

interface FamilyHistoryEntryRowProps {
  entry: FamilyHistoryEntry;
  index: number;
  onChange: (id: string, field: keyof Omit<FamilyHistoryEntry, 'id'>, value: string) => void;
  onRemove: (id: string) => void;
}

const FamilyHistoryEntryRow: React.FC<FamilyHistoryEntryRowProps> = ({ entry, index, onChange, onRemove }) => {
  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    onChange(entry.id, name as keyof Omit<FamilyHistoryEntry, 'id'>, value);
  };
  
  const showDetailsInput = CATEGORIES_REQUIRING_DETAILS.includes(entry.conditionCategory);

  return (
    <div className="p-4 border border-border-color rounded-lg mb-4 bg-gray-50 shadow-sm relative animate-fadeIn">
      <div className="flex justify-between items-start mb-3">
        <h4 className="font-semibold text-text-secondary pt-2">Riwayat Keluarga #{index + 1}</h4>
        <Button 
          onClick={() => onRemove(entry.id)} 
          variant="danger" 
          size="sm"
          title={`Hapus riwayat #${index + 1}`}
          className="absolute top-3 right-3"
        >
          Hapus
        </Button>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 items-end">
        <SelectField
          label="Kategori Kondisi"
          name="conditionCategory"
          value={entry.conditionCategory}
          onChange={handleFieldChange}
          options={FAMILY_HISTORY_CONDITION_CATEGORIES}
          required
        />
        {showDetailsInput && (
           <InputField
            label="Detail/Jenis Kondisi"
            name="conditionDetails"
            value={entry.conditionDetails || ''}
            onChange={handleFieldChange}
            placeholder="Sebutkan jenis/detailnya"
            required={showDetailsInput}
            className="animate-slideInRight"
          />
        )}
        <SelectField
          label="Hubungan Keluarga"
          name="relationship"
          value={entry.relationship}
          onChange={handleFieldChange}
          options={FAMILY_MEMBER_RELATIONSHIP_OPTIONS}
          required
        />
        <InputField
          label="Usia Saat Diagnosis (Perkiraan)"
          name="ageOfDiagnosis"
          type="text" // Can be number, but text allows for "Tidak Tahu" or ranges
          value={entry.ageOfDiagnosis || ''}
          onChange={handleFieldChange}
          placeholder="Contoh: 45 / Tidak Tahu"
        />
      </div>
    </div>
  );
};

export default FamilyHistoryEntryRow;

// comprehensive-health-questionnaire//components/formSections/Section12_System_Review.tsx

import React from 'react';
import { useFormContext } from '../../contexts/FormContext';
import { SystemReviewData, FormData } from '../../types';
import { SYMPTOM_REVIEW_CATEGORIES_AND_SYMPTOMS, SYMPTOM_FREQUENCY_OPTIONS, SYMPTOM_SEVERITY_OPTIONS } from '../../constants';
import SymptomCategoryBlock from './symptomReview/SymptomCategoryBlock';
import TextareaField from '../common/TextareaField'; // Added missing import

const Section12SystemReview: React.FC = () => {
  const { formData, updateFormData } = useFormContext();
  const systemReviewData = formData.systemReview || {};

  const handleSymptomRatingChange = (symptomId: string, scaleType: 'frequency' | 'severity', value: number) => {
    const currentSymptomRatings = systemReviewData[symptomId] || { frequency: 0, severity: 0 };
    const updatedSymptomRatings = { ...currentSymptomRatings, [scaleType]: value };
    
    updateFormData('systemReview', {
      ...systemReviewData,
      [symptomId]: updatedSymptomRatings,
    });
  };

  return (
    <div>

      <div className="mb-4 p-3 bg-primary/10 border border-primary/20 rounded-md text-sm text-primary">
        <p><strong>Skala Frekuensi:</strong></p>
        <ul className="list-disc list-inside ml-4">
          {SYMPTOM_FREQUENCY_OPTIONS.map(opt => <li key={`freq-desc-${opt.value}`}>{opt.label}</li>)}
        </ul>
        <p className="mt-2"><strong>Skala Keparahan:</strong></p>
        <ul className="list-disc list-inside ml-4">
          {SYMPTOM_SEVERITY_OPTIONS.map(opt => <li key={`sev-desc-${opt.value}`}>{opt.label}</li>)}
        </ul>
      </div>

      {SYMPTOM_REVIEW_CATEGORIES_AND_SYMPTOMS.map((category) => (
        <SymptomCategoryBlock
          key={category.categoryId}
          categoryLabel={category.categoryLabel}
          symptoms={category.symptoms}
          systemReviewData={systemReviewData}
          onSymptomRatingChange={handleSymptomRatingChange}
        />
      ))}
      
      <TextareaField
          label="Gejala Lain yang Tidak Tercantum (Sebutkan beserta frekuensi dan keparahannya jika ada):"
          name="systemReviewOtherSymptoms" // This field needs to be added to types.ts if desired
          value={formData.systemReviewOtherSymptoms || ''} // This field needs to be added to types.ts if desired
          onChange={(e) => updateFormData('systemReviewOtherSymptoms', e.target.value)}
          rows={3}
          placeholder="Contoh: Mata berkunang-kunang (Frekuensi: 2, Keparahan: 1)"
          className="mt-6"
        />
    </div>
  );
};

export default Section12SystemReview;
// comprehensive-health-questionnaire//components/formSections/Section9_Lifestyle_Sleep.tsx

import React from 'react';
import { useFormContext } from '../../contexts/FormContext';
import { FormData, SleepData, EmptyReason } from '../../types';
import {
  YES_NO_OPTIONS,
  SLEEP_PROBLEMS_OPTIONS,
  SLEEP_ENVIRONMENT_DARKNESS_OPTIONS,
  SLEEP_ENVIRONMENT_TEMPERATURE_OPTIONS,
  SLEEP_ENVIRONMENT_NOISE_OPTIONS,
  FEELING_ON_WAKING_OPTIONS
} from '../../constants';
import InputField from '../common/InputField';
import TextareaField from '../common/TextareaField';
import SelectField from '../common/SelectField';
import CheckboxCard from '../common/CheckboxCard';
import RadioCard from '../common/RadioCard';

const Section9LifestyleSleep: React.FC = () => {
  const { formData, updateFormData } = useFormContext();
  const sleepData = formData.sleep || {} as SleepData;

  const handleSleepDataChange = (field: keyof SleepData, value: any) => {
    updateFormData('sleep', { ...sleepData, [field]: value });
  };

  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    const fieldName = name as keyof SleepData;
    
    if (e.target.type === 'range' && fieldName === 'sleepQuality') {
      handleSleepDataChange(fieldName, parseInt(value, 10));
    } else {
      handleSleepDataChange(fieldName, value);
    }
  };
  
  const handleRadioOrSelectChange = (name: keyof SleepData, value: string) => {
    handleSleepDataChange(name, value);
    if (name === 'napsTaken' && value === 'no') {
      handleSleepDataChange('napDetails', '');
    }
  };

  const handleCheckboxChange = (groupName: keyof SleepData, value: string, isChecked: boolean) => {
    const currentValues = (sleepData[groupName] as string[] || []);
    let updatedValues: string[];

    if (value === 'none') {
        updatedValues = isChecked ? ['none'] : [];
        if(isChecked) { // if "none" is selected, clear conditional fields for "frequent_waking"
            handleSleepDataChange('sleepProblemsNightWakeTime', '');
            handleSleepDataChange('sleepProblemsNightWakeActivity', '');
        }
    } else {
        updatedValues = currentValues.filter(item => item !== 'none'); // Remove 'none' if other option is selected
        if (isChecked) {
            updatedValues = [...updatedValues, value];
        } else {
            updatedValues = updatedValues.filter(item => item !== value);
        }
    }
    
    handleSleepDataChange(groupName, updatedValues);

    if (groupName === 'sleepProblems' && value === 'frequent_waking' && !isChecked) {
        handleSleepDataChange('sleepProblemsNightWakeTime', '');
        handleSleepDataChange('sleepProblemsNightWakeActivity', '');
    }
  };
  
  const handleEmptyReasonSelect = (fieldName: keyof SleepData, reason: EmptyReason) => {
    handleSleepDataChange(`${fieldName}_empty_reason` as any, reason);
    handleSleepDataChange(fieldName, '');
  };
  
  const showFrequentWakingDetails = (sleepData.sleepProblems || []).includes('frequent_waking') && !(sleepData.sleepProblems || []).includes('none');
  const isNoneSleepProblemSelected = (sleepData.sleepProblems || []).includes('none');


  return (
    <div>

      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Pola Tidur Umum</legend>
        <InputField label="Jam Tidur Rata-rata per Malam (aktual tidur):" name="avgSleepDuration" value={sleepData.avgSleepDuration || ''} onChange={handleFieldChange} placeholder="Contoh: 7 jam" showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof SleepData, reason)} />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <InputField label="Jam Tidur Biasa (Masuk Kamar):" name="usualBedtime" type="time" value={sleepData.usualBedtime || ''} onChange={handleFieldChange} showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof SleepData, reason)} />
            <InputField label="Jam Bangun Biasa:" name="usualWakeTime" type="time" value={sleepData.usualWakeTime || ''} onChange={handleFieldChange} showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof SleepData, reason)} />
        </div>
        <p className="block text-sm font-medium text-text-primary mt-4 mb-2">Apakah jadwal tidur Anda konsisten (&lt;1 jam beda hari kerja &amp; akhir pekan)?</p>
        <div className="grid grid-cols-2 gap-4 mb-4">
            {YES_NO_OPTIONS.map(opt => (
                <RadioCard key={opt.value} id={`consistentSleep-${opt.value}`} name="sleepScheduleConsistent" value={opt.value} checkedValue={sleepData.sleepScheduleConsistent} onChange={(val) => handleRadioOrSelectChange('sleepScheduleConsistent', val)} labelText={opt.label} />
            ))}
        </div>
        <div>
            <label htmlFor="sleepQuality" className="block text-sm font-medium text-text-primary mb-1">Kualitas Tidur Anda Secara Umum (0: Sangat Buruk - 10: Sangat Baik)</label>
            <div className="flex items-center gap-4 mt-2">
                <input id="sleepQuality" name="sleepQuality" type="range" min="0" max="10" step="1" value={sleepData.sleepQuality === undefined ? 5 : sleepData.sleepQuality} onChange={handleFieldChange} className="range-slider w-full h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer focus:outline-none focus:ring-2 focus:ring-primary/50" />
                <span className="text-lg font-semibold text-primary w-12 text-center p-2 bg-primary/10 rounded-md">{sleepData.sleepQuality !== undefined ? sleepData.sleepQuality : 5}</span>
            </div>
        </div>
      </fieldset>

      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Masalah Tidur</legend>
        <p className="block text-sm font-medium text-text-primary mb-2">Masalah Tidur yang Sering Dialami (Centang semua yang relevan):</p>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 mb-2">
          {SLEEP_PROBLEMS_OPTIONS.map(opt => (
            <CheckboxCard
              key={opt.value}
              id={`sleepProblem-${opt.value}`}
              name="sleepProblems"
              value={opt.value}
              checked={(sleepData.sleepProblems || []).includes(opt.value)}
              onChange={(val, ischk) => handleCheckboxChange('sleepProblems', val, ischk)}
              labelText={opt.label}
              disabled={isNoneSleepProblemSelected && opt.value !== 'none'}
            />
          ))}
        </div>
        {showFrequentWakingDetails && (
          <div className="mt-3 space-y-3 animate-fadeIn">
            <InputField label="Jam Berapa Biasanya Terbangun di Malam Hari?" name="sleepProblemsNightWakeTime" value={sleepData.sleepProblemsNightWakeTime || ''} onChange={handleFieldChange} placeholder="Contoh: 02:00" showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof SleepData, reason)}/>
            <TextareaField label="Apa yang Anda Lakukan Saat Terbangun?" name="sleepProblemsNightWakeActivity" value={sleepData.sleepProblemsNightWakeActivity || ''} onChange={handleFieldChange} placeholder="Contoh: Ke toilet, Minum air, Sulit tidur lagi" rows={2} showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof SleepData, reason)}/>
          </div>
        )}
      </fieldset>
      
      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Lingkungan Tidur</legend>
        <SelectField label="Kegelapan Kamar:" name="sleepEnvironmentDarkness" options={SLEEP_ENVIRONMENT_DARKNESS_OPTIONS} value={sleepData.sleepEnvironmentDarkness || ''} onChange={(e) => handleRadioOrSelectChange('sleepEnvironmentDarkness', e.target.value)} />
        <SelectField label="Suhu Kamar:" name="sleepEnvironmentTemp" options={SLEEP_ENVIRONMENT_TEMPERATURE_OPTIONS} value={sleepData.sleepEnvironmentTemp || ''} onChange={(e) => handleRadioOrSelectChange('sleepEnvironmentTemp', e.target.value)} />
        <SelectField label="Kebisingan Kamar:" name="sleepEnvironmentNoise" options={SLEEP_ENVIRONMENT_NOISE_OPTIONS} value={sleepData.sleepEnvironmentNoise || ''} onChange={(e) => handleRadioOrSelectChange('sleepEnvironmentNoise', e.target.value)} />
        <p className="block text-sm font-medium text-text-primary mt-4 mb-2">Apakah ada hewan peliharaan tidur di ranjang yang sama?</p>
        <div className="grid grid-cols-2 gap-4">
            {YES_NO_OPTIONS.map(opt => (
                <RadioCard key={opt.value} id={`petsInBed-${opt.value}`} name="petsInBed" value={opt.value} checkedValue={sleepData.petsInBed} onChange={(val) => handleRadioOrSelectChange('petsInBed', val)} labelText={opt.label} />
            ))}
        </div>
      </fieldset>

      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Rutinitas & Bantuan Tidur</legend>
        <TextareaField label="Rutinitas Sebelum Tidur (1-2 jam sebelum tidur):" name="preSleepRoutine" value={sleepData.preSleepRoutine || ''} onChange={handleFieldChange} placeholder="Contoh: Menggunakan gadget, Membaca buku, Meditasi, Mandi air hangat" rows={3} showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof SleepData, reason)}/>
        <TextareaField label="Penggunaan Obat Tidur Resep atau Suplemen Tidur (Nama, Dosis, Frekuensi):" name="sleepAidsUsed" value={sleepData.sleepAidsUsed || ''} onChange={handleFieldChange} placeholder="Contoh: Melatonin 5mg setiap malam" rows={2} showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof SleepData, reason)}/>
      </fieldset>

      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Perasaan Saat Bangun & Tidur Siang</legend>
        <SelectField label="Bagaimana perasaan Anda saat bangun pagi (setelah tidur malam yang biasa)?" name="feelingOnWaking" options={FEELING_ON_WAKING_OPTIONS} value={sleepData.feelingOnWaking || ''} onChange={(e) => handleRadioOrSelectChange('feelingOnWaking', e.target.value)} />
        
        <p className="block text-sm font-medium text-text-primary mt-4 mb-2">Tidur Siang:</p>
        <div className="grid grid-cols-2 gap-4 mb-2">
            {YES_NO_OPTIONS.map(opt => (
                <RadioCard key={opt.value} id={`napsTaken-${opt.value}`} name="napsTaken" value={opt.value} checkedValue={sleepData.napsTaken} onChange={(val) => handleRadioOrSelectChange('napsTaken', val)} labelText={opt.label} />
            ))}
        </div>
        {sleepData.napsTaken === 'yes' && (
            <InputField label="Durasi Rata-rata & Frekuensi Tidur Siang:" name="napDetails" value={sleepData.napDetails || ''} onChange={handleFieldChange} placeholder="Contoh: 30 menit, 2x/minggu" className="animate-fadeIn" showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof SleepData, reason)}/>
        )}
      </fieldset>
    </div>
  );
};

export default Section9LifestyleSleep;

// comprehensive-health-questionnaire//components/formSections/Section7_Lifestyle_Diet.tsx

import React from 'react';
import { useFormContext } from '../../contexts/FormContext';
import { FormData, DietNutritionData, SpecialDietEntry, SupplementEntry, EmptyReason } from '../../types';
import {
  DIET_PATTERN_OPTIONS,
  CONSUMPTION_FREQUENCY_OPTIONS,
  ALCOHOL_CONSUMPTION_OPTIONS,
  WATER_TYPE_OPTIONS,
  EATING_HABITS_OPTIONS,
  FOOD_CRAVINGS_OPTIONS,
  COOKING_FREQUENCY_OPTIONS,
  FOOD_LABEL_READING_OPTIONS,
  GROCERY_SOURCE_OPTIONS
} from '../../constants';
import RadioCard from '../common/RadioCard';
import SelectField from '../common/SelectField';
import InputField from '../common/InputField';
import TextareaField from '../common/TextareaField';
import CheckboxCard from '../common/CheckboxCard';
import Button from '../common/Button';
import SpecialDietEntryRow from './SpecialDietEntryRow';
import SupplementEntryRow from './SupplementEntryRow';

const Section7LifestyleDiet: React.FC = () => {
  const { formData, updateFormData } = useFormContext();
  const dietData = formData.dietNutrition || {} as DietNutritionData;

  const updateDietData = (changes: Partial<DietNutritionData>) => {
    updateFormData('dietNutrition', { ...dietData, ...changes });
  };

  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    updateDietData({ [name]: value });
  };
  
  const handleRadioOrSelectChange = (name: keyof DietNutritionData, value: string) => {
    const changes: Partial<DietNutritionData> = { [name]: value };

    if (name === 'generalDietPattern' && value !== 'other') {
      changes.generalDietPatternOther = '';
    }
    if (name === 'dailyWaterIntakeType') {
      if (value !== 'other' && value !== 'home_filter') {
        changes.dailyWaterIntakeTypeOther = '';
        changes.dailyWaterIntakeTypeFilter = '';
      } else if (value === 'home_filter') {
        changes.dailyWaterIntakeTypeOther = '';
      }
    }
    if (name === 'groceryShoppingSource' && value !== 'other') {
      changes.groceryShoppingSourceOther = '';
    }
    
    updateDietData(changes);
  };

  const handleCheckboxChange = (groupName: keyof DietNutritionData, value: string, isChecked: boolean) => {
    const currentValues = (dietData[groupName] as string[] || []);
    const updatedValues = isChecked
      ? [...currentValues, value]
      : currentValues.filter(item => item !== value);
    
    const changes: Partial<DietNutritionData> = { [groupName]: updatedValues };

    if (groupName === 'foodCravings' && value === 'other' && !isChecked) {
      changes.foodCravingsOther = '';
    }
    
    updateDietData(changes);
  };

  const handleEmptyReasonSelect = (fieldName: keyof DietNutritionData, reason: EmptyReason) => {
    updateDietData({
      [`${fieldName}_empty_reason`]: reason,
      [fieldName]: ''
    });
  };

  // Special Diets Management
  const addSpecialDiet = () => {
    const newDiet: SpecialDietEntry = { id: crypto.randomUUID(), dietName: '', duration: '', eliminatedFoods: '', dietNameOther: '' };
    updateDietData({ specialDiets: [...(dietData.specialDiets || []), newDiet] });
  };
  const removeSpecialDiet = (id: string) => {
    updateDietData({ specialDiets: (dietData.specialDiets || []).filter(d => d.id !== id) });
  };
  const handleSpecialDietChange = (id: string, changes: Partial<Omit<SpecialDietEntry, 'id'>>) => {
    const updatedDiets = (dietData.specialDiets || []).map(d => d.id === id ? { ...d, ...changes } : d);
    updateDietData({ specialDiets: updatedDiets });
  };

  // Supplements Management
  const addSupplement = () => {
    const newSupplement: SupplementEntry = { id: crypto.randomUUID(), nameBrand: '', dosage: '', frequency: '', reason: '', prescriber: '' };
    updateDietData({ currentSupplements: [...(dietData.currentSupplements || []), newSupplement] });
  };
  const removeSupplement = (id: string) => {
    updateDietData({ currentSupplements: (dietData.currentSupplements || []).filter(s => s.id !== id) });
  };
  const handleSupplementChange = (id: string, field: keyof Omit<SupplementEntry, 'id'>, value: string) => {
    const updatedSupplements = (dietData.currentSupplements || []).map(s => s.id === id ? { ...s, [field]: value } : s);
    updateDietData({ currentSupplements: updatedSupplements });
  };


  return (
    <div>

      {/* Pola Makan Umum */}
      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Pola Makan Umum</legend>
        <p className="block text-sm font-medium text-text-primary mb-2">Pola Makan Umum Saat Ini: <span className="text-danger ml-1">*</span></p>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-2">
          {DIET_PATTERN_OPTIONS.map(opt => (
            <RadioCard
              key={opt.value}
              id={`dietPattern-${opt.value}`}
              name="generalDietPattern" // This name is for grouping radio buttons visually, actual data path is dietNutrition.generalDietPattern
              value={opt.value}
              checkedValue={dietData.generalDietPattern}
              onChange={(val) => handleRadioOrSelectChange('generalDietPattern', val)}
              labelText={opt.label}
              required
            />
          ))}
        </div>
        {dietData.generalDietPattern === 'other' && (
          <InputField
            label="Jelaskan Pola Makan Lainnya:"
            name="generalDietPatternOther"
            value={dietData.generalDietPatternOther || ''}
            onChange={handleFieldChange}
            required={dietData.generalDietPattern === 'other'}
            className="animate-fadeIn"
          />
        )}
      </fieldset>
      
      {/* Diet Khusus */}
      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Diet Khusus yang Pernah/Sedang Dijalani</legend>
        {(dietData.specialDiets || []).map((diet, index) => (
          <SpecialDietEntryRow key={diet.id} entry={diet} index={index} onChange={handleSpecialDietChange} onRemove={removeSpecialDiet} />
        ))}
        <Button onClick={addSpecialDiet} variant="outline" size="sm">Tambah Diet Khusus</Button>
      </fieldset>

      {/* Frekuensi Makan */}
      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Frekuensi Makan</legend>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <InputField label="Frekuensi Makan Utama Per Hari:" name="mealsPerDay" value={dietData.mealsPerDay || ''} onChange={handleFieldChange} type="number" placeholder="Contoh: 3" />
            <InputField label="Frekuensi Camilan/Snack Per Hari:" name="snacksPerDay" value={dietData.snacksPerDay || ''} onChange={handleFieldChange} type="number" placeholder="Contoh: 2" />
        </div>
      </fieldset>

      {/* Konsumsi Harian Rata-rata */}
      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Konsumsi Harian Rata-rata (Perkiraan Porsi/Jumlah)</legend>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2">
            <InputField label="Sayuran Hijau Daun (bayam, kangkung):" name="avgDailyLeafyGreens" value={dietData.avgDailyLeafyGreens || ''} onChange={handleFieldChange} placeholder="... porsi" description="1 porsi ≈ 1 mangkuk kecil mentah / ½ mangkuk matang"/>
            <InputField label="Sayuran Lainnya (wortel, brokoli, tomat):" name="avgDailyOtherVegetables" value={dietData.avgDailyOtherVegetables || ''} onChange={handleFieldChange} placeholder="... porsi"/>
            <InputField label="Buah-buahan:" name="avgDailyFruits" value={dietData.avgDailyFruits || ''} onChange={handleFieldChange} placeholder="... porsi" description="1 porsi ≈ 1 buah apel/pisang sedang"/>
            <InputField label="Biji-bijian Utuh (nasi merah, quinoa, oats):" name="avgDailyWholeGrains" value={dietData.avgDailyWholeGrains || ''} onChange={handleFieldChange} placeholder="... porsi" description="1 porsi ≈ ½ - 1 mangkuk matang"/>
            <InputField label="Kacang-kacangan/Biji-bijian (almond, chia):" name="avgDailyNutsSeeds" value={dietData.avgDailyNutsSeeds || ''} onChange={handleFieldChange} placeholder="... sdk makan/genggam"/>
            <InputField label="Protein Hewani (daging, unggas, ikan, telur):" name="avgDailyAnimalProtein" value={dietData.avgDailyAnimalProtein || ''} onChange={handleFieldChange} placeholder="... porsi" description="1 porsi ≈ ukuran telapak tangan"/>
            <InputField label="Produk Susu / Alternatif Susu:" name="avgDailyDairyOrAlternatives" value={dietData.avgDailyDairyOrAlternatives || ''} onChange={handleFieldChange} placeholder="... porsi/gelas"/>
            <InputField label="Lemak Sehat (alpukat, minyak zaitun):" name="avgDailyHealthyFats" value={dietData.avgDailyHealthyFats || ''} onChange={handleFieldChange} placeholder="... sendok makan"/>
        </div>
      </fieldset>

      {/* Makanan Sering/Dihindari & Sumber Protein/Lemak */}
      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Preferensi Makanan</legend>
        <TextareaField label="Makanan yang Sering Dikonsumsi (min. 3x/minggu):" name="frequentFoods" value={dietData.frequentFoods || ''} onChange={handleFieldChange} rows={2} showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof DietNutritionData, reason)}/>
        <TextareaField label="Makanan yang Dihindari atau Tidak Disukai:" name="avoidedDislikedFoods" value={dietData.avoidedDislikedFoods || ''} onChange={handleFieldChange} rows={2} showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof DietNutritionData, reason)}/>
        <TextareaField label="Sumber Protein Utama Anda:" name="mainProteinSource" value={dietData.mainProteinSource || ''} onChange={handleFieldChange} rows={2} showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof DietNutritionData, reason)}/>
        <TextareaField label="Sumber Lemak Utama Anda:" name="mainFatSource" value={dietData.mainFatSource || ''} onChange={handleFieldChange} rows={2} showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof DietNutritionData, reason)}/>
      </fieldset>
      
      {/* Konsumsi Gula, Makanan Olahan, Kafein, Alkohol */}
      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Konsumsi Lainnya</legend>
        <SelectField label="Konsumsi Gula Tambahan (permen, kue, minuman manis):" name="addedSugarIntake" options={CONSUMPTION_FREQUENCY_OPTIONS} value={dietData.addedSugarIntake || ''} onChange={(e) => handleRadioOrSelectChange('addedSugarIntake', e.target.value)} />
        <SelectField label="Konsumsi Makanan Olahan/Cepat Saji:" name="processedFoodIntake" options={CONSUMPTION_FREQUENCY_OPTIONS} value={dietData.processedFoodIntake || ''} onChange={(e) => handleRadioOrSelectChange('processedFoodIntake', e.target.value)} />
        <InputField label="Konsumsi Kafein (cth: 2 cangkir/hari):" name="caffeineIntakeAmount" value={dietData.caffeineIntakeAmount || ''} onChange={handleFieldChange} placeholder="Jumlah per hari" showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof DietNutritionData, reason)} />
        <InputField label="Jenis Kafein Utama (cth: Kopi, Teh):" name="caffeineIntakeType" value={dietData.caffeineIntakeType || ''} onChange={handleFieldChange} placeholder="Jenis minuman" showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof DietNutritionData, reason)} />
        <SelectField label="Konsumsi Alkohol:" name="alcoholIntake" options={ALCOHOL_CONSUMPTION_OPTIONS} value={dietData.alcoholIntake || ''} onChange={(e) => handleRadioOrSelectChange('alcoholIntake', e.target.value)} />
        {dietData.alcoholIntake && dietData.alcoholIntake !== 'never' && (
            <InputField label="Jenis & Jumlah Alkohol per Kali Minum:" name="alcoholIntakeTypeAmount" value={dietData.alcoholIntakeTypeAmount || ''} onChange={handleFieldChange} placeholder="Contoh: Bir, 1 botol" className="animate-fadeIn" showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof DietNutritionData, reason)} />
        )}
      </fieldset>
      
      {/* Air Minum */}
      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Konsumsi Air Minum</legend>
        <InputField label="Air Minum Harian (cth: 8 gelas / 2 liter):" name="dailyWaterIntakeAmount" value={dietData.dailyWaterIntakeAmount || ''} onChange={handleFieldChange} placeholder="Jumlah per hari" showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof DietNutritionData, reason)} />
        <SelectField label="Jenis Air Minum Utama:" name="dailyWaterIntakeType" options={WATER_TYPE_OPTIONS} value={dietData.dailyWaterIntakeType || ''} onChange={(e) => handleRadioOrSelectChange('dailyWaterIntakeType', e.target.value)} />
        {dietData.dailyWaterIntakeType === 'home_filter' && (
            <InputField label="Jenis Filter Air di Rumah:" name="dailyWaterIntakeTypeFilter" value={dietData.dailyWaterIntakeTypeFilter || ''} onChange={handleFieldChange} placeholder="Contoh: RO, Karbon Aktif" className="animate-fadeIn" />
        )}
        {dietData.dailyWaterIntakeType === 'other' && (
            <InputField label="Sebutkan Jenis Air Minum Lainnya:" name="dailyWaterIntakeTypeOther" value={dietData.dailyWaterIntakeTypeOther || ''} onChange={handleFieldChange} placeholder="Jenis air lainnya" className="animate-fadeIn" />
        )}
      </fieldset>

      {/* Kebiasaan Makan & Food Craving */}
      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Kebiasaan & Keinginan Makan</legend>
        <p className="block text-sm font-medium text-text-primary mb-2">Kebiasaan Makan (Centang yang sering dilakukan):</p>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 mb-4">
            {EATING_HABITS_OPTIONS.map(opt => (
                <CheckboxCard key={opt.value} id={`habit-${opt.value}`} name="eatingHabits" value={opt.value} checked={(dietData.eatingHabits || []).includes(opt.value)} onChange={(val, ischk) => handleCheckboxChange('eatingHabits', val, ischk)} labelText={opt.label} />
            ))}
        </div>
        <p className="block text-sm font-medium text-text-primary mb-2">Food Craving (Keinginan kuat thd. makanan tertentu):</p>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 mb-2">
            {FOOD_CRAVINGS_OPTIONS.map(opt => (
                <CheckboxCard key={opt.value} id={`craving-${opt.value}`} name="foodCravings" value={opt.value} checked={(dietData.foodCravings || []).includes(opt.value)} onChange={(val, ischk) => handleCheckboxChange('foodCravings', val, ischk)} labelText={opt.label} />
            ))}
        </div>
        {(dietData.foodCravings || []).includes('other') && (
            <InputField label="Sebutkan Keinginan Makanan Lainnya:" name="foodCravingsOther" value={dietData.foodCravingsOther || ''} onChange={handleFieldChange} className="animate-fadeIn mb-2" showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof DietNutritionData, reason)} />
        )}
        <InputField label="Kapan Biasanya Muncul Keinginan Ini?" name="foodCravingsTiming" value={dietData.foodCravingsTiming || ''} onChange={handleFieldChange} placeholder="Contoh: sore hari, saat stres" showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof DietNutritionData, reason)} />
      </fieldset>

      {/* Memasak, Label, Sumber Bahan */}
      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Persiapan & Pembelian Makanan</legend>
        <SelectField label="Apakah Anda memasak sendiri sebagian besar makanan Anda?" name="cookFrequency" options={COOKING_FREQUENCY_OPTIONS} value={dietData.cookFrequency || ''} onChange={(e) => handleRadioOrSelectChange('cookFrequency', e.target.value)} />
        <SelectField label="Apakah Anda membaca label informasi gizi pada kemasan makanan?" name="readFoodLabelsFrequency" options={FOOD_LABEL_READING_OPTIONS} value={dietData.readFoodLabelsFrequency || ''} onChange={(e) => handleRadioOrSelectChange('readFoodLabelsFrequency', e.target.value)} />
        <SelectField label="Sumber utama pembelian bahan makanan:" name="groceryShoppingSource" options={GROCERY_SOURCE_OPTIONS} value={dietData.groceryShoppingSource || ''} onChange={(e) => handleRadioOrSelectChange('groceryShoppingSource', e.target.value)} />
        {dietData.groceryShoppingSource === 'other' && (
            <InputField label="Sebutkan Sumber Pembelian Lainnya:" name="groceryShoppingSourceOther" value={dietData.groceryShoppingSourceOther || ''} onChange={handleFieldChange} className="animate-fadeIn" />
        )}
      </fieldset>

      {/* Suplemen */}
      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Suplemen yang Dikonsumsi Saat Ini</legend>
        {(dietData.currentSupplements || []).map((sup, index) => (
          <SupplementEntryRow key={sup.id} entry={sup} index={index} onChange={handleSupplementChange} onRemove={removeSupplement} />
        ))}
        <Button onClick={addSupplement} variant="outline" size="sm">Tambah Suplemen</Button>
      </fieldset>

    </div>
  );
};

export default Section7LifestyleDiet;

// comprehensive-health-questionnaire//components/formSections/symptomReview/SymptomCategoryBlock.tsx

import React from 'react';
import SymptomRatingRow from './SymptomRatingRow';
import { SymptomRating, SystemReviewData } from '../../../types'; // Adjust path as needed

interface SymptomInfo {
  symptomId: string;
  symptomLabel: string;
}

interface SymptomCategoryBlockProps {
  categoryLabel: string;
  symptoms: SymptomInfo[];
  systemReviewData: SystemReviewData | undefined;
  onSymptomRatingChange: (symptomId: string, scaleType: 'frequency' | 'severity', value: number) => void;
}

const SymptomCategoryBlock: React.FC<SymptomCategoryBlockProps> = ({
  categoryLabel,
  symptoms,
  systemReviewData,
  onSymptomRatingChange,
}) => {
  return (
    <fieldset className="mb-8 p-4 border border-gray-300 rounded-md shadow-sm">
      <legend className="text-lg font-semibold text-primary mb-3 px-2">{categoryLabel}</legend>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-2 md:gap-4 items-center mb-2 px-3 py-1.5 font-medium text-xs text-text-secondary uppercase border-b">
        <div className="md:col-span-1">Gejala</div>
        <div className="md:col-span-1">Frekuensi (0-3)</div>
        <div className="md:col-span-1">Keparahan (0-3)</div>
      </div>
      {symptoms.map((symptom) => {
        const currentSymptomRatings = systemReviewData?.[symptom.symptomId] || { frequency: 0, severity: 0 };
        return (
          <SymptomRatingRow
            key={symptom.symptomId}
            symptomId={symptom.symptomId}
            symptomLabel={symptom.symptomLabel}
            frequencyRating={currentSymptomRatings.frequency}
            severityRating={currentSymptomRatings.severity}
            onRatingChange={onSymptomRatingChange} // Corrected prop name here
          />
        );
      })}
    </fieldset>
  );
};

export default SymptomCategoryBlock;
// comprehensive-health-questionnaire//components/formSections/symptomReview/SymptomRatingInput.tsx

import React from 'react';
import { SYMPTOM_FREQUENCY_OPTIONS, SYMPTOM_SEVERITY_OPTIONS } from '../../../constants'; // Adjust path as needed

interface SymptomRatingInputProps {
  scaleType: 'frequency' | 'severity';
  symptomId: string;
  currentValue: number;
  onChange: (symptomId: string, scaleType: 'frequency' | 'severity', value: number) => void;
}

const SymptomRatingInput: React.FC<SymptomRatingInputProps> = ({
  scaleType,
  symptomId,
  currentValue,
  onChange,
}) => {
  const options = scaleType === 'frequency' ? SYMPTOM_FREQUENCY_OPTIONS : SYMPTOM_SEVERITY_OPTIONS;

  return (
    <div className="flex space-x-1 md:space-x-2">
      {options.map((option) => (
        <button
          key={option.value}
          type="button"
          onClick={() => onChange(symptomId, scaleType, option.value)}
          className={`px-2 py-1.5 md:px-3 md:py-1.5 border rounded-md text-xs md:text-sm transition-all duration-150
            ${currentValue === option.value
              ? 'bg-primary text-white border-primary shadow-md'
              : 'bg-gray-100 hover:bg-gray-200 text-text-secondary border-gray-300'
            }
            focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-1
          `}
          title={`${scaleType === 'frequency' ? 'Frekuensi' : 'Keparahan'}: ${option.label.split('(')[0].trim()}`} // Tooltip for clarity
        >
          {option.value}
        </button>
      ))}
    </div>
  );
};

export default SymptomRatingInput;

// comprehensive-health-questionnaire//components/formSections/symptomReview/SymptomRatingRow.tsx

import React from 'react';
import SymptomRatingInput from './SymptomRatingInput';

interface SymptomRatingRowProps {
  symptomId: string;
  symptomLabel: string;
  frequencyRating: number;
  severityRating: number;
  onRatingChange: (symptomId: string, scaleType: 'frequency' | 'severity', value: number) => void;
}

const SymptomRatingRow: React.FC<SymptomRatingRowProps> = ({
  symptomId,
  symptomLabel,
  frequencyRating,
  severityRating,
  onRatingChange,
}) => {
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-2 md:gap-4 items-center py-2.5 px-3 even:bg-gray-50/70 rounded">
      <div className="md:col-span-1 text-sm text-text-primary break-words">
        {symptomLabel}
      </div>
      <div className="md:col-span-1">
        <SymptomRatingInput
          scaleType="frequency"
          symptomId={symptomId}
          currentValue={frequencyRating}
          onChange={onRatingChange}
        />
      </div>
      <div className="md:col-span-1">
        <SymptomRatingInput
          scaleType="severity"
          symptomId={symptomId}
          currentValue={severityRating}
          onChange={onRatingChange}
        />
      </div>
    </div>
  );
};

export default SymptomRatingRow;

// comprehensive-health-questionnaire//components/formSections/Section1_BasicInfo.tsx

import React from 'react';
import { useFormContext } from '../../contexts/FormContext';
import { FormData, EmptyReason } from '../../types';
import { Gender } from '../../constants';
import InputField from '../common/InputField';
import RadioCard from '../common/RadioCard';

const Section1BasicInfo: React.FC = () => {
  const { formData, updateFormData } = useFormContext();

  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    updateFormData(e.target.name as keyof FormData, e.target.value);
  };

  const handleRadioChange = (name: keyof FormData | string, value: string) => {
    updateFormData(name, value);
  };
  
  const handleEmptyReasonSelect = (fieldName: string, reason: EmptyReason) => {
    updateFormData(`${fieldName}_empty_reason`, reason);
    // Also clear the actual field value if an empty reason is chosen
    updateFormData(fieldName as keyof FormData, '');
  };


  return (
    <div>
      <InputField
        label="Nama Lengkap Pasien (sesuai KTP/Identitas)"
        name="fullName"
        value={formData.fullName || ''}
        onChange={handleFieldChange}
        required
        placeholder="Masukkan nama lengkap"
      />
      <InputField
        label="Tanggal Lahir Pasien"
        name="dob"
        type="date"
        value={formData.dob || ''}
        onChange={handleFieldChange}
        required
        // Ensure max date is today for date of birth
        max={new Date().toISOString().split("T")[0]} 
      />
      
      <div className="mb-6">
        <p className="block text-sm font-medium text-text-primary mb-2">Jenis Kelamin Pasien <span className="text-danger ml-1">*</span></p>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
          <RadioCard
            id="genderMale"
            name="gender"
            value={Gender.Male}
            checkedValue={formData.gender}
            onChange={(val) => handleRadioChange('gender', val)}
            labelText="Laki-laki"
            required
          />
          <RadioCard
            id="genderFemale"
            name="gender"
            value={Gender.Female}
            checkedValue={formData.gender}
            onChange={(val) => handleRadioChange('gender', val)}
            labelText="Perempuan"
            required
          />
           <RadioCard
            id="genderOther"
            name="gender"
            value={Gender.Other}
            checkedValue={formData.gender}
            onChange={(val) => handleRadioChange('gender', val)}
            labelText="Lainnya"
            required
          />
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6">
        <InputField
          label="Tinggi Badan Pasien (cm)"
          name="height"
          type="number"
          value={formData.height || ''}
          onChange={handleFieldChange}
          placeholder="Contoh: 170"
          min="0"
          showEmptyOptions // Not strictly required, allow empty with reason
          onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name, reason)}
        />
        <InputField
          label="Berat Badan Pasien (kg)"
          name="weight"
          type="number"
          value={formData.weight || ''}
          onChange={handleFieldChange}
          placeholder="Contoh: 65"
          min="0"
          step="0.1" // Allow decimal for weight
          showEmptyOptions // Not strictly required, allow empty with reason
          onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name, reason)}
        />
      </div>
    </div>
  );
};

export default Section1BasicInfo;

// comprehensive-health-questionnaire//components/formSections/Section13_Readiness_Expectations.tsx

import React from 'react';
import { useFormContext } from '../../contexts/FormContext';
import { FormData, ReadinessExpectationsData, EmptyReason } from '../../types';
import { LAB_TEST_READINESS_OPTIONS, REFERRAL_SOURCE_OPTIONS } from '../../constants';
import TextareaField from '../common/TextareaField';
import SelectField from '../common/SelectField';
import InputField from '../common/InputField';
import RadioCard from '../common/RadioCard';

const Section13ReadinessExpectations: React.FC = () => {
  const { formData, updateFormData } = useFormContext();
  const readinessData = formData.readinessExpectations || {} as ReadinessExpectationsData;

  const handleReadinessDataChange = (field: keyof ReadinessExpectationsData, value: any) => {
    updateFormData('readinessExpectations', { ...readinessData, [field]: value });
  };

  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    const fieldName = name as keyof ReadinessExpectationsData;

    if (e.target.type === 'range' && fieldName === 'lifestyleChangeReadiness') {
      handleReadinessDataChange(fieldName, parseInt(value, 10));
    } else {
      handleReadinessDataChange(fieldName, value);
    }
  };

  const handleSelectChange = (name: keyof ReadinessExpectationsData, value: string) => {
    handleReadinessDataChange(name, value);
    // Clear referralSourceDetail if main selection changes to non-conditional
    if (name === 'referralSource' && value !== 'social_media' && value !== 'other') {
      handleReadinessDataChange('referralSourceDetail', '');
    }
  };
  
  const handleEmptyReasonSelect = (fieldName: keyof ReadinessExpectationsData, reason: EmptyReason) => {
    handleReadinessDataChange(`${fieldName}_empty_reason` as any, reason);
    handleReadinessDataChange(fieldName, '');
  };

  return (
    <div>

      <TextareaField
        label="Apa motivasi terbesar pasien untuk melakukan perubahan kesehatan saat ini?"
        name="motivationForChange"
        value={readinessData.motivationForChange || ''}
        onChange={handleFieldChange}
        rows={3}
        placeholder="Jelaskan motivasi utama..."
        showEmptyOptions
        onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof ReadinessExpectationsData, reason)}
      />

      <div className="mb-5 mt-6">
        <label htmlFor="lifestyleChangeReadiness" className="block text-sm font-medium text-text-primary mb-1">
          Seberapa siap pasien untuk melakukan perubahan gaya hidup (pola makan, olahraga, manajemen stres, dll.) jika direkomendasikan?
          (0: Tidak Siap Sama Sekali - 10: Sangat Siap dan Termotivasi)
        </label>
        <div className="flex items-center gap-4 mt-2">
          <input
            id="lifestyleChangeReadiness"
            name="lifestyleChangeReadiness"
            type="range"
            min="0"
            max="10"
            step="1"
            value={readinessData.lifestyleChangeReadiness === undefined ? 5 : readinessData.lifestyleChangeReadiness}
            onChange={handleFieldChange}
            className="range-slider w-full h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer focus:outline-none focus:ring-2 focus:ring-primary/50"
          />
          <span className="text-lg font-semibold text-primary w-12 text-center p-2 bg-primary/10 rounded-md">
            {readinessData.lifestyleChangeReadiness !== undefined ? readinessData.lifestyleChangeReadiness : 5}
          </span>
        </div>
      </div>
      
      <fieldset className="mb-6">
        <p className="block text-sm font-medium text-text-primary mb-2">Seberapa siap pasien untuk menjalani tes laboratorium tambahan (darah, urin, feses, saliva, dll.) jika diperlukan?</p>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
            {LAB_TEST_READINESS_OPTIONS.map(opt => (
                <RadioCard
                    key={opt.value}
                    id={`labTestReadiness-${opt.value}`}
                    name="labTestReadiness"
                    value={opt.value}
                    checkedValue={readinessData.labTestReadiness}
                    onChange={(val) => handleSelectChange('labTestReadiness', val)}
                    labelText={opt.label}
                />
            ))}
        </div>
      </fieldset>

      <TextareaField
        label="Apakah ada batasan finansial yang perlu kami ketahui terkait rekomendasi tes laboratorium atau pembelian suplemen/terapi?"
        name="financialLimitations"
        value={readinessData.financialLimitations || ''}
        onChange={handleFieldChange}
        rows={3}
        placeholder="Ini membantu kami memberikan rekomendasi yang paling sesuai dengan kemampuan Anda."
        showEmptyOptions
        onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof ReadinessExpectationsData, reason)}
      />

      <TextareaField
        label="Pertanyaan spesifik yang ingin pasien ajukan kepada kami saat konsultasi nanti?"
        name="specificQuestions"
        value={readinessData.specificQuestions || ''}
        onChange={handleFieldChange}
        rows={3}
        placeholder="Tuliskan pertanyaan Anda di sini..."
        showEmptyOptions
        onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof ReadinessExpectationsData, reason)}
      />
      
      <SelectField
        label="Dari mana Anda/Pasien mengetahui tentang layanan Functional Medicine kami atau tentang praktisi ini?"
        name="referralSource"
        options={REFERRAL_SOURCE_OPTIONS}
        value={readinessData.referralSource || ''}
        onChange={(e) => handleSelectChange('referralSource', e.target.value)}
        className="mt-4"
      />
      {(readinessData.referralSource === 'social_media' || readinessData.referralSource === 'other') && (
        <InputField
          label={readinessData.referralSource === 'social_media' ? "Sebutkan Media Sosial (cth: Instagram @akun, Facebook Grup ABC):" : "Sebutkan Sumber Lainnya:"}
          name="referralSourceDetail"
          value={readinessData.referralSourceDetail || ''}
          onChange={handleFieldChange}
          placeholder="Detail sumber..."
          className="animate-fadeIn"
          showEmptyOptions
          onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof ReadinessExpectationsData, reason)}
        />
      )}
    </div>
  );
};

export default Section13ReadinessExpectations;

// comprehensive-health-questionnaire//components/formSections/Section3_HealthTimeline.tsx

import React from 'react';
import { useFormContext } from '../../contexts/FormContext';
import { TimelineEntry, FormData } from '../../types';
import Button from '../common/Button';
import TimelineEntryCard from './TimelineEntryCard'; // Assuming the new component is in the same directory or adjust path

const Section3HealthTimeline: React.FC = () => {
  const { formData, updateFormData } = useFormContext();
  const healthTimeline = formData.healthTimeline || [];

  const addTimelineEntry = () => {
    const newEntry: TimelineEntry = {
      id: crypto.randomUUID(), // Modern way to generate UUID
      ageYear: '',
      event: '',
      symptoms: '',
    };
    updateFormData('healthTimeline', [...healthTimeline, newEntry]);
  };

  const removeTimelineEntry = (id: string) => {
    const updatedTimeline = healthTimeline.filter(entry => entry.id !== id);
    updateFormData('healthTimeline', updatedTimeline);
  };

  const handleTimelineChange = (id: string, field: keyof Omit<TimelineEntry, 'id'>, value: string) => {
    const updatedTimeline = healthTimeline.map(entry =>
      entry.id === id ? { ...entry, [field]: value } : entry
    );
    updateFormData('healthTimeline', updatedTimeline);
  };

  return (
    <div>
      
      {healthTimeline.length === 0 && (
        <div className="text-center py-6 px-4 border-2 border-dashed border-border-color rounded-lg bg-background">
          <p className="text-text-secondary mb-3">Belum ada peristiwa kesehatan yang dicatat.</p>
          <p className="text-text-secondary mb-4">Klik tombol di bawah untuk menambahkan peristiwa pertama.</p>
        </div>
      )}

      <div className="space-y-4 mt-4 mb-6">
        {healthTimeline.map((entry, index) => (
          <TimelineEntryCard
            key={entry.id}
            entry={entry}
            index={index}
            onChange={handleTimelineChange}
            onRemove={removeTimelineEntry}
          />
        ))}
      </div>

      <Button onClick={addTimelineEntry} variant="secondary" icon={
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
          <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
        </svg>
      }>
        Tambah Peristiwa
      </Button>
      {healthTimeline.length > 0 && <p className="mt-2 text-xs text-text-secondary">Pastikan semua peristiwa penting tercatat. Anda dapat menambah atau menghapus entri sesuai kebutuhan.</p>}
    </div>
  );
};

export default Section3HealthTimeline;
// comprehensive-health-questionnaire//components/formSections/Section8_Lifestyle_Activity.tsx

import React from 'react';
import { useFormContext } from '../../contexts/FormContext';
import { FormData, PhysicalActivityData, EmptyReason } from '../../types';
import {
  EXERCISE_INTENSITY_OPTIONS,
  ACTIVITY_LEVEL_AT_WORK_OPTIONS,
  ENJOY_PHYSICAL_ACTIVITY_OPTIONS,
  BARRIERS_TO_EXERCISE_OPTIONS
} from '../../constants';
import InputField from '../common/InputField';
import TextareaField from '../common/TextareaField';
import SelectField from '../common/SelectField';
import CheckboxCard from '../common/CheckboxCard';

const Section8LifestyleActivity: React.FC = () => {
  const { formData, updateFormData } = useFormContext();
  const activityData = formData.physicalActivity || {} as PhysicalActivityData;

  const handleActivityChange = (field: keyof PhysicalActivityData, value: any) => {
    updateFormData('physicalActivity', { ...activityData, [field]: value });
  };

  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    handleActivityChange(name as keyof PhysicalActivityData, value);
  };
  
  const handleSelectChange = (name: keyof PhysicalActivityData, value: string) => {
    handleActivityChange(name, value);
  };

  const handleCheckboxChange = (groupName: keyof PhysicalActivityData, value: string, isChecked: boolean) => {
    const currentValues = (activityData[groupName] as string[] || []);
    let updatedValues: string[];

    if (isChecked) {
      updatedValues = [...currentValues, value];
    } else {
      updatedValues = currentValues.filter(item => item !== value);
    }
    handleActivityChange(groupName, updatedValues);

    if (groupName === 'barriersToExercise' && value === 'other' && !isChecked) {
        handleActivityChange('barriersToExerciseOther', '');
    }
  };
  
  const handleEmptyReasonSelect = (fieldName: keyof PhysicalActivityData, reason: EmptyReason) => {
    handleActivityChange(`${fieldName}_empty_reason` as any, reason);
    handleActivityChange(fieldName, '');
  };

  return (
    <div>

      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Olahraga Terstruktur</legend>
        <InputField
          label="Frekuensi Olahraga Terstruktur (direncanakan):"
          name="structuredExerciseFrequency"
          value={activityData.structuredExerciseFrequency || ''}
          onChange={handleFieldChange}
          placeholder="Contoh: 3 kali/minggu"
          showEmptyOptions
          onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof PhysicalActivityData, reason)}
        />
        <TextareaField
          label="Jenis Olahraga Utama yang Rutin Dilakukan:"
          name="mainExerciseTypes"
          value={activityData.mainExerciseTypes || ''}
          onChange={handleFieldChange}
          placeholder="Contoh: Lari, Bersepeda, Yoga"
          rows={2}
          showEmptyOptions
          onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof PhysicalActivityData, reason)}
        />
        <InputField
          label="Durasi Rata-rata per Sesi Olahraga:"
          name="avgExerciseDuration"
          value={activityData.avgExerciseDuration || ''}
          onChange={handleFieldChange}
          placeholder="Contoh: 60 menit"
          showEmptyOptions
          onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof PhysicalActivityData, reason)}
        />
        <SelectField
          label="Intensitas Olahraga Rata-rata:"
          name="avgExerciseIntensity"
          options={EXERCISE_INTENSITY_OPTIONS}
          value={activityData.avgExerciseIntensity || ''}
          onChange={(e) => handleSelectChange('avgExerciseIntensity', e.target.value)}
        />
      </fieldset>

      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Aktivitas Harian & Pekerjaan</legend>
        <TextareaField
          label="Aktivitas Fisik Harian Lainnya (selain olahraga terstruktur):"
          name="otherDailyPhysicalActivity"
          value={activityData.otherDailyPhysicalActivity || ''}
          onChange={handleFieldChange}
          placeholder="Contoh: Berjalan kaki ke kantor, berkebun, naik tangga"
          rows={2}
          showEmptyOptions
          onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof PhysicalActivityData, reason)}
        />
        <SelectField
          label="Tingkat Aktivitas di Pekerjaan:"
          name="activityLevelAtWork"
          options={ACTIVITY_LEVEL_AT_WORK_OPTIONS}
          value={activityData.activityLevelAtWork || ''}
          onChange={(e) => handleSelectChange('activityLevelAtWork', e.target.value)}
        />
        <InputField
          label="Perkiraan total jam duduk setiap hari (termasuk di luar jam kerja):"
          name="totalDailySittingHours"
          value={activityData.totalDailySittingHours || ''}
          onChange={handleFieldChange}
          placeholder="Contoh: 8 jam"
          type="number"
          showEmptyOptions
          onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof PhysicalActivityData, reason)}
        />
      </fieldset>

      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Preferensi & Hambatan</legend>
        <SelectField
          label="Apakah Anda menikmati aktivitas fisik/olahraga?"
          name="enjoyPhysicalActivity"
          options={ENJOY_PHYSICAL_ACTIVITY_OPTIONS}
          value={activityData.enjoyPhysicalActivity || ''}
          onChange={(e) => handleSelectChange('enjoyPhysicalActivity', e.target.value)}
        />
        
        <p className="block text-sm font-medium text-text-primary mt-4 mb-2">Hambatan Utama untuk Berolahraga Lebih Banyak/Rutin:</p>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 mb-2">
          {BARRIERS_TO_EXERCISE_OPTIONS.map(opt => (
            <CheckboxCard
              key={opt.value}
              id={`barrier-${opt.value}`}
              name="barriersToExercise"
              value={opt.value}
              checked={(activityData.barriersToExercise || []).includes(opt.value)}
              onChange={(val, ischk) => handleCheckboxChange('barriersToExercise', val, ischk)}
              labelText={opt.label}
            />
          ))}
        </div>
        {(activityData.barriersToExercise || []).includes('other') && (
            <InputField
                label="Jelaskan Hambatan Lainnya:"
                name="barriersToExerciseOther"
                value={activityData.barriersToExerciseOther || ''}
                onChange={handleFieldChange}
                placeholder="Sebutkan hambatan lainnya"
                className="animate-fadeIn mt-2"
                showEmptyOptions
                onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof PhysicalActivityData, reason)}
            />
        )}
      </fieldset>
    </div>
  );
};

export default Section8LifestyleActivity;

// comprehensive-health-questionnaire//components/formSections/Section11_Environment_Exposures.tsx

import React from 'react';
import { useFormContext } from '../../contexts/FormContext';
import { FormData, EnvironmentalExposuresData, EmptyReason } from '../../types';
import {
  YES_NO_OPTIONS,
  YES_NO_UNKNOWN_OPTIONS,
  DWELLING_TYPE_OPTIONS,
  HOME_WATER_SOURCE_OPTIONS,
  INDOOR_AIR_VENTILATION_OPTIONS,
  AC_USAGE_OPTIONS,
  AIR_FRESHENER_USAGE_OPTIONS,
  WORKPLACE_EXPOSURE_OPTIONS,
  PRODUCT_AWARENESS_OPTIONS,
  PERSONAL_CARE_PREFERENCE_OPTIONS,
  CLEANING_PRODUCT_PREFERENCE_OPTIONS,
  PLASTIC_USAGE_FREQUENCY_OPTIONS,
  FISH_CONSUMPTION_FREQUENCY_OPTIONS
} from '../../constants';
import InputField from '../common/InputField';
import TextareaField from '../common/TextareaField';
import SelectField from '../common/SelectField';
import CheckboxCard from '../common/CheckboxCard';
import RadioCard from '../common/RadioCard';

const Section11EnvironmentExposures: React.FC = () => {
  const { formData, updateFormData } = useFormContext();
  const envData = formData.environmentalExposures || {} as EnvironmentalExposuresData;

  const updateEnvData = (changes: Partial<EnvironmentalExposuresData>) => {
    updateFormData('environmentalExposures', { ...envData, ...changes });
  };

  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    updateEnvData({ [name]: value });
  };
  
  const handleRadioOrSelectChange = (name: keyof EnvironmentalExposuresData, value: string) => {
    const changes: Partial<EnvironmentalExposuresData> = { [name]: value };

    // Conditional clearing
    if (name === 'currentDwellingType') {
        if (value !== 'near_industrial') changes.currentDwellingTypeIndustrialDetail = '';
        if (value !== 'near_farmland') changes.currentDwellingTypeAgriculturePesticides = undefined;
    }
    if (name === 'moldWaterDamageHistory' && value !== 'yes') {
        changes.moldWaterDamageDetailsWhere = '';
        changes.moldWaterDamageDetailsWhen = '';
    }
    if (name === 'homeBathingWaterFiltered' && value === 'no') {
        changes.homeBathingWaterFilterType = '';
    }
    if (name === 'airPurifierUsage' && value === 'no') {
        changes.airPurifierType = '';
    }
    if (name === 'amalgamFillings' && value !== 'yes') {
        changes.amalgamFillingsCount = '';
        changes.amalgamFillingsStillPresent = undefined;
        changes.amalgamFillingsRemovedDate = '';
    }
    if (name === 'amalgamFillingsStillPresent' && value === 'yes') {
        changes.amalgamFillingsRemovedDate = '';
    }
    updateEnvData(changes);
  };

  const handleCheckboxChange = (groupName: keyof EnvironmentalExposuresData, value: string, isChecked: boolean) => {
    const currentValues = (envData[groupName] as string[] || []);
    const changes: Partial<EnvironmentalExposuresData> = {};
    let updatedValues: string[];

    if (value === 'none') {
        updatedValues = isChecked ? ['none'] : [];
        if (isChecked) {
            // Clear all detail fields when 'none' is selected
            WORKPLACE_EXPOSURE_OPTIONS.forEach(opt => {
                if (opt.value !== 'none') {
                    const detailField = `workplace${opt.value.charAt(0).toUpperCase() + opt.value.slice(1).replace(/_([a-z])/g, g => g[1].toUpperCase())}Detail` as keyof EnvironmentalExposuresData;
                    changes[detailField] = '';
                }
            });
            changes.workplaceOtherExposuresDetail = '';
        }
    } else {
        updatedValues = currentValues.filter(item => item !== 'none');
        if (isChecked) {
            updatedValues = [...updatedValues, value];
        } else {
            updatedValues = updatedValues.filter(item => item !== value);
            // Clear corresponding detail field when a checkbox is unchecked
            if (value === 'other') {
                changes.workplaceOtherExposuresDetail = '';
            } else {
                const detailField = `workplace${value.charAt(0).toUpperCase() + value.slice(1).replace(/_([a-z])/g, g => g[1].toUpperCase())}Detail` as keyof EnvironmentalExposuresData;
                changes[detailField] = '';
            }
        }
    }
    changes[groupName] = updatedValues;
    updateEnvData(changes);
  };
  
  const handleEmptyReasonSelect = (fieldName: keyof EnvironmentalExposuresData, reason: EmptyReason) => {
    updateEnvData({
      [`${fieldName}_empty_reason`]: reason,
      [fieldName]: ''
    });
  };
  
  const isNoneWorkExposureSelected = (envData.workplaceExposures || []).includes('none');


  return (
    <div>

      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Tempat Tinggal & Bangunan</legend>
        <SelectField label="Tempat Tinggal Saat Ini:" name="currentDwellingType" options={DWELLING_TYPE_OPTIONS} value={envData.currentDwellingType || ''} onChange={(e) => handleRadioOrSelectChange('currentDwellingType', e.target.value)} />
        {envData.currentDwellingType === 'near_industrial' && (
          <InputField label="Jenis Industri Terdekat:" name="currentDwellingTypeIndustrialDetail" value={envData.currentDwellingTypeIndustrialDetail || ''} onChange={handleFieldChange} className="animate-fadeIn" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>
        )}
        {envData.currentDwellingType === 'near_farmland' && (
          <SelectField label="Apakah lahan pertanian menggunakan pestisida intensif?" name="currentDwellingTypeAgriculturePesticides" options={YES_NO_UNKNOWN_OPTIONS} value={envData.currentDwellingTypeAgriculturePesticides || ''} onChange={(e) => handleRadioOrSelectChange('currentDwellingTypeAgriculturePesticides', e.target.value)} className="animate-fadeIn" />
        )}
        <InputField label="Usia Bangunan Tempat Tinggal Saat Ini (tahun):" name="dwellingAge" type="number" value={envData.dwellingAge || ''} onChange={handleFieldChange} placeholder="Contoh: 10" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>
        <p className="block text-sm font-medium text-text-primary mt-3 mb-2">Pernah ada masalah jamur (mold) terlihat/tercium, atau kebocoran air signifikan di rumah (saat ini/sebelumnya)?</p>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-2">
          {YES_NO_UNKNOWN_OPTIONS.map(opt => <RadioCard key={opt.value} id={`mold-${opt.value}`} name="moldWaterDamageHistory" value={opt.value} checkedValue={envData.moldWaterDamageHistory} onChange={(v) => handleRadioOrSelectChange('moldWaterDamageHistory', v)} labelText={opt.label} />)}
        </div>
        {envData.moldWaterDamageHistory === 'yes' && (
          <div className="animate-fadeIn space-y-3 mt-2">
            <InputField label="Di mana masalah jamur/kebocoran terjadi?" name="moldWaterDamageDetailsWhere" value={envData.moldWaterDamageDetailsWhere || ''} onChange={handleFieldChange} showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>
            <InputField label="Kapan masalah tersebut terjadi?" name="moldWaterDamageDetailsWhen" value={envData.moldWaterDamageDetailsWhen || ''} onChange={handleFieldChange} showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>
          </div>
        )}
      </fieldset>

      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Sumber Air & Kualitas Udara</legend>
        <InputField label="Sumber Air di Rumah untuk Minum (jika beda dari G1.13):" name="homeDrinkingWaterSource" value={envData.homeDrinkingWaterSource || ''} onChange={handleFieldChange} placeholder="Contoh: PDAM, Sumur Bor" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>
        <SelectField label="Sumber Air untuk Mandi/Cuci:" name="homeBathingWaterSource" options={HOME_WATER_SOURCE_OPTIONS.filter(opt => opt.value !== 'bottled_gallon')} value={envData.homeBathingWaterSource || ''} onChange={(e) => handleRadioOrSelectChange('homeBathingWaterSource', e.target.value)} />
         {envData.homeBathingWaterSource === 'other' && (
            <InputField label="Sebutkan Sumber Air Mandi/Cuci Lainnya:" name="homeBathingWaterSourceOther" value={envData.homeBathingWaterSourceOther || ''} onChange={handleFieldChange} className="animate-fadeIn" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>
        )}
        <p className="block text-sm font-medium text-text-primary mt-3 mb-2">Apakah air untuk mandi/cuci difilter?</p>
        <div className="grid grid-cols-2 gap-4 mb-2"><RadioCard id="bathFilterYes" name="homeBathingWaterFiltered" value="yes" checkedValue={envData.homeBathingWaterFiltered} onChange={(v) => handleRadioOrSelectChange('homeBathingWaterFiltered',v)} labelText="Ya"/> <RadioCard id="bathFilterNo" name="homeBathingWaterFiltered" value="no" checkedValue={envData.homeBathingWaterFiltered} onChange={(v) => handleRadioOrSelectChange('homeBathingWaterFiltered',v)} labelText="Tidak"/></div>
        {envData.homeBathingWaterFiltered === 'yes' && <InputField label="Jenis filter air mandi/cuci:" name="homeBathingWaterFilterType" value={envData.homeBathingWaterFilterType || ''} onChange={handleFieldChange} className="animate-fadeIn" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>}
        
        <SelectField label="Ventilasi Alami Rumah:" name="indoorAirVentilation" options={INDOOR_AIR_VENTILATION_OPTIONS} value={envData.indoorAirVentilation || ''} onChange={(e) => handleRadioOrSelectChange('indoorAirVentilation', e.target.value)} className="mt-3"/>
        <SelectField label="Penggunaan AC:" name="acUsage" options={AC_USAGE_OPTIONS} value={envData.acUsage || ''} onChange={(e) => handleRadioOrSelectChange('acUsage', e.target.value)} />
        {envData.acUsage !== 'none' && <InputField label="Frekuensi pembersihan filter AC:" name="acFilterCleaningFrequency" value={envData.acFilterCleaningFrequency || ''} onChange={handleFieldChange} placeholder="Contoh: Setiap 3 bulan" className="animate-fadeIn" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>}
        <p className="block text-sm font-medium text-text-primary mt-3 mb-2">Penggunaan Air Purifier di Rumah:</p>
        <div className="grid grid-cols-2 gap-4 mb-2"><RadioCard id="purifierYes" name="airPurifierUsage" value="yes" checkedValue={envData.airPurifierUsage} onChange={(v) => handleRadioOrSelectChange('airPurifierUsage',v)} labelText="Ya"/> <RadioCard id="purifierNo" name="airPurifierUsage" value="no" checkedValue={envData.airPurifierUsage} onChange={(v) => handleRadioOrSelectChange('airPurifierUsage',v)} labelText="Tidak"/></div>
        {envData.airPurifierUsage === 'yes' && <InputField label="Jenis Air Purifier:" name="airPurifierType" value={envData.airPurifierType || ''} onChange={handleFieldChange} placeholder="Contoh: HEPA Filter" className="animate-fadeIn" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>}
        <SelectField label="Penggunaan Pengharum Ruangan (Semprot/Elektrik/Lilin Sintetis):" name="airFreshenerUsage" options={AIR_FRESHENER_USAGE_OPTIONS} value={envData.airFreshenerUsage || ''} onChange={(e) => handleRadioOrSelectChange('airFreshenerUsage', e.target.value)} className="mt-3"/>
        <p className="block text-sm font-medium text-text-primary mt-3 mb-2">Apakah ada yang merokok di dalam rumah?</p>
        <div className="grid grid-cols-2 gap-4"><RadioCard id="smokingYes" name="smokingInHome" value="yes" checkedValue={envData.smokingInHome} onChange={(v) => handleRadioOrSelectChange('smokingInHome',v)} labelText="Ya"/> <RadioCard id="smokingNo" name="smokingInHome" value="no" checkedValue={envData.smokingInHome} onChange={(v) => handleRadioOrSelectChange('smokingInHome',v)} labelText="Tidak"/></div>
      </fieldset>

      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Paparan di Tempat Kerja & Hobi</legend>
        <p className="block text-sm font-medium text-text-primary mb-2">Paparan di Tempat Kerja (Saat Ini atau Riwayat Signifikan):</p>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 mb-2">
          {WORKPLACE_EXPOSURE_OPTIONS.map(opt => (
            <CheckboxCard key={opt.value} id={`workExposure-${opt.value}`} name="workplaceExposures" value={opt.value} checked={(envData.workplaceExposures || []).includes(opt.value)} onChange={(val, ischk) => handleCheckboxChange('workplaceExposures', val, ischk)} labelText={opt.label} disabled={isNoneWorkExposureSelected && opt.value !== 'none'}/>
          ))}
        </div>
        { (envData.workplaceExposures || []).includes('chemicals') && !isNoneWorkExposureSelected && <InputField label="Detail Bahan Kimia:" name="workplaceChemicalsDetail" value={envData.workplaceChemicalsDetail || ''} onChange={handleFieldChange} className="animate-fadeIn my-1" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>}
        { (envData.workplaceExposures || []).includes('dust_fiber') && !isNoneWorkExposureSelected && <InputField label="Detail Debu/Serat:" name="workplaceDustFiberDetail" value={envData.workplaceDustFiberDetail || ''} onChange={handleFieldChange} className="animate-fadeIn my-1" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>}
        { (envData.workplaceExposures || []).includes('fumes_solvents') && !isNoneWorkExposureSelected && <InputField label="Detail Asap/Uap/Pelarut:" name="workplaceFumesDetail" value={envData.workplaceFumesDetail || ''} onChange={handleFieldChange} className="animate-fadeIn my-1" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>}
        { (envData.workplaceExposures || []).includes('heavy_metals') && !isNoneWorkExposureSelected && <InputField label="Detail Logam Berat:" name="workplaceHeavyMetalsDetail" value={envData.workplaceHeavyMetalsDetail || ''} onChange={handleFieldChange} className="animate-fadeIn my-1" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>}
        { (envData.workplaceExposures || []).includes('pesticides_herbicides') && !isNoneWorkExposureSelected && <InputField label="Detail Pestisida/Herbisida:" name="workplacePesticidesDetail" value={envData.workplacePesticidesDetail || ''} onChange={handleFieldChange} className="animate-fadeIn my-1" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>}
        { (envData.workplaceExposures || []).includes('radiation') && !isNoneWorkExposureSelected && <InputField label="Detail Radiasi:" name="workplaceRadiationDetail" value={envData.workplaceRadiationDetail || ''} onChange={handleFieldChange} className="animate-fadeIn my-1" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>}
        { (envData.workplaceExposures || []).includes('other') && !isNoneWorkExposureSelected && <InputField label="Detail Paparan Lainnya di Kerja:" name="workplaceOtherExposuresDetail" value={envData.workplaceOtherExposuresDetail || ''} onChange={handleFieldChange} className="animate-fadeIn my-1" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>}

        <TextareaField label="Hobi dengan Potensi Paparan Toksin:" name="hobbiesToxicExposure" value={envData.hobbiesToxicExposure || ''} onChange={handleFieldChange} placeholder="Contoh: Berkebun dengan pestisida, melukis cat minyak" rows={2} className="mt-3" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>
      </fieldset>

      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Penggunaan Produk & Konsumsi</legend>
        <SelectField label="Penggunaan Produk Perawatan Diri (kosmetik, sabun, sampo, dll) - Perhatian pada Kandungan:" name="personalCareProductsAwareness" options={PRODUCT_AWARENESS_OPTIONS} value={envData.personalCareProductsAwareness || ''} onChange={(e) => handleRadioOrSelectChange('personalCareProductsAwareness', e.target.value)}/>
        <SelectField label="Preferensi Merek/Jenis Produk Perawatan Diri:" name="personalCareProductsPreference" options={PERSONAL_CARE_PREFERENCE_OPTIONS} value={envData.personalCareProductsPreference || ''} onChange={(e) => handleRadioOrSelectChange('personalCareProductsPreference', e.target.value)}/>
        <SelectField label="Preferensi Merek/Jenis Produk Pembersih Rumah Tangga:" name="cleaningProductsPreference" options={CLEANING_PRODUCT_PREFERENCE_OPTIONS} value={envData.cleaningProductsPreference || ''} onChange={(e) => handleRadioOrSelectChange('cleaningProductsPreference', e.target.value)} className="mt-3"/>
        
        <SelectField label="Menyimpan makanan di wadah plastik:" name="plasticFoodStorage" options={PLASTIC_USAGE_FREQUENCY_OPTIONS.filter(o => o.value !=='never')} value={envData.plasticFoodStorage || ''} onChange={(e) => handleRadioOrSelectChange('plasticFoodStorage', e.target.value)} className="mt-3"/>
        <SelectField label="Memanaskan makanan dalam wadah plastik di microwave:" name="plasticMicrowaving" options={PLASTIC_USAGE_FREQUENCY_OPTIONS.filter(o => o.value !=='rarely_glass_stainless')} value={envData.plasticMicrowaving || ''} onChange={(e) => handleRadioOrSelectChange('plasticMicrowaving', e.target.value)} />
        <SelectField label="Minum dari botol plastik sekali pakai:" name="plasticBottleDrinking" options={PLASTIC_USAGE_FREQUENCY_OPTIONS.filter(o => o.value !=='never' && o.value !=='rarely_glass_stainless')} value={envData.plasticBottleDrinking || ''} onChange={(e) => handleRadioOrSelectChange('plasticBottleDrinking', e.target.value)} />
        <SelectField label="Konsumsi Ikan Laut Dalam Ukuran Besar (Tuna, Todak, Makarel Raja):" name="largeFishConsumption" options={FISH_CONSUMPTION_FREQUENCY_OPTIONS} value={envData.largeFishConsumption || ''} onChange={(e) => handleRadioOrSelectChange('largeFishConsumption', e.target.value)} className="mt-3"/>
      </fieldset>

      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Paparan Lainnya</legend>
        <p className="block text-sm font-medium text-text-primary mb-2">Riwayat Tambalan Gigi Amalgam (berwarna perak):</p>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-2">
            {YES_NO_UNKNOWN_OPTIONS.map(opt => <RadioCard key={opt.value} id={`amalgam-${opt.value}`} name="amalgamFillings" value={opt.value} checkedValue={envData.amalgamFillings} onChange={(v) => handleRadioOrSelectChange('amalgamFillings',v)} labelText={opt.label}/>)}
        </div>
        {envData.amalgamFillings === 'yes' && (
            <div className="animate-fadeIn space-y-3 mt-2">
                <InputField label="Perkiraan Jumlah Tambalan Amalgam:" name="amalgamFillingsCount" value={envData.amalgamFillingsCount || ''} onChange={handleFieldChange} type="number" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>
                <p className="block text-sm font-medium text-text-primary mb-1">Apakah masih ada tambalan amalgam saat ini?</p>
                <div className="grid grid-cols-2 gap-4 mb-2">
                    <RadioCard id="amalgamPresentYes" name="amalgamFillingsStillPresent" value="yes" checkedValue={envData.amalgamFillingsStillPresent} onChange={(v) => handleRadioOrSelectChange('amalgamFillingsStillPresent',v)} labelText="Ya, masih ada"/>
                    <RadioCard id="amalgamPresentNo" name="amalgamFillingsStillPresent" value="no_removed" checkedValue={envData.amalgamFillingsStillPresent} onChange={(v) => handleRadioOrSelectChange('amalgamFillingsStillPresent',v)} labelText="Tidak, sudah dilepas"/>
                </div>
                {envData.amalgamFillingsStillPresent === 'no_removed' && (
                     <InputField label="Kapan tambalan amalgam dilepas?" name="amalgamFillingsRemovedDate" value={envData.amalgamFillingsRemovedDate || ''} onChange={handleFieldChange} placeholder="Bulan/Tahun" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>
                )}
            </div>
        )}
        <InputField label="Rata-rata penggunaan ponsel/gadget per hari (total jam):" name="dailyGadgetUsageHours" type="number" value={envData.dailyGadgetUsageHours || ''} onChange={handleFieldChange} placeholder="Contoh: 5" className="mt-3" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>
        <p className="block text-sm font-medium text-text-primary mt-3 mb-2">Apakah ponsel/gadget sering diletakkan dekat tubuh (saku, bra) atau dekat kepala saat tidur?</p>
        <div className="grid grid-cols-2 gap-4 mb-2"><RadioCard id="gadgetProximityYes" name="gadgetProximityToBody" value="yes" checkedValue={envData.gadgetProximityToBody} onChange={(v) => handleRadioOrSelectChange('gadgetProximityToBody',v)} labelText="Ya"/> <RadioCard id="gadgetProximityNo" name="gadgetProximityToBody" value="no" checkedValue={envData.gadgetProximityToBody} onChange={(v) => handleRadioOrSelectChange('gadgetProximityToBody',v)} labelText="Tidak"/></div>
        <p className="block text-sm font-medium text-text-primary mt-3 mb-2">Apakah tempat tinggal/kerja Anda sangat dekat (&lt;100-200m) dengan Menara BTS Seluler atau SUTET?</p>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-2">
            {YES_NO_UNKNOWN_OPTIONS.map(opt => <RadioCard key={opt.value} id={`towerProximity-${opt.value}`} name="proximityToTowersSUTET" value={opt.value} checkedValue={envData.proximityToTowersSUTET} onChange={(v) => handleRadioOrSelectChange('proximityToTowersSUTET',v)} labelText={opt.label}/>)}
        </div>
        <TextareaField label="Riwayat Perjalanan ke Daerah Endemik Penyakit Tertentu (5 tahun terakhir):" name="travelToEndemicAreas" value={envData.travelToEndemicAreas || ''} onChange={handleFieldChange} placeholder="Sebutkan Negara/Wilayah & Tahun" rows={2} className="mt-3" showEmptyOptions onEmptyReasonSelect={(name,reason)=>handleEmptyReasonSelect(name as keyof EnvironmentalExposuresData, reason)}/>
      </fieldset>
    </div>
  );
};

export default Section11EnvironmentExposures;

// comprehensive-health-questionnaire//components/formSections/SpecialDietEntryRow.tsx

import React from 'react';
import { SpecialDietEntry } from '../../types';
import { SPECIAL_DIET_NAME_OPTIONS } from '../../constants';
import SelectField from '../common/SelectField';
import InputField from '../common/InputField';
import TextareaField from '../common/TextareaField';
import Button from '../common/Button';

interface SpecialDietEntryRowProps {
  entry: SpecialDietEntry;
  index: number;
  onChange: (id: string, changes: Partial<Omit<SpecialDietEntry, 'id'>>) => void;
  onRemove: (id: string) => void;
}

const SpecialDietEntryRow: React.FC<SpecialDietEntryRowProps> = ({ entry, index, onChange, onRemove }) => {
  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    const changes: Partial<Omit<SpecialDietEntry, 'id'>> = { [name]: value };

    // If dietName is changed to something other than 'other', clear dietNameOther
    if (name === 'dietName' && value !== 'other') {
      changes.dietNameOther = '';
    }
    
    onChange(entry.id, changes);
  };
  
  const showOtherDietNameInput = entry.dietName === 'other';
  const showEliminatedFoodsInput = entry.dietName === 'elimination';


  return (
    <div className="p-4 border border-border-color rounded-lg mb-4 bg-gray-50 shadow-sm relative animate-fadeIn">
      <div className="flex justify-between items-start mb-3">
        <h4 className="font-semibold text-text-secondary pt-2">Diet Khusus #{index + 1}</h4>
        <Button 
          onClick={() => onRemove(entry.id)} 
          variant="danger" 
          size="sm"
          title={`Hapus diet #${index + 1}`}
          className="absolute top-3 right-3"
        >
          Hapus
        </Button>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <SelectField
          label="Nama Diet Khusus"
          name="dietName"
          value={entry.dietName}
          onChange={handleFieldChange}
          options={SPECIAL_DIET_NAME_OPTIONS}
          required
        />
        {showOtherDietNameInput && (
          <InputField
            label="Sebutkan Nama Diet Lainnya"
            name="dietNameOther"
            value={entry.dietNameOther || ''}
            onChange={handleFieldChange}
            placeholder="Contoh: Diet GAPS"
            required={showOtherDietNameInput}
            className="animate-slideInRight"
          />
        )}
        <InputField
          label="Durasi Diet"
          name="duration"
          value={entry.duration}
          onChange={handleFieldChange}
          placeholder="Contoh: 3 bulan / Sedang berjalan"
          required
        />
      </div>
      {showEliminatedFoodsInput && (
        <TextareaField
          label="Makanan yang Dieliminasi"
          name="eliminatedFoods"
          value={entry.eliminatedFoods || ''}
          onChange={handleFieldChange}
          placeholder="Sebutkan makanan yang dihindari/dieliminasi dalam diet ini"
          rows={2}
          required={showEliminatedFoodsInput}
          className="mt-4 animate-slideInRight"
        />
      )}
    </div>
  );
};

export default SpecialDietEntryRow;

// comprehensive-health-questionnaire//components/formSections/Section5_FamilyHistory.tsx

import React from 'react';
import { useFormContext } from '../../contexts/FormContext';
import { FamilyHistoryEntry, FormData } from '../../types';
import Button from '../common/Button';
import FamilyHistoryEntryRow from './FamilyHistoryEntryRow'; // Create this component

const Section5FamilyHistory: React.FC = () => {
  const { formData, updateFormData } = useFormContext();
  const familyHistory = formData.familyHistory || [];

  const addFamilyHistoryEntry = () => {
    const newEntry: FamilyHistoryEntry = {
      id: crypto.randomUUID(),
      conditionCategory: '',
      conditionDetails: '',
      relationship: '',
      ageOfDiagnosis: '',
    };
    updateFormData('familyHistory', [...familyHistory, newEntry]);
  };

  const removeFamilyHistoryEntry = (id: string) => {
    const updatedHistory = familyHistory.filter(entry => entry.id !== id);
    updateFormData('familyHistory', updatedHistory);
  };

  const handleFamilyHistoryChange = (id: string, field: keyof Omit<FamilyHistoryEntry, 'id'>, value: string) => {
    const updatedHistory = familyHistory.map(entry =>
      entry.id === id ? { ...entry, [field]: value } : entry
    );
    // If conditionCategory changes, and it no longer requires details, clear details.
    if (field === 'conditionCategory') {
        const entryToUpdate = updatedHistory.find(e => e.id === id);
        if (entryToUpdate && !CATEGORIES_REQUIRING_DETAILS.includes(value)) {
            entryToUpdate.conditionDetails = '';
        }
    }
    updateFormData('familyHistory', updatedHistory);
  };
  
  // To import CATEGORIES_REQUIRING_DETAILS
  const CATEGORIES_REQUIRING_DETAILS = [
    'autoimmune',
    'cancer',
    'thyroid',
    'digestive',
    'neurological',
    'mental_health',
    'other',
  ];


  return (
    <div>
      
      {familyHistory.length === 0 && (
        <div className="text-center py-6 px-4 border-2 border-dashed border-border-color rounded-lg bg-background">
          <p className="text-text-secondary mb-3">Belum ada riwayat kesehatan keluarga yang dicatat.</p>
          <p className="text-text-secondary mb-4">Klik tombol di bawah untuk menambahkan riwayat pertama.</p>
        </div>
      )}

      <div className="space-y-4 mt-4 mb-6">
        {familyHistory.map((entry, index) => (
          <FamilyHistoryEntryRow
            key={entry.id}
            entry={entry}
            index={index}
            onChange={handleFamilyHistoryChange}
            onRemove={removeFamilyHistoryEntry}
          />
        ))}
      </div>

      <Button onClick={addFamilyHistoryEntry} variant="secondary" icon={
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
          <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
        </svg>
      }>
        Tambah Riwayat Keluarga
      </Button>
      {familyHistory.length > 0 && <p className="mt-2 text-xs text-text-secondary">Anda dapat menambahkan beberapa kondisi untuk keluarga yang sama dengan membuat entri baru.</p>}
    </div>
  );
};

export default Section5FamilyHistory;

// comprehensive-health-questionnaire//components/formSections/Section10_Lifestyle_Stress.tsx

import React from 'react';
import { useFormContext } from '../../contexts/FormContext';
import { FormData, StressEmotionalHealthData, EmptyReason } from '../../types';
import {
  YES_NO_OPTIONS,
  STRESS_SOURCES_OPTIONS,
  STRESS_MANAGEMENT_TECHNIQUES_OPTIONS,
  EFFECTIVENESS_RATING_OPTIONS,
  SOCIALIZING_FREQUENCY_OPTIONS,
  SPIRITUAL_PRACTICE_BENEFIT_OPTIONS,
  SETTING_BOUNDARIES_DIFFICULTY_OPTIONS,
  LIFE_OUTLOOK_OPTIONS
} from '../../constants';
import InputField from '../common/InputField';
import TextareaField from '../common/TextareaField';
import SelectField from '../common/SelectField';
import CheckboxCard from '../common/CheckboxCard';
import RadioCard from '../common/RadioCard';

const Section10LifestyleStress: React.FC = () => {
  const { formData, updateFormData } = useFormContext();
  const stressData = formData.stressEmotionalHealth || {} as StressEmotionalHealthData;

  const handleStressDataChange = (field: keyof StressEmotionalHealthData, value: any) => {
    updateFormData('stressEmotionalHealth', { ...stressData, [field]: value });
  };

  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    const fieldName = name as keyof StressEmotionalHealthData;
    
    if (e.target.type === 'range' && fieldName === 'avgStressLevel') {
      handleStressDataChange(fieldName, parseInt(value, 10));
    } else {
      handleStressDataChange(fieldName, value);
    }
  };
  
  const handleRadioOrSelectChange = (name: keyof StressEmotionalHealthData, value: string | number) => {
    handleStressDataChange(name, value);
    if (name === 'mentalHealthConsultation' && value === 'no') {
        handleStressDataChange('mentalHealthConsultationDetails', '');
    }
  };

  const handleCheckboxChange = (groupName: keyof StressEmotionalHealthData, value: string, isChecked: boolean) => {
    const currentValues = (stressData[groupName] as string[] || []);
    let updatedValues: string[];

    if (isChecked) {
      updatedValues = [...currentValues, value];
    } else {
      updatedValues = currentValues.filter(item => item !== value);
    }
    handleStressDataChange(groupName, updatedValues);

    // Clear conditional fields if "other" or specific techniques are unchecked
    if (groupName === 'mainStressSources' && value === 'other' && !isChecked) {
        handleStressDataChange('mainStressSourcesOther', '');
    }
    if (groupName === 'stressManagementTechniquesSelected') {
        if (value === 'hobbies' && !isChecked) handleStressDataChange('hobbiesSpecify', '');
        if (value === 'other' && !isChecked) {
            handleStressDataChange('otherStressTechniqueName', '');
            handleStressDataChange('otherStressTechniqueEffectiveness', undefined);
        }
        // Clear effectiveness if technique is unchecked
        const effectivenessField = `${value}Effectiveness` as keyof StressEmotionalHealthData;
        if (!isChecked && STRESS_MANAGEMENT_TECHNIQUES_OPTIONS.find(opt => opt.value === value && value !== 'other' && value !== 'hobbies')) {
            handleStressDataChange(effectivenessField, undefined);
        }
    }
  };
  
  const handleEmptyReasonSelect = (fieldName: keyof StressEmotionalHealthData, reason: EmptyReason) => {
    handleStressDataChange(`${fieldName}_empty_reason` as any, reason);
    handleStressDataChange(fieldName, '');
  };

  return (
    <div>

      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Tingkat & Sumber Stres</legend>
        <div>
            <label htmlFor="avgStressLevel" className="block text-sm font-medium text-text-primary mb-1">Tingkat Stres Rata-rata (Sebulan Terakhir, 0: Tidak Stres - 10: Sangat Stres)</label>
            <div className="flex items-center gap-4 mt-2">
                <input id="avgStressLevel" name="avgStressLevel" type="range" min="0" max="10" step="1" value={stressData.avgStressLevel === undefined ? 5 : stressData.avgStressLevel} onChange={handleFieldChange} className="range-slider w-full h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer focus:outline-none focus:ring-2 focus:ring-primary/50" />
                <span className="text-lg font-semibold text-primary w-12 text-center p-2 bg-primary/10 rounded-md">{stressData.avgStressLevel !== undefined ? stressData.avgStressLevel : 5}</span>
            </div>
        </div>
        <p className="block text-sm font-medium text-text-primary mt-4 mb-2">Sumber Stres Utama Saat Ini (Centang semua yang relevan):</p>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 mb-2">
          {STRESS_SOURCES_OPTIONS.map(opt => (
            <CheckboxCard key={opt.value} id={`stressSource-${opt.value}`} name="mainStressSources" value={opt.value} checked={(stressData.mainStressSources || []).includes(opt.value)} onChange={(val, ischk) => handleCheckboxChange('mainStressSources', val, ischk)} labelText={opt.label} />
          ))}
        </div>
        {(stressData.mainStressSources || []).includes('other') && (
            <InputField label="Jelaskan Sumber Stres Lainnya:" name="mainStressSourcesOther" value={stressData.mainStressSourcesOther || ''} onChange={handleFieldChange} className="animate-fadeIn" showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof StressEmotionalHealthData, reason)} />
        )}
        <TextareaField label="Bagaimana Stres Mempengaruhi Anda Secara Fisik?" name="stressPhysicalSymptoms" value={stressData.stressPhysicalSymptoms || ''} onChange={handleFieldChange} placeholder="Contoh: sakit kepala, tegang otot, masalah pencernaan" rows={2} className="mt-3" showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof StressEmotionalHealthData, reason)}/>
        <TextareaField label="Bagaimana Stres Mempengaruhi Anda Secara Emosional/Mental?" name="stressEmotionalSymptoms" value={stressData.stressEmotionalSymptoms || ''} onChange={handleFieldChange} placeholder="Contoh: mudah marah, cemas, sulit konsentrasi" rows={2} className="mt-3" showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof StressEmotionalHealthData, reason)}/>
      </fieldset>

      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Teknik Manajemen Stres</legend>
        <p className="block text-sm font-medium text-text-primary mb-2">Teknik yang Biasa Digunakan & Seberapa Efektif (Skala 0-5):</p>
        {STRESS_MANAGEMENT_TECHNIQUES_OPTIONS.map(opt => {
          const isChecked = (stressData.stressManagementTechniquesSelected || []).includes(opt.value);
          const effectivenessField = `${opt.value}Effectiveness` as keyof StressEmotionalHealthData;
          return (
            <div key={opt.value} className="mb-3 p-3 border border-gray-200 rounded-md">
              <CheckboxCard id={`stressTech-${opt.value}`} name="stressManagementTechniquesSelected" value={opt.value} checked={isChecked} onChange={(val, ischk) => handleCheckboxChange('stressManagementTechniquesSelected', val, ischk)} labelText={opt.label} />
              {isChecked && (
                <div className="mt-2 pl-6 animate-fadeIn space-y-2">
                  {opt.value === 'hobbies' && (
                    <InputField label="Sebutkan Hobi Anda:" name="hobbiesSpecify" value={stressData.hobbiesSpecify || ''} onChange={handleFieldChange} showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof StressEmotionalHealthData, reason)}/>
                  )}
                  {opt.value === 'other' ? (
                    <>
                      <InputField label="Sebutkan Teknik Lainnya:" name="otherStressTechniqueName" value={stressData.otherStressTechniqueName || ''} onChange={handleFieldChange} showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof StressEmotionalHealthData, reason)}/>
                      <SelectField label="Efektivitas Teknik Lainnya (0-5):" name="otherStressTechniqueEffectiveness" value={String(stressData.otherStressTechniqueEffectiveness ?? '')} options={EFFECTIVENESS_RATING_OPTIONS} onChange={(e) => handleRadioOrSelectChange('otherStressTechniqueEffectiveness', parseInt(e.target.value))} />
                    </>
                  ) : opt.value !== 'hobbies' && ( /* Don't show general effectiveness for 'hobbies' if specific input is there */
                     <SelectField label={`Efektivitas ${opt.label} (0-5):`} name={effectivenessField} value={String(stressData[effectivenessField] ?? '')} options={EFFECTIVENESS_RATING_OPTIONS} onChange={(e) => handleRadioOrSelectChange(effectivenessField, parseInt(e.target.value))} />
                  )}
                </div>
              )}
            </div>
          );
        })}
      </fieldset>

      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Dukungan Sosial & Kehidupan</legend>
        <p className="block text-sm font-medium text-text-primary mb-2">Apakah Anda memiliki seseorang yang dapat dipercaya untuk bicara masalah pribadi?</p>
        <div className="grid grid-cols-2 gap-4 mb-3"><RadioCard id="confidantYes" name="hasConfidant" value="yes" checkedValue={stressData.hasConfidant} onChange={(v) => handleRadioOrSelectChange('hasConfidant',v)} labelText="Ya"/> <RadioCard id="confidantNo" name="hasConfidant" value="no" checkedValue={stressData.hasConfidant} onChange={(v) => handleRadioOrSelectChange('hasConfidant',v)} labelText="Tidak"/></div>
        <SelectField label="Seberapa sering Anda bersosialisasi dengan teman/keluarga (di luar rumah tangga)?" name="socializingFrequency" options={SOCIALIZING_FREQUENCY_OPTIONS} value={stressData.socializingFrequency || ''} onChange={(e) => handleRadioOrSelectChange('socializingFrequency', e.target.value)} />
        <p className="block text-sm font-medium text-text-primary mt-3 mb-2">Apakah Anda merasa menjadi bagian dari suatu komunitas?</p>
        <div className="grid grid-cols-2 gap-4 mb-3"><RadioCard id="communityYes" name="partOfCommunity" value="yes" checkedValue={stressData.partOfCommunity} onChange={(v) => handleRadioOrSelectChange('partOfCommunity',v)} labelText="Ya"/> <RadioCard id="communityNo" name="partOfCommunity" value="no" checkedValue={stressData.partOfCommunity} onChange={(v) => handleRadioOrSelectChange('partOfCommunity',v)} labelText="Tidak"/></div>
        <TextareaField label="Praktik Spiritual/Keagamaan (jika ada dan relevan):" name="spiritualReligiousPractice" value={stressData.spiritualReligiousPractice || ''} onChange={handleFieldChange} rows={2} showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof StressEmotionalHealthData, reason)} />
        <p className="block text-sm font-medium text-text-primary mt-3 mb-2">Apakah ini memberikan Anda kekuatan, kedamaian, atau makna?</p>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-3">
          {SPIRITUAL_PRACTICE_BENEFIT_OPTIONS.map(opt => <RadioCard key={opt.value} id={`spiritualBenefit-${opt.value}`} name="spiritualPracticeProvidesStrength" value={opt.value} checkedValue={stressData.spiritualPracticeProvidesStrength} onChange={(v) => handleRadioOrSelectChange('spiritualPracticeProvidesStrength',v)} labelText={opt.label}/>)}
        </div>
        <SelectField label="Kemampuan Mengatakan 'Tidak' dan Menetapkan Batasan Pribadi:" name="settingBoundariesDifficulty" options={SETTING_BOUNDARIES_DIFFICULTY_OPTIONS} value={stressData.settingBoundariesDifficulty || ''} onChange={(e) => handleRadioOrSelectChange('settingBoundariesDifficulty', e.target.value)} />
        <InputField label="Waktu untuk Relaksasi Murni & Kesenangan Pribadi (per hari/minggu):" name="timeForRelaxation" value={stressData.timeForRelaxation || ''} onChange={handleFieldChange} placeholder="Contoh: 1 jam/hari" showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof StressEmotionalHealthData, reason)} />
        <SelectField label="Perasaan Umum Terhadap Hidup Saat Ini:" name="generalLifeOutlook" options={LIFE_OUTLOOK_OPTIONS} value={stressData.generalLifeOutlook || ''} onChange={(e) => handleRadioOrSelectChange('generalLifeOutlook', e.target.value)} className="mt-3"/>
      </fieldset>

      <fieldset className="mb-6 p-4 border border-gray-300 rounded-md">
        <legend className="text-lg font-semibold text-primary mb-2 px-2">Riwayat Trauma & Konsultasi Mental</legend>
        <TextareaField label="Riwayat Trauma Emosional/Psikologis Signifikan (selain ACEs):" name="significantEmotionalTrauma" value={stressData.significantEmotionalTrauma || ''} onChange={handleFieldChange} placeholder="Contoh: Kecelakaan berat, kehilangan mendadak" rows={2} showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof StressEmotionalHealthData, reason)} />
        <p className="block text-sm font-medium text-text-primary mt-3 mb-2">Pernah Berkonsultasi atau Menjalani Terapi Kesehatan Mental Profesional?</p>
        <div className="grid grid-cols-2 gap-4 mb-2">
            <RadioCard id="mentalConsultYes" name="mentalHealthConsultation" value="yes" checkedValue={stressData.mentalHealthConsultation} onChange={(v) => handleRadioOrSelectChange('mentalHealthConsultation',v)} labelText="Ya"/>
            <RadioCard id="mentalConsultNo" name="mentalHealthConsultation" value="no" checkedValue={stressData.mentalHealthConsultation} onChange={(v) => handleRadioOrSelectChange('mentalHealthConsultation',v)} labelText="Tidak"/>
        </div>
        {stressData.mentalHealthConsultation === 'yes' && (
            <TextareaField label="Detail Konsultasi Kesehatan Mental:" name="mentalHealthConsultationDetails" value={stressData.mentalHealthConsultationDetails || ''} onChange={handleFieldChange} placeholder="Kapan, Dengan Siapa (Psikolog/Psikiater), Durasi, Apakah membantu?" rows={3} className="animate-fadeIn" showEmptyOptions onEmptyReasonSelect={(name, reason) => handleEmptyReasonSelect(name as keyof StressEmotionalHealthData, reason)}/>
        )}
      </fieldset>
    </div>
  );
};

export default Section10LifestyleStress;

// comprehensive-health-questionnaire//components/formSections/Section4_MedicalHistory.tsx
import React, { useState } from 'react';
import { useFormContext } from '../../contexts/FormContext';
import { FormData, EmptyReason } from '../../types';
import InputField from '../common/InputField';
import TextareaField from '../common/TextareaField';
import Button from '../common/Button';

// Define interfaces for specific condition entries
interface ConditionEntry {
  id: string; // For unique key prop
  condition: string;
  year?: string;
  is_present?: boolean; // Added is_present field
}

const Section4MedicalHistory: React.FC = () => {
  const { formData, updateFormData } = useFormContext();

  // State for managing visibility of each category
  const [showAutoimmune, setShowAutoimmune] = useState(false);
  const [showCardiovascular, setShowCardiovascular] = useState(false);
  const [showEndocrine, setShowEndocrine] = useState(false);
  const [showGastrointestinal, setShowGastrointestinal] = useState(false);
  const [showNeurological, setShowNeurological] = useState(false);
  const [showMusculoskeletal, setShowMusculoskeletal] = useState(false);
  const [showRespiratory, setShowRespiratory] = useState(false);
  const [showSkin, setShowSkin] = useState(false);
  const [showHematology, setShowHematology] = useState(false); // New state for Hematology
  const [showOncology, setShowOncology] = useState(false); // New state for Oncology
  const [showChronicInfections, setShowChronicInfections] = useState(false);

  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    updateFormData(name as keyof FormData, value);
  };

  // Handler for condition lists (Autoimun, Kardiovaskular, etc.)
  const handleConditionListChange = (
    categoryKey: keyof Pick<FormData['medicalConditions'], 'autoimmune' | 'cardiovascular' | 'endocrine' | 'gastrointestinal' | 'neurological' | 'musculoskeletal' | 'respiratory' | 'skin'>,
    index: number,
    field: keyof ConditionEntry, // 'condition', 'year', or 'is_present'
    value: any // Use any for value as it can be string or boolean
  ) => {
    const currentCategoryList = (formData.medicalConditions?.[categoryKey] as ConditionEntry[] | undefined) || [];
    const updatedList = currentCategoryList.map((item, i) =>
      i === index ? { ...item, [field]: value } : item
    );
    updateFormData('medicalConditions', {
      ...formData.medicalConditions,
      [categoryKey]: updatedList,
    });
  };

  // Handler for Hematology specific fields
  const handleHematologyChange = (field: keyof NonNullable<FormData['medicalConditions']['hematology']>, value: any) => {
    updateFormData('medicalConditions', {
      ...(formData.medicalConditions || {}), // Provide default for medicalConditions
      hematology: {
        ...(formData.medicalConditions?.hematology || {}),
        [field]: value,
      },
    });
  };

  // Handler for Oncology specific fields
  const handleOncologyChange = (field: keyof NonNullable<FormData['medicalConditions']['oncology']>, value: any) => {
    updateFormData('medicalConditions', {
      ...(formData.medicalConditions || {}), // Provide default for medicalConditions
      oncology: {
        ...(formData.medicalConditions?.oncology || {}),
        [field]: value,
      },
    });
  };

  // Handler for Chronic Infections specific fields
  const handleChronicInfectionsChange = (field: keyof NonNullable<FormData['medicalConditions']['chronicInfections']>, value: any) => {
    updateFormData('medicalConditions', {
      ...(formData.medicalConditions || {}), // Provide default for medicalConditions
      chronicInfections: {
        ...(formData.medicalConditions?.chronicInfections || {}),
        [field]: value,
      },
    });
  };

  const addConditionEntry = (categoryKey: keyof Pick<FormData['medicalConditions'], 'autoimmune' | 'cardiovascular' | 'endocrine' | 'gastrointestinal' | 'neurological' | 'musculoskeletal' | 'respiratory' | 'skin'>) => {
    const currentCategoryList = (formData.medicalConditions?.[categoryKey] as ConditionEntry[] | undefined) || [];
    const newEntry: ConditionEntry = { id: crypto.randomUUID(), condition: '', year: '', is_present: true }; // Added is_present default
    updateFormData('medicalConditions', {
      ...formData.medicalConditions,
      [categoryKey]: [...currentCategoryList, newEntry],
    });
  };

  const removeConditionEntry = (categoryKey: keyof Pick<FormData['medicalConditions'], 'autoimmune' | 'cardiovascular' | 'endocrine' | 'gastrointestinal' | 'neurological' | 'musculoskeletal' | 'respiratory' | 'skin'>, index: number) => {
    const currentCategoryList = (formData.medicalConditions?.[categoryKey] as ConditionEntry[] | undefined) || [];
    const updatedList = currentCategoryList.filter((_, i) => i !== index);
    updateFormData('medicalConditions', {
      ...formData.medicalConditions,
      [categoryKey]: updatedList,
    });
  };

  const handleBloodTransfusionChange = (field: keyof NonNullable<FormData['bloodTransfusion']>, value: any) => {
    updateFormData('bloodTransfusion', {
      ...formData.bloodTransfusion,
      [field]: value,
    });
  };

  const handleEmptyReasonSelect = (fieldName: string, reason: EmptyReason) => {
    updateFormData(`${fieldName}_empty_reason`, reason);
    // For nested fields, ensure the path is correct
    if (fieldName.startsWith('medicalConditions.')) {
      const parts = fieldName.split('.');
      if (parts.length === 3) { // e.g. medicalConditions.hematology.anemiaType
        // This case is handled by specific handlers, not here.
      } else if (parts.length === 2 && (parts[1].endsWith('Other') || parts[1].endsWith('Reactions'))) {
         // e.g. medicalConditions.autoimmuneOther or adultVaccinationsReactions
         updateFormData(parts[1] as keyof FormData, '');
      }
    } else {
      updateFormData(fieldName as keyof FormData, '');
    }
  };

  // Helper to render a list of condition inputs for categories with arrays
  const renderConditionListInputs = (
    categoryName: string,
    categoryKey: keyof Pick<FormData['medicalConditions'], 'autoimmune' | 'cardiovascular' | 'endocrine' | 'gastrointestinal' | 'neurological' | 'musculoskeletal' | 'respiratory' | 'skin'>
  ) => {
    const conditions = (formData.medicalConditions?.[categoryKey] as ConditionEntry[] | undefined) || [];
    const otherTextKey = `${categoryKey}Other` as keyof NonNullable<FormData['medicalConditions']>;
    const otherTextValue = formData.medicalConditions?.[otherTextKey] as string || '';

    return (
      <div className="mb-6 p-4 border border-primary/20 rounded-lg bg-primary/5">
        {conditions.map((entry, index) => (
          <div key={entry.id} className="flex items-center gap-2 mb-2 p-2 border border-dashed border-primary/30 rounded">
            <InputField
              label={`Kondisi ${index + 1}`}
              name={`${categoryKey}-${index}-condition`} // Unique name for form state management if needed outside context
              value={entry.condition}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleConditionListChange(categoryKey, index, 'condition', e.target.value)}
              placeholder="Nama kondisi"
              className="flex-grow"
            />
            <InputField
              label="Tahun Diagnosis"
              name={`${categoryKey}-${index}-year`} // Unique name for form state management if needed outside context
              value={entry.year || ''}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleConditionListChange(categoryKey, index, 'year', e.target.value)}
              placeholder="YYYY"
              className="w-28"
            />
            <div className="flex items-center mt-6">
              <label className="flex items-center text-sm text-text-secondary mr-2">
                Saat Ini Masih Ada?
              </label>
              <input
                type="checkbox"
                className="form-checkbox h-4 w-4 text-primary-600"
                checked={entry.is_present || false}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleConditionListChange(categoryKey, index, 'is_present', e.target.checked)}
              />
            </div>
            <Button
              onClick={() => removeConditionEntry(categoryKey, index)}
              variant="outline"
              size="sm"
              className="mt-6"
            >
              Hapus
            </Button>
          </div>
        ))}
        <Button onClick={() => addConditionEntry(categoryKey)} variant="outline" size="sm" className="mb-3">
          + Tambah Kondisi {categoryName}
        </Button>
        <TextareaField
          label={`Lainnya (untuk ${categoryName})`}
          name={`medicalConditions.${otherTextKey}`} // Correct name for updateFormData
          value={otherTextValue}
          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => updateFormData('medicalConditions', { ...formData.medicalConditions, [otherTextKey]: e.target.value })}
          placeholder={`Sebutkan kondisi ${categoryName} lainnya...`}
          rows={2}
          showEmptyOptions
          onEmptyReasonSelect={(name: string, reason: EmptyReason) => handleEmptyReasonSelect(name, reason)}
        />
      </div>
    );
  };

  return (
    <div>

      {/* Medical Conditions Categories */}
      <p className="block text-sm font-medium text-text-primary mb-1 mt-4">
        Penyakit/kondisi yang pernah atau sedang diderita pasien:
      </p>
      <p className="text-xs text-text-secondary mb-3">Isi kondisi yang relevan dan tahun diagnosis jika diketahui. Centang kotak di sebelah nama kategori untuk melihat dan mengisi detailnya. Kosongkan jika tidak ada.</p>

      {/* Autoimun */}
      <div className="mb-4">
        <label className="flex items-center cursor-pointer">
          <input
            type="checkbox"
            className="form-checkbox h-5 w-5 text-primary-600 mr-2"
            checked={showAutoimmune}
            onChange={() => setShowAutoimmune(!showAutoimmune)}
          />
          <span className="text-md font-semibold text-text-primary">Autoimun</span>
        </label>
        {showAutoimmune && renderConditionListInputs('Autoimun', 'autoimmune')}
      </div>

      {/* Kardiovaskular */}
      <div className="mb-4">
        <label className="flex items-center cursor-pointer">
          <input
            type="checkbox"
            className="form-checkbox h-5 w-5 text-primary-600 mr-2"
            checked={showCardiovascular}
            onChange={() => setShowCardiovascular(!showCardiovascular)}
          />
          <span className="text-md font-semibold text-text-primary">Kardiovaskular</span>
        </label>
        {showCardiovascular && renderConditionListInputs('Kardiovaskular', 'cardiovascular')}
      </div>

      {/* Endokrin */}
      <div className="mb-4">
        <label className="flex items-center cursor-pointer">
          <input
            type="checkbox"
            className="form-checkbox h-5 w-5 text-primary-600 mr-2"
            checked={showEndocrine}
            onChange={() => setShowEndocrine(!showEndocrine)}
          />
          <span className="text-md font-semibold text-text-primary">Metabolik/Endokrin</span>
        </label>
        {showEndocrine && renderConditionListInputs('Metabolik/Endokrin', 'endocrine')}
      </div>

      {/* Gastrointestinal */}
      <div className="mb-4">
        <label className="flex items-center cursor-pointer">
          <input
            type="checkbox"
            className="form-checkbox h-5 w-5 text-primary-600 mr-2"
            checked={showGastrointestinal}
            onChange={() => setShowGastrointestinal(!showGastrointestinal)}
          />
          <span className="text-md font-semibold text-text-primary">Pencernaan</span>
        </label>
        {showGastrointestinal && renderConditionListInputs('Pencernaan', 'gastrointestinal')}
      </div>

      {/* Neurologis */}
      <div className="mb-4">
        <label className="flex items-center cursor-pointer">
          <input
            type="checkbox"
            className="form-checkbox h-5 w-5 text-primary-600 mr-2"
            checked={showNeurological}
            onChange={() => setShowNeurological(!showNeurological)}
          />
          <span className="text-md font-semibold text-text-primary">Neurologis</span>
        </label>
        {showNeurological && renderConditionListInputs('Neurologis', 'neurological')}
      </div>

      {/* Muskuloskeletal */}
      <div className="mb-4">
        <label className="flex items-center cursor-pointer">
          <input
            type="checkbox"
            className="form-checkbox h-5 w-5 text-primary-600 mr-2"
            checked={showMusculoskeletal}
            onChange={() => setShowMusculoskeletal(!showMusculoskeletal)}
          />
          <span className="text-md font-semibold text-text-primary">Muskuloskeletal</span>
        </label>
        {showMusculoskeletal && renderConditionListInputs('Muskuloskeletal', 'musculoskeletal')}
      </div>

      {/* Respiratori/Pernapasan */}
      <div className="mb-4">
        <label className="flex items-center cursor-pointer">
          <input
            type="checkbox"
            className="form-checkbox h-5 w-5 text-primary-600 mr-2"
            checked={showRespiratory}
            onChange={() => setShowRespiratory(!showRespiratory)}
          />
          <span className="text-md font-semibold text-text-primary">Pernapasan</span>
        </label>
        {showRespiratory && renderConditionListInputs('Pernapasan', 'respiratory')}
      </div>

      {/* Kulit */}
      <div className="mb-4">
        <label className="flex items-center cursor-pointer">
          <input
            type="checkbox"
            className="form-checkbox h-5 w-5 text-primary-600 mr-2"
            checked={showSkin}
            onChange={() => setShowSkin(!showSkin)}
          />
          <span className="text-md font-semibold text-text-primary">Kulit</span>
        </label>
        {showSkin && renderConditionListInputs('Kulit', 'skin')}
      </div>

      {/* Hematologi - Split from Hematologi/Onkologi */}
      <div className="mb-4">
        <label className="flex items-center cursor-pointer">
          <input
            type="checkbox"
            className="form-checkbox h-5 w-5 text-primary-600 mr-2"
            checked={showHematology}
            onChange={() => setShowHematology(!showHematology)}
          />
          <span className="text-md font-semibold text-text-primary">Hematologi</span>
        </label>
        {showHematology && (
          <div className="mb-6 p-4 border border-primary/20 rounded-lg bg-primary/5">
            {/* Hematologi specific fields will go here */}
            {/* Anemia */}
            <div className="flex items-center gap-2 mb-2 p-2 border border-dashed border-primary/30 rounded">
              <InputField
                label="Anemia (Jenis)"
                name="medicalConditions.hematology.anemiaType"
                value={formData.medicalConditions?.hematology?.anemiaType || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleHematologyChange('anemiaType', e.target.value)}
                placeholder="Jenis anemia"
                className="flex-grow"
              />
              <InputField
                label="Tahun Diagnosis"
                name="medicalConditions.hematology.anemiaYear"
                value={formData.medicalConditions?.hematology?.anemiaYear || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleHematologyChange('anemiaYear', e.target.value)}
                placeholder="YYYY"
                className="w-28"
              />
               {/* Add "Saat Ini Masih Ada?" question here */}
              <div className="flex items-center mt-6">
                <label className="flex items-center text-sm text-text-secondary mr-2">
                  Saat Ini Masih Ada?
                </label>
                <input
                  type="checkbox"
                  className="form-checkbox h-4 w-4 text-primary-600"
                  checked={formData.medicalConditions?.hematology?.anemiaIsPresent || false}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleHematologyChange('anemiaIsPresent', e.target.checked)}
                />
              </div>
            </div>
            {/* Gangguan Pembekuan Darah */}
             <div className="flex items-center gap-2 mb-2 p-2 border border-dashed border-primary/30 rounded">
              <InputField
                label="Gangguan Pembekuan Darah (Jenis)"
                name="medicalConditions.hematology.clottingDisorderType"
                value={formData.medicalConditions?.hematology?.clottingDisorderType || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleHematologyChange('clottingDisorderType', e.target.value)}
                placeholder="Jenis gangguan"
                 className="flex-grow"
              />
              <InputField
                label="Tahun Diagnosis"
                name="medicalConditions.hematology.clottingDisorderYear"
                value={formData.medicalConditions?.hematology?.clottingDisorderYear || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleHematologyChange('clottingDisorderYear', e.target.value)}
                placeholder="YYYY"
                 className="w-28"
              />
               {/* Add "Saat Ini Masih Ada?" question here */}
              <div className="flex items-center mt-6">
                <label className="flex items-center text-sm text-text-secondary mr-2">
                  Saat Ini Masih Ada?
                </label>
                <input
                  type="checkbox"
                  className="form-checkbox h-4 w-4 text-primary-600"
                  checked={formData.medicalConditions?.hematology?.clottingDisorderIsPresent || false}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleHematologyChange('clottingDisorderIsPresent', e.target.checked)}
                />
              </div>
            </div>
             <TextareaField
              label="Lainnya (Hematologi)"
              name="medicalConditions.hematologyOther"
              value={formData.medicalConditions?.hematologyOther || ''}
              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => updateFormData('medicalConditions', { ...formData.medicalConditions, hematologyOther: e.target.value })}
              placeholder="Sebutkan kondisi hematologi lainnya..."
              rows={2}
              showEmptyOptions
              onEmptyReasonSelect={(name: string, reason: EmptyReason) => handleEmptyReasonSelect(name, reason)}
            />
          </div>
        )}
      </div>

      {/* Onkologi - Split from Hematologi/Onkologi */}
       <div className="mb-4">
        <label className="flex items-center cursor-pointer">
          <input
            type="checkbox"
            className="form-checkbox h-5 w-5 text-primary-600 mr-2"
            checked={showOncology}
            onChange={() => setShowOncology(!showOncology)}
          />
          <span className="text-md font-semibold text-text-primary">Onkologi</span>
        </label>
        {showOncology && (
          <div className="mb-6 p-4 border border-primary/20 rounded-lg bg-primary/5">
            {/* Onkologi specific fields will go here */}
             {/* Riwayat Kanker */}
             <div className="flex items-center gap-2 mb-2 p-2 border border-dashed border-primary/30 rounded">
              <InputField
                label="Riwayat Kanker (Jenis)"
                name="medicalConditions.oncology.cancerType"
                value={formData.medicalConditions?.oncology?.cancerType || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleOncologyChange('cancerType', e.target.value)}
                placeholder="Jenis kanker"
                 className="flex-grow"
              />
              <InputField
                label="Tahun Diagnosis"
                name="medicalConditions.oncology.cancerYear"
                value={formData.medicalConditions?.oncology?.cancerYear || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleOncologyChange('cancerYear', e.target.value)}
                placeholder="YYYY"
                 className="w-28"
              />
               {/* Add "Saat Ini Masih Ada?" question here */}
              <div className="flex items-center mt-6">
                <label className="flex items-center text-sm text-text-secondary mr-2">
                  Saat Ini Masih Ada?
                </label>
                <input
                  type="checkbox"
                  className="form-checkbox h-4 w-4 text-primary-600"
                  checked={formData.medicalConditions?.oncology?.cancerIsPresent || false}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleOncologyChange('cancerIsPresent', e.target.checked)}
                />
              </div>
            </div>
             <InputField
              label="Riwayat Kanker (Status Saat Ini)"
              name="medicalConditions.oncology.cancerStatus"
              value={formData.medicalConditions?.oncology?.cancerStatus || ''}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleOncologyChange('cancerStatus', e.target.value)}
              placeholder="Status kanker"
            />
             <TextareaField
              label="Lainnya (Onkologi)"
              name="medicalConditions.oncologyOther"
              value={formData.medicalConditions?.oncologyOther || ''}
              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => updateFormData('medicalConditions', { ...formData.medicalConditions, oncologyOther: e.target.value })}
              placeholder="Sebutkan kondisi onkologi lainnya..."
              rows={2}
              showEmptyOptions
              onEmptyReasonSelect={(name: string, reason: EmptyReason) => handleEmptyReasonSelect(name, reason)}
            />
          </div>
        )}
      </div>


      {/* Infeksi Kronis/Berulang */}
      <div className="mb-4">
        <label className="flex items-center cursor-pointer">
          <input
            type="checkbox"
            className="form-checkbox h-5 w-5 text-primary-600 mr-2"
            checked={showChronicInfections}
            onChange={() => setShowChronicInfections(!showChronicInfections)}
          />
          <span className="text-md font-semibold text-text-primary">Infeksi Kronis/Berulang</span>
        </label>
        {showChronicInfections && (
          <div className="mb-6 p-4 border border-primary/20 rounded-lg bg-primary/5">
            {/* Infeksi Kronis/Berulang specific fields will go here */}
             {/* Penyakit Lyme */}
             <div className="flex items-center gap-2 mb-2 p-2 border border-dashed border-primary/30 rounded">
              <InputField
                label="Penyakit Lyme"
                name="medicalConditions.chronicInfections.lyme"
                value={formData.medicalConditions?.chronicInfections?.lyme || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChronicInfectionsChange('lyme', e.target.value)}
                placeholder="Penyakit Lyme"
                 className="flex-grow"
              />
              <InputField
                label="Tahun Diagnosis"
                name="medicalConditions.chronicInfections.lymeYear"
                value={formData.medicalConditions?.chronicInfections?.lymeYear || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChronicInfectionsChange('lymeYear', e.target.value)}
                placeholder="YYYY"
                 className="w-28"
              />
               {/* Add "Saat Ini Masih Ada?" question here */}
              <div className="flex items-center mt-6">
                <label className="flex items-center text-sm text-text-secondary mr-2">
                  Saat Ini Masih Ada?
                </label>
                <input
                  type="checkbox"
                  className="form-checkbox h-4 w-4 text-primary-600"
                  checked={formData.medicalConditions?.chronicInfections?.lymeIsPresent || false}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChronicInfectionsChange('lymeIsPresent', e.target.checked)}
                />
              </div>
            </div>
             {/* Epstein-Barr Virus (EBV) Kronis */}
             <div className="flex items-center gap-2 mb-2 p-2 border border-dashed border-primary/30 rounded">
              <InputField
                label="Epstein-Barr Virus (EBV) Kronis"
                name="medicalConditions.chronicInfections.ebv"
                value={formData.medicalConditions?.chronicInfections?.ebv || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChronicInfectionsChange('ebv', e.target.value)}
                placeholder="EBV Kronis"
                 className="flex-grow"
              />
              <InputField
                label="Tahun Diagnosis"
                name="medicalConditions.chronicInfections.ebvYear"
                value={formData.medicalConditions?.chronicInfections?.ebvYear || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChronicInfectionsChange('ebvYear', e.target.value)}
                placeholder="YYYY"
                 className="w-28"
              />
               {/* Add "Saat Ini Masih Ada?" question here */}
              <div className="flex items-center mt-6">
                <label className="flex items-center text-sm text-text-secondary mr-2">
                  Saat Ini Masih Ada?
                </label>
                <input
                  type="checkbox"
                  className="form-checkbox h-4 w-4 text-primary-600"
                  checked={formData.medicalConditions?.chronicInfections?.ebvIsPresent || false}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChronicInfectionsChange('ebvIsPresent', e.target.checked)}
                />
              </div>
            </div>
             {/* Herpes Simpleks/Zoster Berulang */}
             <div className="flex items-center gap-2 mb-2 p-2 border border-dashed border-primary/30 rounded">
              <InputField
                label="Herpes Simpleks/Zoster Berulang"
                name="medicalConditions.chronicInfections.herpes"
                value={formData.medicalConditions?.chronicInfections?.herpes || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChronicInfectionsChange('herpes', e.target.value)}
                placeholder="Herpes"
                 className="flex-grow"
              />
              <InputField
                label="Tahun Diagnosis"
                name="medicalConditions.chronicInfections.herpesYear"
                value={formData.medicalConditions?.chronicInfections?.herpesYear || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChronicInfectionsChange('herpesYear', e.target.value)}
                placeholder="YYYY"
                 className="w-28"
              />
               {/* Add "Saat Ini Masih Ada?" question here */}
              <div className="flex items-center mt-6">
                <label className="flex items-center text-sm text-text-secondary mr-2">
                  Saat Ini Masih Ada?
                </label>
                <input
                  type="checkbox"
                  className="form-checkbox h-4 w-4 text-primary-600"
                  checked={formData.medicalConditions?.chronicInfections?.herpesIsPresent || false}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChronicInfectionsChange('herpesIsPresent', e.target.checked)}
                />
              </div>
            </div>
             {/* Infeksi Jamur Sistemik */}
             <div className="flex items-center gap-2 mb-2 p-2 border border-dashed border-primary/30 rounded">
              <InputField
                label="Infeksi Jamur Sistemik"
                name="medicalConditions.chronicInfections.fungal"
                value={formData.medicalConditions?.chronicInfections?.fungal || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChronicInfectionsChange('fungal', e.target.value)}
                placeholder="Infeksi Jamur Sistemik"
                 className="flex-grow"
              />
              <InputField
                label="Tahun Diagnosis"
                name="medicalConditions.chronicInfections.fungalYear"
                value={formData.medicalConditions?.chronicInfections?.fungalYear || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChronicInfectionsChange('fungalYear', e.target.value)}
                placeholder="YYYY"
                 className="w-28"
              />
               {/* Add "Saat Ini Masih Ada?" question here */}
              <div className="flex items-center mt-6">
                <label className="flex items-center text-sm text-text-secondary mr-2">
                  Saat Ini Masih Ada?
                </label>
                <input
                  type="checkbox"
                  className="form-checkbox h-4 w-4 text-primary-600"
                  checked={formData.medicalConditions?.chronicInfections?.fungalIsPresent || false}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChronicInfectionsChange('fungalIsPresent', e.target.checked)}
                />
              </div>
            </div>
             {/* Infeksi Parasit */}
             <div className="flex items-center gap-2 mb-2 p-2 border border-dashed border-primary/30 rounded">
              <InputField
                label="Infeksi Parasit (Jenis)"
                name="medicalConditions.chronicInfections.parasiteType"
                value={formData.medicalConditions?.chronicInfections?.parasiteType || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChronicInfectionsChange('parasiteType', e.target.value)}
                placeholder="Jenis parasit"
                 className="flex-grow"
              />
              <InputField
                label="Tahun Diagnosis"
                name="medicalConditions.chronicInfections.parasiteYear"
                value={formData.medicalConditions?.chronicInfections?.parasiteYear || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChronicInfectionsChange('parasiteYear', e.target.value)}
                placeholder="YYYY"
                 className="w-28"
              />
               {/* Add "Saat Ini Masih Ada?" question here */}
              <div className="flex items-center mt-6">
                <label className="flex items-center text-sm text-text-secondary mr-2">
                  Saat Ini Masih Ada?
                </label>
                <input
                  type="checkbox"
                  className="form-checkbox h-4 w-4 text-primary-600"
                  checked={formData.medicalConditions?.chronicInfections?.parasiteIsPresent || false}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChronicInfectionsChange('parasiteIsPresent', e.target.checked)}
                />
              </div>
            </div>
            <TextareaField
              label="Lainnya (Infeksi Kronis/Berulang)"
              name="medicalConditions.chronicInfectionsOther"
              value={formData.medicalConditions?.chronicInfectionsOther || ''}
              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => updateFormData('medicalConditions', { ...formData.medicalConditions, chronicInfectionsOther: e.target.value })}
              placeholder="Sebutkan infeksi kronis lainnya..."
              rows={2}
              showEmptyOptions
              onEmptyReasonSelect={(name: string, reason: EmptyReason) => handleEmptyReasonSelect(name, reason)}
            />
          </div>
        )}
      </div>


      <TextareaField
        label="Operasi yang pernah dijalani pasien:"
        name="surgeries"
        value={formData.surgeries || ''}
        onChange={handleFieldChange}
        placeholder="Sebutkan jenis operasi dan perkiraan tahun pelaksanaan. Contoh: Operasi usus buntu (2015), Caesar (2020). Jika tidak ada, biarkan kosong atau pilih alasan."
        rows={3}
        showEmptyOptions
        onEmptyReasonSelect={(name: string, reason: EmptyReason) => handleEmptyReasonSelect(name, reason)}
      />

      <TextareaField
        label="Rawat Inap di Rumah Sakit (selain karena operasi):"
        name="hospitalizations"
        value={formData.hospitalizations || ''}
        onChange={handleFieldChange}
        placeholder="Sebutkan alasan & tahun rawat inap. Jika tidak ada, biarkan kosong atau pilih alasan."
        rows={3}
        showEmptyOptions
        onEmptyReasonSelect={(name: string, reason: EmptyReason) => handleEmptyReasonSelect(name, reason)}
      />

      <TextareaField
        label="Alergi Obat yang Diketahui:"
        name="medicationAllergies"
        value={formData.medicationAllergies || ''}
        onChange={handleFieldChange}
        placeholder="Sebutkan nama obat & jenis reaksi yang timbul. Jika tidak ada, biarkan kosong atau pilih alasan."
        rows={3}
        showEmptyOptions
        onEmptyReasonSelect={(name: string, reason: EmptyReason) => handleEmptyReasonSelect(name, reason)}
      />

      <TextareaField
        label="Alergi Makanan yang Terdiagnosis (reaksi IgE, muncul cepat):"
        name="foodAllergiesDiagnosed"
        value={formData.foodAllergiesDiagnosed || ''}
        onChange={handleFieldChange}
        placeholder="Sebutkan makanan & jenis reaksi. Jika tidak ada, biarkan kosong atau pilih alasan."
        rows={3}
        showEmptyOptions
        onEmptyReasonSelect={(name: string, reason: EmptyReason) => handleEmptyReasonSelect(name, reason)}
      />

      <TextareaField
        label="Intoleransi/Sensitivitas Makanan yang Diketahui (reaksi non-IgE, muncul lambat/gejala beragam):"
        name="foodIntolerancesSensitivities"
        value={formData.foodIntolerancesSensitivities || ''}
        onChange={handleFieldChange}
        placeholder="Sebutkan makanan & gejala yang timbul. Jika tidak ada, biarkan kosong atau pilih alasan."
        rows={3}
        showEmptyOptions
        onEmptyReasonSelect={(name: string, reason: EmptyReason) => handleEmptyReasonSelect(name, reason)}
      />

      <div className="mb-6 p-4 border border-primary/20 rounded-lg bg-primary/5">
        <h3 className="text-md font-semibold text-text-primary mb-2">Riwayat Transfusi Darah</h3>
        <div className="flex items-center gap-4 mb-2">
          <label className="flex items-center">
            <input
              type="radio"
              name="bloodTransfusion.hasTransfusion"
              value="yes"
              checked={formData.bloodTransfusion?.hasTransfusion === true}
              onChange={() => handleBloodTransfusionChange('hasTransfusion', true)}
              className="mr-2"
            /> Ya
          </label>
          <label className="flex items-center">
            <input
              type="radio"
              name="bloodTransfusion.hasTransfusion"
              value="no"
              checked={formData.bloodTransfusion?.hasTransfusion === false}
              onChange={() => handleBloodTransfusionChange('hasTransfusion', false)}
              className="mr-2"
            /> Tidak
          </label>
        </div>
        {formData.bloodTransfusion?.hasTransfusion && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 animate-fadeInDown">
            <InputField
              label="Tahun Transfusi"
              name="bloodTransfusion.year"
              value={formData.bloodTransfusion?.year || ''}
              onChange={(e) => handleBloodTransfusionChange('year', e.target.value)}
              placeholder="YYYY"
            />
            <InputField
              label="Alasan Transfusi"
              name="bloodTransfusion.reason"
              value={formData.bloodTransfusion?.reason || ''}
              onChange={(e) => handleBloodTransfusionChange('reason', e.target.value)}
              placeholder="Alasan medis"
            />
          </div>
        )}
      </div>

      <TextareaField
        label="Riwayat Vaksinasi Dewasa & Reaksi Merugikan yang Signifikan (jika ada):"
        name="adultVaccinationsReactions"
        value={formData.adultVaccinationsReactions || ''}
        onChange={handleFieldChange}
        placeholder="Sebutkan vaksin dan reaksi yang dialami. Jika tidak ada, biarkan kosong atau pilih alasan."
        rows={3}
        showEmptyOptions
        onEmptyReasonSelect={(name: string, reason: EmptyReason) => handleEmptyReasonSelect(name, reason)}
      />

    </div>
  );
};

export default Section4MedicalHistory;

// comprehensive-health-questionnaire//components/formSections/TimelineEntryCard.tsx

import React from 'react';
import { TimelineEntry } from '../../types';
import InputField from '../common/InputField';
import TextareaField from '../common/TextareaField';
import Button from '../common/Button';

interface TimelineEntryCardProps {
  entry: TimelineEntry;
  index: number;
  onChange: (id: string, field: keyof Omit<TimelineEntry, 'id'>, value: string) => void;
  onRemove: (id: string) => void;
}

const TimelineEntryCard: React.FC<TimelineEntryCardProps> = ({ entry, index, onChange, onRemove }) => {
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    onChange(entry.id, name as keyof Omit<TimelineEntry, 'id'>, value);
  };

  return (
    <div className="p-4 border border-border-color rounded-lg mb-4 bg-surface shadow-sm transition-all hover:shadow-md animate-fadeIn">
      <div className="flex justify-between items-center mb-3">
        <h4 className="font-semibold text-primary">Peristiwa #{index + 1}</h4>
        <Button 
          onClick={() => onRemove(entry.id)} 
          variant="danger" 
          size="sm"
          title={`Hapus peristiwa #${index + 1}`}
        >
          Hapus
        </Button>
      </div>
      <div className="grid grid-cols-1 gap-4">
        <InputField
          label="Usia / Tahun Kejadian"
          name="ageYear"
          value={entry.ageYear}
          onChange={handleInputChange}
          placeholder="Contoh: 25 tahun / 2020"
          required
        />
        <TextareaField
          label="Peristiwa Kesehatan Penting"
          name="event"
          value={entry.event}
          onChange={handleInputChange}
          placeholder="Contoh: Operasi usus buntu, Diagnosis diabetes"
          rows={2}
          required
        />
        <TextareaField
          label="Gejala / Catatan Terkait"
          name="symptoms"
          value={entry.symptoms}
          onChange={handleInputChange}
          placeholder="Contoh: Nyeri hebat di perut kanan bawah, Sering haus dan buang air kecil"
          rows={2}
          required
        />
      </div>
    </div>
  );
};

export default TimelineEntryCard;
// comprehensive-health-questionnaire//components/formSections/SupplementEntryRow.tsx

import React from 'react';
import { SupplementEntry } from '../../types';
import InputField from '../common/InputField';
import TextareaField from '../common/TextareaField';
import Button from '../common/Button';

interface SupplementEntryRowProps {
  entry: SupplementEntry;
  index: number;
  onChange: (id: string, field: keyof Omit<SupplementEntry, 'id'>, value: string) => void;
  onRemove: (id: string) => void;
}

const SupplementEntryRow: React.FC<SupplementEntryRowProps> = ({ entry, index, onChange, onRemove }) => {
  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    onChange(entry.id, name as keyof Omit<SupplementEntry, 'id'>, value);
  };

  return (
    <div className="p-4 border border-border-color rounded-lg mb-4 bg-gray-50 shadow-sm relative animate-fadeIn">
      <div className="flex justify-between items-start mb-3">
        <h4 className="font-semibold text-text-secondary pt-2">Suplemen #{index + 1}</h4>
        <Button 
          onClick={() => onRemove(entry.id)} 
          variant="danger" 
          size="sm"
          title={`Hapus suplemen #${index + 1}`}
          className="absolute top-3 right-3"
        >
          Hapus
        </Button>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <InputField
          label="Nama & Merek Suplemen"
          name="nameBrand"
          value={entry.nameBrand}
          onChange={handleFieldChange}
          placeholder="Contoh: Vitamin D3 K2 (Healthy Origins)"
          required
        />
        <InputField
          label="Dosis"
          name="dosage"
          value={entry.dosage}
          onChange={handleFieldChange}
          placeholder="Contoh: 5000 IU / 1 tablet"
          required
        />
        <InputField
          label="Frekuensi Penggunaan"
          name="frequency"
          value={entry.frequency}
          onChange={handleFieldChange}
          placeholder="Contoh: 1x sehari setelah makan"
          required
        />
        <InputField
          label="Siapa yang Merekomendasikan"
          name="prescriber"
          value={entry.prescriber}
          onChange={handleFieldChange}
          placeholder="Contoh: Dokter A / Diri Sendiri"
        />
      </div>
      <TextareaField
        label="Alasan Penggunaan"
        name="reason"
        value={entry.reason}
        onChange={handleFieldChange}
        placeholder="Jelaskan alasan penggunaan suplemen ini"
        rows={2}
        className="mt-4"
      />
    </div>
  );
};

export default SupplementEntryRow;

// comprehensive-health-questionnaire//components/formSections/Section2_ChiefComplaints.tsx

import React from 'react';
import { useFormContext } from '../../contexts/FormContext';
import { FormData, EmptyReason } from '../../types';
import { ComplaintDuration } from '../../constants';
import TextareaField from '../common/TextareaField';
import RadioCard from '../common/RadioCard';

import InputField from '../common/InputField';

interface Complaint {
  description: string;
  onset: string;
  severity: number;
}

const Section2ChiefComplaints: React.FC = () => {
  const { formData, updateFormData } = useFormContext();

  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const value = e.target.type === 'range' ? parseInt(e.target.value, 10) : e.target.value;
    updateFormData(e.target.name as keyof FormData, value);
  };

  const handleRadioChange = (name: keyof FormData | string, value: string) => {
    updateFormData(name, value);
  };

  const handleComplaintChange = (index: number, field: keyof Complaint, value: string | number) => {
    const updatedComplaints = [...(formData.chiefComplaints || [])];
    if (!updatedComplaints[index]) {
      updatedComplaints[index] = { description: '', onset: '', severity: 0 };
    }
    (updatedComplaints[index] as any)[field] = value;
    updateFormData('chiefComplaints', updatedComplaints);
  };

  const addComplaint = () => {
    const updatedComplaints = [...(formData.chiefComplaints || []), { description: '', onset: '', severity: 0 }];
    if (updatedComplaints.length <= 3) {
      updateFormData('chiefComplaints', updatedComplaints);
    }
  };

  const removeComplaint = (index: number) => {
    const updatedComplaints = [...(formData.chiefComplaints || [])];
    updatedComplaints.splice(index, 1);
    updateFormData('chiefComplaints', updatedComplaints);
  };

  return (
    <div>

      {(formData.chiefComplaints || [{ description: '', onset: '', severity: 0 }]).map((complaint, index) => (
        <div key={index} className="mb-6 p-4 border border-primary/20 rounded-lg bg-primary/5 space-y-4">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-semibold text-text-primary">Keluhan {index + 1}</h3>
            {index > 0 && (
              <button
                type="button"
                onClick={() => removeComplaint(index)}
                className="text-sm text-danger hover:text-danger-dark"
              >
                Hapus Keluhan Ini
              </button>
            )}
          </div>
          <TextareaField
            label={`Jelaskan Keluhan ${index + 1}`}
            name={`chiefComplaints[${index}].description`}
            value={complaint.description}
            onChange={(e) => handleComplaintChange(index, 'description', e.target.value)}
            required
            placeholder="Jelaskan keluhan secara detail..."
            rows={3}
          />
          <InputField
            label="Sejak kapan keluhan ini muncul?"
            name={`chiefComplaints[${index}].onset`}
            value={complaint.onset}
            onChange={(e) => handleComplaintChange(index, 'onset', e.target.value)}
            placeholder="Contoh: 2 minggu lalu, Januari 2023"
            required
          />
          <div className="mb-2">
            <label htmlFor={`complaintSeverity-${index}`} className="block text-sm font-medium text-text-primary mb-1">
              Pada skala 1-10, seberapa parah keluhan ini? (1=sangat ringan, 10=sangat berat) <span className="text-danger ml-1">*</span>
            </label>
            <div className="flex items-center gap-4 mt-1">
              <input
                id={`complaintSeverity-${index}`}
                name={`chiefComplaints[${index}].severity`}
                type="range"
                min="1"
                max="10"
                step="1"
                value={complaint.severity || 1}
                onChange={(e) => handleComplaintChange(index, 'severity', parseInt(e.target.value, 10))}
                className="range-slider w-full h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer focus:outline-none focus:ring-2 focus:ring-primary/50"
                required
              />
              <span className="text-lg font-semibold text-primary w-12 text-center p-2 bg-primary/10 rounded-md">
                {complaint.severity || 1}
              </span>
            </div>
          </div>
        </div>
      ))}
      {(formData.chiefComplaints?.length || 0) < 3 && (
        <button
          type="button"
          onClick={addComplaint}
          className="mb-6 text-sm text-primary hover:text-primary-dark font-medium flex items-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
          </svg>
          Tambah Keluhan Lain (Maksimal 3)
        </button>
      )}

      <TextareaField
        label="Apa yang pasien harapkan dari konsultasi Functional Medicine ini?"
        name="consultationExpectations"
        value={formData.consultationExpectations || ''}
        onChange={handleFieldChange}
        placeholder="Jelaskan harapan Anda..."
        rows={3}
      />
      <TextareaField
        label="Tujuan Kesehatan Spesifik Pasien (jangka pendek & jangka panjang)"
        name="healthGoals"
        value={formData.healthGoals || ''}
        onChange={handleFieldChange}
        placeholder="Contoh: Jangka pendek - mengurangi nyeri sendi. Jangka panjang - meningkatkan energi secara keseluruhan."
        rows={4}
      />
      <TextareaField
        label="Apa saja yang telah pasien coba untuk mengatasi keluhan ini?"
        name="previousTreatments"
        value={formData.previousTreatments || ''}
        onChange={handleFieldChange}
        placeholder="Sebutkan terapi medis, obat-obatan, suplemen, perubahan gaya hidup, dll. dan hasilnya jika ada"
        rows={4}
      />
      <TextareaField
        label="Faktor yang Memperburuk Keluhan Pasien"
        name="worseningFactors"
        value={formData.worseningFactors || ''}
        onChange={handleFieldChange}
        placeholder="Contoh: Makanan tertentu, aktivitas, stres, waktu tertentu, cuaca, dll."
        rows={3}
      />
      <TextareaField
        label="Faktor yang Memperbaiki Keluhan Pasien"
        name="improvingFactors"
        value={formData.improvingFactors || ''}
        onChange={handleFieldChange}
        placeholder="Contoh: Istirahat, obat tertentu, makanan tertentu, aktivitas tertentu, dll."
        rows={3}
      />
    </div>
  );
};

export default Section2ChiefComplaints;

// comprehensive-health-questionnaire//components/formSections/Section0_Initial.tsx

import React from 'react';
import { useFormContext } from '../../contexts/FormContext';
import { FormData, EmptyReason } from '../../types';
import { FormFiller, ContactPreference } from '../../constants';
import InputField from '../common/InputField';
import RadioCard from '../common/RadioCard';
import SelectField from '../common/SelectField';

const Section0Initial: React.FC = () => {
  const { formData, updateFormData } = useFormContext();

  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    updateFormData(e.target.name as keyof FormData, e.target.value);
  };

  const handleRadioChange = (name: keyof FormData | string, value: string) => {
    updateFormData(name, value);
  };
  
  // const handleEmptyReasonSelect = (name: string, reason: EmptyReason) => {
  //   updateFormData(`${name}_empty_reason`, reason);
  //   updateFormData(name as keyof FormData, ''); // Clear the field value
  // };

  const relationshipOptions = [
    { value: 'spouse', label: 'Pasangan (Suami/Istri)' },
    { value: 'parent', label: 'Orang Tua' },
    { value: 'child', label: 'Anak' },
    { value: 'sibling', label: 'Saudara Kandung' },
    { value: 'friend', label: 'Teman' },
    { value: 'caregiver', label: 'Perawat/Pendamping' },
    { value: 'other', label: 'Lainnya' },
  ];

  return (
    <div>
      
      <div className="mb-6">
        <p className="block text-sm font-medium text-text-primary mb-2">Siapa yang mengisi formulir ini? <span className="text-danger ml-1">*</span></p>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <RadioCard
            id="fillerSelf"
            name="formFiller"
            value={FormFiller.Self}
            checkedValue={formData.formFiller}
            onChange={(val) => handleRadioChange('formFiller', val)}
            labelText="Saya mengisi untuk diri sendiri"
            required
          />
          <RadioCard
            id="fillerOther"
            name="formFiller"
            value={FormFiller.Other}
            checkedValue={formData.formFiller}
            onChange={(val) => handleRadioChange('formFiller', val)}
            labelText="Saya mengisi untuk orang lain"
            required
          />
        </div>
      </div>

      {formData.formFiller === FormFiller.Other && (
        <div className="p-4 border border-primary/20 rounded-lg mt-6 animate-fadeIn bg-primary/5 space-y-4">
          <h3 className="text-lg font-semibold text-primary">Detail Pengisi Formulir</h3>
          <SelectField
            label="Hubungan Anda dengan pasien:"
            name="relationshipToPatient"
            options={relationshipOptions}
            value={formData.relationshipToPatient || ''}
            onChange={handleFieldChange}
            required
          />

          <div className="mt-4">
            <p className="block text-sm font-medium text-text-primary mb-2">Siapa yang sebaiknya kami hubungi terkait informasi pasien dan jadwal konsultasi? <span className="text-danger ml-1">*</span></p>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <RadioCard
                id="contactPersonPatient"
                name="contactPerson"
                value="patient"
                checkedValue={formData.contactPerson}
                onChange={(val) => handleRadioChange('contactPerson', val)}
                labelText="Pasien Langsung"
                required
              />
              <RadioCard
                id="contactPersonFiller"
                name="contactPerson"
                value="filler"
                checkedValue={formData.contactPerson}
                onChange={(val) => handleRadioChange('contactPerson', val)}
                labelText="Saya (pengisi formulir ini)"
                required
              />
            </div>
          </div>

          <InputField
            label="Nama Kontak Utama:"
            name="mainContactName"
            value={formData.mainContactName || ''}
            onChange={handleFieldChange}
            placeholder="Masukkan nama kontak utama"
            required={formData.contactPerson === 'filler'}
            className="mt-4"
          />

          <div className="mt-4">
            <p className="block text-sm font-medium text-text-primary mb-2">Bagaimana Anda (sebagai pengisi) ingin dihubungi terkait formulir ini? <span className="text-danger ml-1">*</span></p>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <RadioCard
                id="contactWhatsapp"
                name="contactPreference"
                value={ContactPreference.Whatsapp}
                checkedValue={formData.contactPreference}
                onChange={(val) => handleRadioChange('contactPreference', val)}
                labelText="WhatsApp"
                required
              />
              <RadioCard
                id="contactEmail"
                name="contactPreference"
                value={ContactPreference.Email}
                checkedValue={formData.contactPreference}
                onChange={(val) => handleRadioChange('contactPreference', val)}
                labelText="Email"
                required
              />
            </div>
          </div>

          {formData.contactPreference && (
            <div className="mt-4 animate-fadeInRight">
              <InputField
                label={formData.contactPreference === ContactPreference.Whatsapp ? "Nomor WhatsApp Anda:" : "Alamat Email Anda:"}
                name="contactDetail"
                type={formData.contactPreference === ContactPreference.Whatsapp ? "tel" : "email"}
                value={formData.contactDetail || ''}
                onChange={handleFieldChange}
                placeholder={formData.contactPreference === ContactPreference.Whatsapp ? "Contoh: 08123456789" : "Contoh: nama@email.com"}
                required
              />
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default Section0Initial;

// comprehensive-health-questionnaire//.gitignore
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

// comprehensive-health-questionnaire//constants.ts

export const TOTAL_FORM_SECTIONS = 14; // Reflects sections 0-13, up to Readiness & Expectations

export const LOCAL_STORAGE_KEY = 'healthQuestionnaireProgress';

export enum FormFiller {
  Self = 'self',
  Other = 'other',
}

export enum ContactPreference {
  Whatsapp = 'whatsapp',
  Email = 'email',
}

export enum Gender {
  Male = 'male',
  Female = 'female',
  Other = 'other',
}

export enum ComplaintDuration {
  Days = 'days',
  Weeks = 'weeks',
  Months = 'months',
  Years = 'years',
}

export const FAMILY_HISTORY_CONDITION_CATEGORIES = [
  { value: 'autoimmune', label: 'Penyakit Autoimun (Sebutkan Jenis)' },
  { value: 'cancer', label: 'Kanker (Sebutkan Jenis)' },
  { value: 'heart_stroke', label: 'Penyakit Jantung/Stroke' },
  { value: 'diabetes', label: 'Diabetes (Tipe 1 / Tipe 2)' },
  { value: 'thyroid', label: 'Gangguan Tiroid (Sebutkan Jenis)' },
  { value: 'digestive', label: 'Penyakit Pencernaan (Sebutkan Jenis)' },
  { value: 'neurological', label: 'Penyakit Neurologis (Sebutkan Jenis)' },
  { value: 'mental_health', label: 'Gangguan Kesehatan Jiwa (Sebutkan Jenis)' },
  { value: 'allergy_asthma', label: 'Alergi Berat/Asma' },
  { value: 'osteoporosis', label: 'Osteoporosis' },
  { value: 'other', label: 'Lainnya (Sebutkan)' },
];

export const FAMILY_MEMBER_RELATIONSHIP_OPTIONS = [
  { value: 'father', label: 'Ayah' },
  { value: 'mother', label: 'Ibu' },
  { value: 'sibling_brother', label: 'Saudara Laki-laki' },
  { value: 'sibling_sister', label: 'Saudara Perempuan' },
  { value: 'son', label: 'Anak Laki-laki' },
  { value: 'daughter', label: 'Anak Perempuan' },
  { value: 'paternal_grandfather', label: 'Kakek (dari Ayah)' },
  { value: 'paternal_grandmother', label: 'Nenek (dari Ayah)' },
  { value: 'maternal_grandfather', label: 'Kakek (dari Ibu)' },
  { value: 'maternal_grandmother', label: 'Nenek (dari Ibu)' },
  { value: 'uncle', label: 'Paman' },
  { value: 'aunt', label: 'Bibi' },
  { value: 'cousin', label: 'Sepupu' },
  { value: 'other', label: 'Lainnya' },
];

export const CATEGORIES_REQUIRING_DETAILS = [
  'autoimmune',
  'cancer',
  'thyroid',
  'digestive',
  'neurological',
  'mental_health',
  'other',
];

// Section 6: Childhood History Constants
export const BIRTH_STATUS_OPTIONS = [
  { value: 'full_term', label: 'Cukup Bulan (37-42 minggu)' },
  { value: 'premature', label: 'Prematur (... minggu)' },
  { value: 'post_term', label: 'Postmatur (>42 minggu)' },
];

export const DELIVERY_METHOD_OPTIONS = [
  { value: 'vaginal', label: 'Normal Pervaginam' },
  { value: 'emergency_csection', label: 'Caesar Darurat' },
  { value: 'planned_csection', label: 'Caesar Terencana (Alasan: ...)' },
  { value: 'induced', label: 'Induksi' },
  { value: 'assisted_delivery', label: 'Dengan Bantuan (Forceps/Vakum)' },
];

export const BREASTFEEDING_OPTIONS = [
  { value: 'exclusive', label: 'Eksklusif (selama ... bulan/tahun)' },
  { value: 'mixed', label: 'Campur dengan Formula Sejak Awal' },
  { value: 'formula_only', label: 'Hanya Formula' },
];

export const CHILDHOOD_ANTIBIOTICS_OPTIONS = [
  { value: 'never', label: 'Tidak Pernah' },
  { value: 'rare', label: 'Jarang (1-2 kali)' },
  { value: 'frequent', label: 'Sering (3-5 kali)' },
  { value: 'very_frequent', label: 'Sangat Sering (>5 kali)' },
];

export const RECURRENT_CHILDHOOD_INFECTIONS_OPTIONS = [
  { value: 'ear_infection', label: 'Infeksi Telinga (Otitis Media)' },
  { value: 'tonsillitis', label: 'Radang Tenggorokan/Amandel (Tonsilitis)' },
  { value: 'bronchitis_pneumonia', label: 'Bronkitis/Pneumonia' },
  { value: 'other', label: 'Lainnya (Jelaskan)' },
];

export const DEVELOPMENTAL_HISTORY_OPTIONS = [
  { value: 'speech_delay', label: 'Keterlambatan Bicara' },
  { value: 'motor_delay', label: 'Keterlambatan Motorik (merangkak, berjalan)' },
  { value: 'learning_disability', label: 'Kesulitan Belajar Spesifik (cth: disleksia)' },
  { value: 'adhd_add', label: 'ADHD/ADD (terdiagnosis atau gejala kuat)' },
  { value: 'autism_spectrum', label: 'Spektrum Autisme (terdiagnosis atau gejala kuat)' },
];

export const ADVERSE_CHILDHOOD_EXPERIENCES_OPTIONS = [
  { value: 'physical_abuse', label: 'Kekerasan Fisik oleh orang tua/pengasuh' },
  { value: 'emotional_abuse', label: 'Kekerasan Emosional oleh orang tua/pengasuh' },
  { value: 'sexual_abuse', label: 'Kekerasan Seksual oleh siapapun' },
  { value: 'physical_neglect', label: 'Penelantaran Fisik' },
  { value: 'emotional_neglect', label: 'Penelantaran Emosional' },
  { value: 'witness_domestic_violence', label: 'Menyaksikan kekerasan dalam rumah tangga' },
  { value: 'household_mental_illness', label: 'Anggota keluarga serumah dengan masalah kesehatan jiwa serius' },
  { value: 'household_substance_abuse', label: 'Anggota keluarga serumah dengan ketergantungan alkohol/narkoba' },
  { value: 'household_incarceration', label: 'Anggota keluarga serumah pernah dipenjara' },
  { value: 'parental_divorce_separation', label: 'Perceraian atau perpisahan orang tua' },
];

// Section 7 (G1): Lifestyle - Diet & Nutrition Constants
export const DIET_PATTERN_OPTIONS = [
    { value: 'omnivore', label: 'Omnivora (makan segalanya)' },
    { value: 'vegetarian', label: 'Vegetarian (tidak makan daging/ikan)' },
    { value: 'vegan', label: 'Vegan (tidak makan semua produk hewani)' },
    { value: 'pescetarian', label: 'Pescetarian (makan ikan, tidak makan daging lain)' },
    { value: 'flexitarian', label: 'Fleksitarian (dominan nabati, kadang hewani)' },
    { value: 'other', label: 'Lainnya (Jelaskan)' },
];

export const SPECIAL_DIET_NAME_OPTIONS = [
    { value: 'paleo', label: 'Diet Paleo' },
    { value: 'keto', label: 'Diet Keto' },
    { value: 'low_fodmap', label: 'Diet Rendah FODMAP' },
    { value: 'mediterranean', label: 'Diet Mediterania' },
    { value: 'elimination', label: 'Diet Eliminasi (Sebutkan makanan yang dieliminasi)' },
    { value: 'other', label: 'Lainnya (Jelaskan)' },
];

export const CONSUMPTION_FREQUENCY_OPTIONS = [
    { value: 'rarely_never', label: 'Jarang/Tidak Pernah' },
    { value: '1-2_week', label: '1-2 kali/minggu' },
    { value: '3-4_week', label: '3-4 kali/minggu' },
    { value: 'daily', label: 'Setiap Hari' },
];

export const ALCOHOL_CONSUMPTION_OPTIONS = [
    { value: 'never', label: 'Tidak Pernah' },
    { value: 'social', label: 'Sosial (1-2 kali/bulan, <2 standar drink/kali)' },
    { value: 'light', label: 'Ringan (1-3 kali/minggu, <2 standar drink/kali)' },
    { value: 'moderate', label: 'Sedang (4-6 kali/minggu atau >2 standar drink/kali)' },
    { value: 'heavy', label: 'Berat (setiap hari)' },
];

export const WATER_TYPE_OPTIONS = [
    { value: 'tap_cooked_uncooked', label: 'Air Keran (dimasak/tidak)' },
    { value: 'bottled_gallon', label: 'Air Kemasan (Galon/Botol)' },
    { value: 'home_filter', label: 'Air Filter di Rumah (Jenis filter: ...)' },
    { value: 'alkaline', label: 'Air Alkali' },
    { value: 'other', label: 'Lainnya: ...' },
];

export const EATING_HABITS_OPTIONS = [
    { value: 'hurried', label: 'Makan terburu-buru' },
    { value: 'distracted_eating', label: 'Makan sambil bekerja/menonton TV/menggunakan gadget' },
    { value: 'mindful_eating', label: 'Makan dengan sadar (fokus pada makanan, mengunyah perlahan)' },
    { value: 'skip_meals', label: 'Sering melewatkan makan (Sarapan/Makan Siang/Makan Malam)' },
];

export const FOOD_CRAVINGS_OPTIONS = [
    { value: 'sweet', label: 'Makanan Manis' },
    { value: 'salty', label: 'Makanan Asin' },
    { value: 'savory_msg', label: 'Makanan Gurih/MSG' },
    { value: 'carbs', label: 'Karbohidrat (roti, pasta, nasi)' },
    { value: 'chocolate', label: 'Cokelat' },
    { value: 'fried', label: 'Gorengan' },
    { value: 'other', label: 'Lainnya: ...' },
];

export const COOKING_FREQUENCY_OPTIONS = [
    { value: 'almost_always', label: 'Ya, hampir selalu' },
    { value: 'often', label: 'Sering' },
    { value: 'sometimes', label: 'Kadang-kadang' },
    { value: 'rarely', label: 'Jarang' },
    { value: 'never', label: 'Tidak pernah' },
];

export const FOOD_LABEL_READING_OPTIONS = [
    { value: 'always', label: 'Selalu' },
    { value: 'often', label: 'Sering' },
    { value: 'sometimes', label: 'Kadang-kadang' },
    { value: 'rarely', label: 'Jarang' },
    { value: 'never', label: 'Tidak Pernah' },
];

export const GROCERY_SOURCE_OPTIONS = [
    { value: 'traditional_market', label: 'Pasar Tradisional' },
    { value: 'supermarket', label: 'Supermarket' },
    { value: 'organic_store', label: 'Toko Organik' },
    { value: 'online', label: 'Pesan Online' },
    { value: 'direct_farmer', label: 'Petani Langsung' },
    { value: 'other', label: 'Lainnya: ...' },
];

// Section 8 (G2): Lifestyle - Physical Activity Constants
export const EXERCISE_INTENSITY_OPTIONS = [
    { value: 'light', label: 'Ringan (berkeringat sedikit, napas sedikit meningkat)' },
    { value: 'moderate', label: 'Sedang (berkeringat, napas cukup meningkat, masih bisa bicara)' },
    { value: 'heavy', label: 'Berat (sangat berkeringat, napas terengah-engah, sulit bicara)' },
];

export const ACTIVITY_LEVEL_AT_WORK_OPTIONS = [
    { value: 'sedentary', label: 'Dominan Duduk (kerja di meja)' },
    { value: 'standing', label: 'Banyak Berdiri' },
    { value: 'walking', label: 'Banyak Berjalan' },
    { value: 'heavy_physical', label: 'Aktivitas Fisik Berat' },
];

export const ENJOY_PHYSICAL_ACTIVITY_OPTIONS = [
    { value: 'greatly_enjoy', label: 'Sangat Menikmati' },
    { value: 'somewhat_enjoy', label: 'Cukup Menikmati' },
    { value: 'neutral', label: 'Biasa Saja' },
    { value: 'dislike', label: 'Kurang Suka' },
    { value: 'strongly_dislike', label: 'Tidak Suka' },
];

export const BARRIERS_TO_EXERCISE_OPTIONS = [
    { value: 'no_time', label: 'Tidak ada waktu' },
    { value: 'no_motivation', label: 'Tidak ada motivasi' },
    { value: 'fatigue', label: 'Kelelahan' },
    { value: 'pain_condition', label: 'Nyeri/Kondisi fisik' },
    { value: 'no_facility', label: 'Tidak ada fasilitas' },
    { value: 'other', label: 'Lainnya (Jelaskan)' },
];

// Section 9 (G3): Lifestyle - Sleep & Rest Constants
export const YES_NO_OPTIONS = [
  { value: 'yes', label: 'Ya' },
  { value: 'no', label: 'Tidak' },
];
export const YES_NO_UNKNOWN_OPTIONS = [
  { value: 'yes', label: 'Ya' },
  { value: 'no', label: 'Tidak' },
  { value: 'unknown', label: 'Tidak Tahu' },
];


export const SLEEP_PROBLEMS_OPTIONS = [
  { value: 'difficulty_falling_asleep', label: 'Sulit untuk mulai tidur (>30 menit)' },
  { value: 'frequent_waking', label: 'Sering terbangun di malam hari' },
  { value: 'early_waking', label: 'Bangun terlalu pagi & tidak bisa tidur lagi' },
  { value: 'restless_sleep', label: 'Tidur tidak nyenyak/gelisah' },
  { value: 'loud_snoring', label: 'Mendengkur keras (dilaporkan)' },
  { value: 'sleep_apnea_symptoms', label: 'Terengah-engah/berhenti napas saat tidur' },
  { value: 'restless_legs', label: 'Kaki gelisah/tidak nyaman saat mencoba tidur' },
  { value: 'nightmares', label: 'Mimpi buruk yang mengganggu berulang' },
  { value: 'bruxism', label: 'Menggertakkan gigi saat tidur (Bruxism)' },
  { value: 'none', label: 'Tidak ada masalah tidur yang signifikan' },
];

export const SLEEP_ENVIRONMENT_DARKNESS_OPTIONS = [
  { value: 'very_dark', label: 'Sangat Gelap (tanpa cahaya)' },
  { value: 'somewhat_light', label: 'Agak Terang (sedikit cahaya masuk)' },
  { value: 'quite_bright', label: 'Cukup Terang' },
];

export const SLEEP_ENVIRONMENT_TEMPERATURE_OPTIONS = [
  { value: 'cool_comfortable', label: 'Sejuk dan Nyaman' },
  { value: 'too_warm', label: 'Terlalu Hangat' },
  { value: 'too_cold', label: 'Terlalu Dingin' },
];

export const SLEEP_ENVIRONMENT_NOISE_OPTIONS = [
  { value: 'quiet', label: 'Tenang' },
  { value: 'somewhat_noisy', label: 'Agak Bising (suara samar)' },
  { value: 'noisy_disturbing', label: 'Bising (mengganggu)' },
];

export const FEELING_ON_WAKING_OPTIONS = [
  { value: 'refreshed', label: 'Segar Bugar dan Berenergi' },
  { value: 'somewhat_refreshed', label: 'Cukup Segar' },
  { value: 'somewhat_tired', label: 'Agak Lelah/Kurang Tidur' },
  { value: 'very_tired', label: 'Sangat Lelah/Seperti Tidak Tidur' },
];

// Section 10 (G4): Lifestyle - Stress & Emotional Health Constants
export const STRESS_SOURCES_OPTIONS = [
    { value: 'work', label: 'Pekerjaan/Karir' },
    { value: 'finance', label: 'Keuangan' },
    { value: 'relationship_partner', label: 'Hubungan dengan Pasangan' },
    { value: 'relationship_family', label: 'Hubungan dengan Keluarga' },
    { value: 'relationship_friends', label: 'Hubungan dengan Teman' },
    { value: 'health_personal', label: 'Kesehatan Pribadi' },
    { value: 'health_family_member', label: 'Kesehatan Anggota Keluarga' },
    { value: 'major_life_event', label: 'Peristiwa Kehidupan Besar (pindah, kehilangan, dll.)' },
    { value: 'loneliness', label: 'Merasa Kesepian' },
    { value: 'social_demands', label: 'Tuntutan Sosial' },
    { value: 'other', label: 'Lainnya (Jelaskan)' },
];

export const STRESS_MANAGEMENT_TECHNIQUES_OPTIONS = [
    { value: 'meditation', label: 'Meditasi/Mindfulness' },
    { value: 'yoga_tai_chi', label: 'Yoga/Tai Chi' },
    { value: 'deep_breathing', label: 'Latihan Pernapasan Dalam' },
    { value: 'journaling', label: 'Menulis Jurnal' },
    { value: 'time_in_nature', label: 'Menghabiskan Waktu di Alam' },
    { value: 'hobbies', label: 'Melakukan Hobi (Sebutkan)' },
    { value: 'talking_to_friends_family', label: 'Berbicara dengan Teman/Keluarga Tepercaya' },
    { value: 'professional_therapy', label: 'Terapi/Konseling Profesional' },
    { value: 'exercise', label: 'Olahraga' },
    { value: 'listening_to_music', label: 'Mendengarkan Musik' },
    { value: 'other', label: 'Lainnya (Sebutkan)' },
];

export const EFFECTIVENESS_RATING_OPTIONS = [
    { value: '0', label: '0 - Tidak Efektif' },
    { value: '1', label: '1' },
    { value: '2', label: '2' },
    { value: '3', label: '3' },
    { value: '4', label: '4' },
    { value: '5', label: '5 - Sangat Efektif' },
];

export const SOCIALIZING_FREQUENCY_OPTIONS = [
    { value: 'daily', label: 'Setiap Hari' },
    { value: 'several_times_week', label: 'Beberapa Kali/Minggu' },
    { value: 'several_times_month', label: 'Beberapa Kali/Bulan' },
    { value: 'rarely_never', label: 'Jarang Sekali/Hampir Tidak Pernah' },
];

export const SPIRITUAL_PRACTICE_BENEFIT_OPTIONS = [
    { value: 'yes', label: 'Ya' },
    { value: 'sometimes', label: 'Kadang' },
    { value: 'no', label: 'Tidak' },
];

export const SETTING_BOUNDARIES_DIFFICULTY_OPTIONS = [
    { value: 'easy', label: 'Mudah' },
    { value: 'sometimes_difficult', label: 'Kadang Sulit' },
    { value: 'very_difficult', label: 'Sangat Sulit' },
];

export const LIFE_OUTLOOK_OPTIONS = [
    { value: 'very_optimistic', label: 'Sangat Optimis dan Bersemangat' },
    { value: 'somewhat_optimistic', label: 'Cukup Optimis' },
    { value: 'neutral', label: 'Netral' },
    { value: 'somewhat_pessimistic', label: 'Cukup Pesimis' },
    { value: 'very_pessimistic', label: 'Sangat Pesimis dan Putus Asa' },
];

// Section 11 (H): Environment & Exposures Constants
export const DWELLING_TYPE_OPTIONS = [
    { value: 'urban_dense', label: 'Perkotaan Padat' },
    { value: 'suburban', label: 'Pinggiran Kota' },
    { value: 'rural', label: 'Pedesaan' },
    { value: 'near_industrial', label: 'Dekat Kawasan Industri (Jenis: ...)' },
    { value: 'near_highway', label: 'Dekat Jalan Raya Utama/Tol' },
    { value: 'near_farmland', label: 'Dekat Lahan Pertanian (Pestisida intensif? ...)' },
];

export const HOME_WATER_SOURCE_OPTIONS = [
    { value: 'pdam', label: 'PDAM' },
    { value: 'well_water', label: 'Sumur Bor/Gali' },
    { value: 'mountain_spring', label: 'Air Pegunungan' },
    { value: 'bottled_gallon', label: 'Air Kemasan Galon/Botol (untuk minum)' },
    { value: 'other', label: 'Lainnya (Sebutkan)' },
];

export const INDOOR_AIR_VENTILATION_OPTIONS = [
    { value: 'good_daily', label: 'Baik (jendela/pintu dibuka rutin setiap hari)' },
    { value: 'moderate_weekly', label: 'Sedang (beberapa kali/minggu)' },
    { value: 'poor_rarely', label: 'Buruk (jarang/tidak pernah)' },
];

export const AC_USAGE_OPTIONS = [
    { value: 'often', label: 'Sering' },
    { value: 'sometimes', label: 'Kadang' },
    { value: 'rarely', label: 'Jarang' },
    { value: 'none', label: 'Tidak Ada AC' },
];

export const AIR_FRESHENER_USAGE_OPTIONS = [
    { value: 'often', label: 'Sering' },
    { value: 'sometimes', label: 'Kadang' },
    { value: 'rarely', label: 'Jarang' },
    { value: 'never', label: 'Tidak Pernah' },
];

export const WORKPLACE_EXPOSURE_OPTIONS = [
    { value: 'chemicals', label: 'Bahan Kimia (Sebutkan jika tahu)' },
    { value: 'dust_fiber', label: 'Debu/Serat (Jenis)' },
    { value: 'fumes_solvents', label: 'Asap/Uap Logam/Pelarut' },
    { value: 'heavy_metals', label: 'Logam Berat (cth: timbal, merkuri)' },
    { value: 'pesticides_herbicides', label: 'Pestisida/Herbisida' },
    { value: 'radiation', label: 'Radiasi (Jenis)' },
    { value: 'loud_noise', label: 'Kebisingan Tinggi Konstan' },
    { value: 'vibrations', label: 'Getaran Konstan' },
    { value: 'none', label: 'Tidak ada paparan signifikan yang diketahui' },
    { value: 'other', label: 'Lainnya (Sebutkan)' },
];

export const PRODUCT_AWARENESS_OPTIONS = [
    { value: 'always', label: 'Ya, selalu memperhatikan kandungan' },
    { value: 'often', label: 'Sering memperhatikan' },
    { value: 'sometimes', label: 'Kadang-kadang' },
    { value: 'no', label: 'Tidak memperhatikan' },
];

export const PERSONAL_CARE_PREFERENCE_OPTIONS = [
    { value: 'conventional', label: 'Merek Konvensional Umum' },
    { value: 'natural_organic', label: 'Merek yang mengklaim Natural/Organik' },
    { value: 'homemade', label: 'Membuat sendiri' },
    { value: 'no_preference', label: 'Tidak ada preferensi khusus' },
];

export const CLEANING_PRODUCT_PREFERENCE_OPTIONS = [
    { value: 'conventional', label: 'Merek Konvensional Umum' },
    { value: 'natural_eco_friendly', label: 'Merek yang mengklaim Natural/Ramah Lingkungan' },
    { value: 'homemade', label: 'Membuat sendiri (cth: cuka, baking soda)' },
];

export const PLASTIC_USAGE_FREQUENCY_OPTIONS = [
    { value: 'often', label: 'Sering' },
    { value: 'sometimes', label: 'Kadang' },
    { value: 'rarely_glass_stainless', label: 'Jarang (lebih suka kaca/stainless steel)' }, // For storage
    { value: 'rarely', label: 'Jarang' }, // General for bottle drinking
    { value: 'never', label: 'Tidak Pernah' }, // For microwaving
];

export const FISH_CONSUMPTION_FREQUENCY_OPTIONS = [
    { value: 'often_more_2_week', label: 'Sering (>2 kali/minggu)' },
    { value: 'sometimes_1_week', label: 'Kadang (1 kali/minggu)' },
    { value: 'rarely_monthly', label: 'Jarang (beberapa kali/bulan)' },
    { value: 'never', label: 'Tidak Pernah' },
];

// Section 12 (I): System Review Constants
export const SYMPTOM_FREQUENCY_OPTIONS = [
    { value: 0, label: '0 (Tidak Pernah)' },
    { value: 1, label: '1 (Jarang)' }, // 1-3x/bulan
    { value: 2, label: '2 (Kadang)' }, // 1-3x/minggu
    { value: 3, label: '3 (Sering)' }, // Hampir Setiap Hari
];

export const SYMPTOM_SEVERITY_OPTIONS = [
    { value: 0, label: '0 (Tidak Ada)' },
    { value: 1, label: '1 (Ringan)' },
    { value: 2, label: '2 (Sedang)' },
    { value: 3, label: '3 (Berat)' },
];

export const SYMPTOM_REVIEW_CATEGORIES_AND_SYMPTOMS = [
    {
        categoryId: 'general',
        categoryLabel: 'UMUM',
        symptoms: [
            { symptomId: 'fatigue_lack_of_energy', symptomLabel: 'Kelelahan, kurang energi' },
            { symptomId: 'unexplained_weight_change', symptomLabel: 'Perubahan berat badan tanpa sebab jelas' },
            { symptomId: 'unexplained_fever_chills', symptomLabel: 'Demam atau kedinginan tanpa sebab jelas' },
            { symptomId: 'excessive_sweating', symptomLabel: 'Keringat berlebih (siang/malam)' },
        ],
    },
    {
        categoryId: 'head_neck',
        categoryLabel: 'KEPALA & LEHER',
        symptoms: [
            { symptomId: 'headache_tension', symptomLabel: 'Sakit Kepala - Tipe Tegang (seperti diikat)' },
            { symptomId: 'headache_migraine', symptomLabel: 'Sakit Kepala - Tipe Migrain (berdenyut, sering sebelah, mual/sensitif cahaya/suara)' },
            { symptomId: 'dizziness_lightheadedness', symptomLabel: 'Pusing/Limbung (kepala terasa ringan)' },
            { symptomId: 'vertigo', symptomLabel: 'Vertigo (sensasi ruangan berputar)' },
            { symptomId: 'neck_pain_stiffness', symptomLabel: 'Nyeri Leher/Kaku Leher' },
        ],
    },
    {
        categoryId: 'eyes_vision',
        categoryLabel: 'MATA & PENGLIHATAN',
        symptoms: [
            { symptomId: 'blurred_vision', symptomLabel: 'Penglihatan Kabur/Buram' },
            { symptomId: 'dry_itchy_red_watery_eyes', symptomLabel: 'Mata Kering/Gatal/Merah/Berair' },
            { symptomId: 'light_sensitivity', symptomLabel: 'Sensitif terhadap Cahaya' },
            { symptomId: 'dark_circles_under_eyes', symptomLabel: 'Lingkaran Hitam di Bawah Mata' },
        ],
    },
    {
        categoryId: 'ent',
        categoryLabel: 'TELINGA, HIDUNG, TENGGOROKAN (THT)',
        symptoms: [
            { symptomId: 'tinnitus', symptomLabel: 'Telinga Berdenging (Tinnitus)' },
            { symptomId: 'hearing_loss', symptomLabel: 'Gangguan Pendengaran' },
            { symptomId: 'chronic_nasal_congestion', symptomLabel: 'Hidung Tersumbat Kronis' },
            { symptomId: 'chronic_runny_nose_sneezing', symptomLabel: 'Hidung Meler/Bersin Kronis (bukan flu)' },
            { symptomId: 'sinusitis_sinus_pain', symptomLabel: 'Sinusitis/Nyeri di Area Sinus' },
            { symptomId: 'post_nasal_drip', symptomLabel: 'Post-Nasal Drip (lendir di belakang tenggorokan)' },
            { symptomId: 'frequent_sore_throat_tonsillitis', symptomLabel: 'Sering Sakit Tenggorokan/Radang Amandel' },
            { symptomId: 'recurrent_mouth_sores', symptomLabel: 'Sariawan Berulang' },
            { symptomId: 'persistent_bad_breath', symptomLabel: 'Bau Mulut (Halitosis) yang persisten' },
        ],
    },
    {
        categoryId: 'mouth_teeth',
        categoryLabel: 'MULUT & GIGI',
        symptoms: [
            { symptomId: 'bleeding_swollen_painful_gums', symptomLabel: 'Gusi Mudah Berdarah/Bengkak/Nyeri' },
            { symptomId: 'jaw_pain_clicking_tmj', symptomLabel: 'Nyeri Rahang/Bunyi Klik pada Sendi Rahang (TMJ)' },
            { symptomId: 'bruxism_teeth_grinding', symptomLabel: 'Menggertakkan Gigi Saat Tidur (Bruxism)' },
        ],
    },
    {
        categoryId: 'cardiovascular',
        categoryLabel: 'SISTEM KARDIOVASKULAR (JANTUNG & PEMBULUH DARAH)',
        symptoms: [
            { symptomId: 'palpitations', symptomLabel: 'Jantung Berdebar (Palpitasi)' },
            { symptomId: 'chest_pain_pressure', symptomLabel: 'Nyeri Dada/Rasa Tertekan di Dada' },
            { symptomId: 'shortness_of_breath_exertion_rest', symptomLabel: 'Sesak Napas Saat Aktivitas Ringan/Istirahat' },
            { symptomId: 'cold_hands_feet', symptomLabel: 'Tangan dan/atau Kaki Sering Terasa Dingin' },
            { symptomId: 'swelling_legs_ankles', symptomLabel: 'Bengkak di Kaki/Pergelangan Kaki' },
            { symptomId: 'varicose_spider_veins', symptomLabel: 'Vena Varises/Spider Veins yang menonjol' },
        ],
    },
    {
        categoryId: 'respiratory',
        categoryLabel: 'SISTEM PERNAPASAN',
        symptoms: [
            { symptomId: 'chronic_cough_dry_productive', symptomLabel: 'Batuk Kronis (Kering atau Berdahak)' },
            { symptomId: 'wheezing', symptomLabel: 'Mengi (Napas Berbunyi Ngik-ngik)' },
            { symptomId: 'shortness_of_breath_non_exertional', symptomLabel: 'Sesak Napas (di luar aktivitas berat)' },
            { symptomId: 'frequent_respiratory_infections', symptomLabel: 'Sering Mengalami Infeksi Saluran Napas' },
        ],
    },
    {
        categoryId: 'digestive',
        categoryLabel: 'SISTEM PENCERNAAN',
        symptoms: [
            { symptomId: 'bloating_gas', symptomLabel: 'Perut Kembung/Terasa Penuh Gas' },
            { symptomId: 'abdominal_pain_cramps', symptomLabel: 'Nyeri Perut/Kram Perut' },
            { symptomId: 'nausea_vomiting_non_motion', symptomLabel: 'Mual atau Muntah (bukan karena mabuk perjalanan)' },
            { symptomId: 'diarrhea', symptomLabel: 'Diare (feses cair >3x/hari)' },
            { symptomId: 'constipation', symptomLabel: 'Konstipasi/Sembelit (BAB <3x/minggu atau sulit)' },
            { symptomId: 'incomplete_bowel_movement', symptomLabel: 'BAB Terasa Tidak Tuntas' },
            { symptomId: 'mucus_blood_in_stool', symptomLabel: 'Ada Lendir atau Darah pada Feses' },
            { symptomId: 'heartburn_acid_reflux', symptomLabel: 'Heartburn/Refluks Asam/Rasa Terbakar di Dada' },
            { symptomId: 'difficulty_swallowing', symptomLabel: 'Sulit Menelan Makanan/Minuman' },
            { symptomId: 'excessive_burping', symptomLabel: 'Bersendawa Berlebihan' },
        ],
    },
    {
        categoryId: 'urinary',
        categoryLabel: 'SISTEM URINARIA (PERKEMIHAN)',
        symptoms: [
            { symptomId: 'frequent_urination_daytime', symptomLabel: 'Sering Buang Air Kecil (siang hari)' },
            { symptomId: 'painful_burning_urination', symptomLabel: 'Nyeri/Perih Saat Buang Air Kecil' },
            { symptomId: 'urinary_urgency_incontinence', symptomLabel: 'Kebelet/Tidak Bisa Menahan Buang Air Kecil' },
            { symptomId: 'strong_unusual_cloudy_urine_odor', symptomLabel: 'Urin Berbau Menyengat/Tidak Biasa/Keruh' },
            { symptomId: 'nighttime_urination_gt1', symptomLabel: 'Bangun di Malam Hari untuk BAK (>1 kali)' },
            { symptomId: 'weak_interrupted_urine_stream', symptomLabel: 'Aliran urin lemah/terputus-putus' },
        ],
    },
    {
        categoryId: 'reproductive_female',
        categoryLabel: 'SISTEM REPRODUKSI (KHUSUS WANITA)',
        symptoms: [
            { symptomId: 'irregular_menstrual_cycle', symptomLabel: 'Siklus Menstruasi Tidak Teratur' },
            { symptomId: 'severe_menstrual_pain_dysmenorrhea', symptomLabel: 'Nyeri Haid Hebat (Dismenore)' },
            { symptomId: 'heavy_light_menstrual_bleeding', symptomLabel: 'Perdarahan Haid Sangat Banyak atau Sangat Sedikit' },
            { symptomId: 'severe_pms_symptoms', symptomLabel: 'Gejala PMS Berat (perubahan mood, kembung, nyeri payudara, dll.)' },
            { symptomId: 'abnormal_vaginal_discharge', symptomLabel: 'Keputihan Abnormal (bau, warna, gatal)' },
            { symptomId: 'painful_intercourse', symptomLabel: 'Nyeri Saat Berhubungan Seksual' },
            { symptomId: 'decreased_libido_female', symptomLabel: 'Penurunan Libido/Gairah Seksual' },
            { symptomId: 'menopausal_perimenopausal_symptoms', symptomLabel: 'Gejala Menopause/Perimenopause (hot flashes, keringat malam, vagina kering)' },
            { symptomId: 'history_infertility_female', symptomLabel: 'Riwayat Infertilitas/Sulit Hamil' },
        ],
    },
    {
        categoryId: 'reproductive_male',
        categoryLabel: 'SISTEM REPRODUKSI (KHUSUS PRIA)',
        symptoms: [
            { symptomId: 'decreased_libido_male', symptomLabel: 'Penurunan Libido/Gairah Seksual' },
            { symptomId: 'erectile_dysfunction', symptomLabel: 'Disfungsi Ereksi/Kesulitan Mempertahankan Ereksi' },
            { symptomId: 'prostate_issues', symptomLabel: 'Masalah Prostat (sering BAK malam hari, aliran urin lemah)' },
            { symptomId: 'testicular_pelvic_pain_male', symptomLabel: 'Nyeri Testis/Panggul' },
            { symptomId: 'history_infertility_male', symptomLabel: 'Riwayat Infertilitas' },
        ],
    },
    {
        categoryId: 'musculoskeletal',
        categoryLabel: 'SISTEM MUSKULOSKELETAL (OTOT & TULANG)',
        symptoms: [
            { symptomId: 'joint_pain', symptomLabel: 'Nyeri Sendi' },
            { symptomId: 'joint_stiffness', symptomLabel: 'Kaku Sendi (terutama di pagi hari atau setelah lama tidak bergerak)' },
            { symptomId: 'joint_swelling', symptomLabel: 'Bengkak pada Sendi' },
            { symptomId: 'unexplained_muscle_pain_myalgia', symptomLabel: 'Nyeri Otot (Myalgia) yang tidak jelas penyebabnya' },
            { symptomId: 'muscle_weakness', symptomLabel: 'Kelemahan Otot' },
            { symptomId: 'frequent_muscle_cramps', symptomLabel: 'Kram Otot yang Sering' },
        ],
    },
    {
        categoryId: 'nervous_system_brain',
        categoryLabel: 'SISTEM SARAF & OTAK',
        symptoms: [
            { symptomId: 'brain_fog', symptomLabel: 'Kesulitan Berpikir Jernih (Brain Fog)' },
            { symptomId: 'difficulty_concentrating_focusing', symptomLabel: 'Sulit Berkonsentrasi/Mempertahankan Fokus' },
            { symptomId: 'memory_lapses_forgetfulness', symptomLabel: 'Daya Ingat Menurun/Mudah Lupa' },
            { symptomId: 'numbness_tingling_extremities', symptomLabel: 'Kesemutan/Mati Rasa (Baal) pada Tangan/Kaki' },
            { symptomId: 'tremors_shaking', symptomLabel: 'Tremor/Gemetar pada Tangan atau Bagian Tubuh Lain' },
            { symptomId: 'balance_coordination_problems', symptomLabel: 'Gangguan Keseimbangan/Koordinasi' },
        ],
    },
    {
        categoryId: 'skin_hair_nails',
        categoryLabel: 'KULIT, RAMBUT, KUKU',
        symptoms: [
            { symptomId: 'dry_rough_scaly_skin', symptomLabel: 'Kulit Kering/Kasar/Bersisik' },
            { symptomId: 'oily_severe_acne_skin', symptomLabel: 'Kulit Berminyak/Berjerawat Parah' },
            { symptomId: 'frequent_skin_rashes_itching', symptomLabel: 'Ruam Kulit/Gatal-gatal yang sering muncul' },
            { symptomId: 'eczema_dermatitis', symptomLabel: 'Eksim/Dermatitis' },
            { symptomId: 'psoriasis', symptomLabel: 'Psoriasis' },
            { symptomId: 'easy_bruising', symptomLabel: 'Mudah Memar' },
            { symptomId: 'excessive_hair_loss', symptomLabel: 'Rambut Rontok Berlebihan' },
            { symptomId: 'dry_brittle_split_hair', symptomLabel: 'Rambut Kering/Rapuh/Mudah Patah/Bercabang' },
            { symptomId: 'dandruff_itchy_oily_scalp', symptomLabel: 'Ketombe/Kulit Kepala Gatal/Berminyak' },
            { symptomId: 'brittle_splitting_ridged_discolored_nails', symptomLabel: 'Kuku Rapuh/Mudah Patah/Bergaris/Berubah Warna' },
        ],
    },
    {
        categoryId: 'energy_metabolism',
        categoryLabel: 'ENERGI & METABOLISME',
        symptoms: [
            { symptomId: 'drastic_energy_fluctuations', symptomLabel: 'Energi Naik Turun Secara Drastis Sepanjang Hari' },
            { symptomId: 'caffeine_dependence', symptomLabel: 'Merasa Perlu Kafein untuk Bisa Berfungsi' },
            { symptomId: 'cold_intolerance', symptomLabel: 'Intoleransi Suhu Dingin (mudah kedinginan)' },
            { symptomId: 'heat_intolerance', symptomLabel: 'Intoleransi Suhu Panas (mudah kepanasan)' },
            { symptomId: 'excessive_or_lack_of_sweating', symptomLabel: 'Berkeringat Berlebihan atau Justru Kurang Berkeringat' },
            { symptomId: 'difficulty_gaining_losing_weight', symptomLabel: 'Berat Badan Sulit Naik atau Sulit Turun meskipun sudah berusaha' },
            { symptomId: 'significant_appetite_changes', symptomLabel: 'Nafsu Makan Berubah Signifikan (Meningkat atau Menurun drastis)' },
        ],
    },
    {
        categoryId: 'mood_emotions',
        categoryLabel: 'SUASANA HATI & EMOSI',
        symptoms: [
            { symptomId: 'profound_sadness_depression', symptomLabel: 'Perasaan Sedih/Depresi yang Mendalam' },
            { symptomId: 'excessive_anxiety_worry', symptomLabel: 'Kecemasan/Khawatir Berlebihan' },
            { symptomId: 'irritability_easy_anger', symptomLabel: 'Mudah Marah/Iritabilitas' },
            { symptomId: 'rapid_drastic_mood_swings', symptomLabel: 'Perubahan Mood yang Cepat dan Drastis' },
            { symptomId: 'loss_of_interest_pleasure', symptomLabel: 'Kehilangan Minat atau Kesenangan pada Aktivitas yang Biasa Dinikmati' },
            { symptomId: 'feelings_of_hopelessness_worthlessness', symptomLabel: 'Merasa Putus Asa/Tidak Berharga' },
            { symptomId: 'panic_attacks', symptomLabel: 'Serangan Panik (rasa takut intens tiba-tiba, jantung berdebar, sesak)' },
        ],
    },
    {
        categoryId: 'other_symptoms',
        categoryLabel: 'LAIN-LAIN',
        symptoms: [
            { symptomId: 'excessive_thirst', symptomLabel: 'Sering Merasa Haus Berlebihan' },
            { symptomId: 'excessive_hunger', symptomLabel: 'Sering Merasa Lapar Berlebihan' },
            { symptomId: 'swollen_lymph_nodes', symptomLabel: 'Pembengkakan Kelenjar Getah Bening (leher, ketiak, selangkangan)' },
            { symptomId: 'recurrent_low_grade_fever', symptomLabel: 'Demam Ringan Berulang Tanpa Sebab Jelas' },
        ],
    },
];


// Section 13 (J): Readiness & Expectations
export const LAB_TEST_READINESS_OPTIONS = [
  { value: 'very_ready', label: 'Sangat Siap' },
  { value: 'ready', label: 'Cukup Siap' },
  { value: 'hesitant', label: 'Ragu-ragu' },
  { value: 'not_ready', label: 'Tidak Siap' },
];

export const REFERRAL_SOURCE_OPTIONS = [
  { value: 'doctor', label: 'Rekomendasi Dokter Lain' },
  { value: 'friend_family', label: 'Rekomendasi Teman/Keluarga' },
  { value: 'social_media', label: 'Media Sosial (Sebutkan)' },
  { value: 'website_article', label: 'Website/Artikel Online' },
  { value: 'seminar_workshop', label: 'Seminar/Workshop' },
  { value: 'other', label: 'Lainnya (Sebutkan)' },
];

// comprehensive-health-questionnaire//zwebcss.md
:root {
  --font-sans: 'Inter', sans-serif;
  --font-display: 'Manrope', 'sans-serif';

  /* Reading Preferences Variables */
  --font-size-sm: 0.9rem;
  --font-size-base: 1rem;
  --font-size-lg: 1.1rem;
  --font-size-xl: 1.2rem;
  --line-height-normal: 1.6;
  --line-height-relaxed: 1.8;
  --line-height-loose: 2;

  /* Slate palette */
  --color-slate-50: 220 20% 97%; --color-slate-100: 220 16% 94%; --color-slate-200: 220 13% 91%; --color-slate-300: 220 14% 85%; --color-slate-400: 220 13% 65%; --color-slate-500: 220 9% 55%; --color-slate-600: 220 9% 45%; --color-slate-700: 220 10% 35%; --color-slate-800: 220 13% 25%; --color-slate-900: 220 15% 18%; --color-slate-950: 224 23% 7%;
  
  /* Default Light Theme */
  --color-brand-50: 219 100% 97%; --color-brand-100: 218 95% 94%; --color-brand-200: 219 92% 88%; --color-brand-300: 220 89% 80%; --color-brand-400: 221 84% 71%; --color-brand-500: 221 77% 62%; --color-brand-600: 221 72% 53%; --color-brand-700: 222 66% 45%; --color-brand-800: 223 63% 38%; --color-brand-900: 224 57% 31%; --color-brand-950: 225 61% 18%;
  --color-accent-50: 48 100% 97%; --color-accent-100: 47 95% 93%; --color-accent-200: 47 93% 86%; --color-accent-300: 46 91% 76%; --color-accent-400: 45 89% 65%; --color-accent-500: 43 89% 55%; --color-accent-600: 41 89% 48%; --color-accent-700: 38 82% 41%; --color-accent-800: 36 78% 34%; --color-accent-900: 34 72% 28%; --color-accent-950: 32 80% 15%;
}

html[data-theme='dark'] {
  --color-slate-50: 220 14% 71%; --color-slate-100: 220 14% 65%; --color-slate-200: 220 13% 55%; --color-slate-300: 220 14% 45%; --color-slate-400: 220 13% 35%; --color-slate-500: 220 10% 29%; --color-slate-600: 225 10% 22%; --color-slate-700: 225 10% 19%; --color-slate-800: 225 10% 16%; --color-slate-900: 225 11% 12%; --color-slate-950: 224 23% 7%;
  --color-brand-50: 225 35% 95%; --color-brand-100: 224 44% 89%; --color-brand-200: 224 52% 79%; --color-brand-300: 223 58% 68%; --color-brand-400: 222 65% 56%; --color-brand-500: 221 72% 48%; --color-brand-600: 221 77% 41%; --color-brand-700: 222 81% 35%; --color-brand-800: 222 84% 29%; --color-brand-900: 223 85% 24%; --color-brand-950: 224 86% 14%;
  --color-accent-50: 30 50% 95%; --color-accent-100: 31 57% 88%; --color-accent-200: 32 66% 77%; --color-accent-300: 34 75% 65%; --color-accent-400: 36 84% 53%; --color-accent-500: 38 92% 48%; --color-accent-600: 41 94% 43%; --color-accent-700: 43 92% 38%; --color-accent-800: 45 88% 33%; --color-accent-900: 46 83% 28%; --color-accent-950: 48 90% 16%;
}

html[data-theme='nature-light'] {
  --color-slate-50: 53 25% 96%; --color-slate-100: 53 20% 92%; --color-slate-200: 53 18% 86%; --color-slate-300: 53 15% 77%; --color-slate-400: 53 14% 65%; --color-slate-500: 53 13% 55%; --color-slate-600: 53 15% 45%; --color-slate-700: 53 18% 35%; --color-slate-800: 53 20% 25%; --color-slate-900: 78 25% 18%; --color-slate-950: 78 30% 13%;
  --color-brand-50: 78 60% 95%; --color-brand-100: 78 60% 90%; --color-brand-200: 78 60% 80%; --color-brand-300: 78 55% 70%; --color-brand-400: 78 50% 55%; --color-brand-500: 78 65% 40%; --color-brand-600: 78 80% 28%; --color-brand-700: 78 85% 23%; --color-brand-800: 78 90% 18%; --color-brand-900: 78 95% 15%; --color-brand-950: 78 98% 10%;
  --color-accent-50: 68 70% 96%; --color-accent-100: 68 70% 92%; --color-accent-200: 68 68% 85%; --color-accent-300: 68 66% 75%; --color-accent-400: 68 65% 65%; --color-accent-500: 68 64% 56%; --color-accent-600: 68 60% 48%; --color-accent-700: 68 55% 40%; --color-accent-800: 68 50% 32%; --color-accent-900: 68 45% 25%; --color-accent-950: 68 48% 15%;
}

html[data-theme='nature-dark'] {
  --color-slate-50: 78 17% 96%; --color-slate-100: 78 16% 90%; --color-slate-200: 78 16% 81%; --color-slate-300: 78 15% 72%; --color-slate-400: 78 14% 61%; --color-slate-500: 78 12% 55%; --color-slate-600: 78 11% 44%; --color-slate-700: 78 11% 35%; --color-slate-800: 78 10% 28%; --color-slate-900: 78 9% 23%; --color-slate-950: 78 12% 14%;
  --color-brand-50: 78 33% 15%; --color-brand-100: 78 34% 20%; --color-brand-200: 78 34% 24%; --color-brand-300: 78 32% 29%; --color-brand-400: 78 31% 34%; --color-brand-500: 78 31% 44%; --color-brand-600: 78 31% 53%; --color-brand-700: 78 37% 63%; --color-brand-800: 78 47% 74%; --color-brand-900: 78 64% 85%; --color-brand-950: 78 67% 94%;
  --color-accent-50: 68 28% 16%; --color-accent-100: 68 28% 20%; --color-accent-200: 68 28% 25%; --color-accent-300: 68 28% 29%; --color-accent-400: 68 28% 35%; --color-accent-500: 68 29% 45%; --color-accent-600: 68 34% 55%; --color-accent-700: 68 41% 65%; --color-accent-800: 68 51% 77%; --color-accent-900: 68 62% 88%; --color-accent-950: 68 69% 95%;
}

html[data-theme='high-contrast'] {
  --color-slate-50: 0 0% 0%; --color-slate-100: 0 0% 0%; --color-slate-200: 0 0% 0%; --color-slate-300: 0 0% 100%; --color-slate-400: 0 0% 100%; --color-slate-500: 0 0% 100%; --color-slate-600: 0 0% 100%; --color-slate-700: 0 0% 100%; --color-slate-800: 0 0% 100%; --color-slate-900: 0 0% 100%; --color-slate-950: 0 0% 100%;
  --color-brand-500: 60 100% 50%; /* Yellow */
  --color-brand-600: 60 100% 50%;
  --color-accent-500: 200 100% 50%; /* Cyan */
  --color-accent-600: 200 100% 50%;
}
html[data-theme='high-contrast'] body { background-color: #000; color: #FFF; }
html[data-theme='high-contrast'] a { color: hsl(var(--color-accent-500)); }
html[data-theme='high-contrast'] button, html[data-theme='high-contrast'] input, html[data-theme='high-contrast'] select, html[data-theme='high-contrast'] textarea, html[data-theme='high-contrast'] div, html[data-theme='high-contrast'] section, html[data-theme='high-contrast'] article, html[data-theme='high-contrast'] aside { border-color: #FFF !important; background-color: #000 !important; color: #FFF !important; }
html[data-theme='high-contrast'] .text-transparent { color: transparent; }
html[data-theme='high-contrast'] .bg-clip-text { -webkit-text-fill-color: initial; }

.dark { color-scheme: dark; }
body { font-family: var(--font-sans); }
.font-display { font-family: var(--font-display); }

@keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
@keyframes fadeInUp { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }

.animate-fade-in-up {
  animation: fadeInUp 0.3s ease-out backwards;
}

main { animation: fadeIn 0.4s ease-out; }

*:focus-visible { outline: 2px solid hsl(var(--color-accent-500)); outline-offset: 2px; border-radius: 4px; }

/* Scroll-in animation */
.scroll-animate {
  opacity: 0;
  transform: translateY(20px);
  transition: opacity 0.6s ease-out, transform 0.6s ease-out;
}
.scroll-animate.is-visible {
  opacity: 1;
  transform: translateY(0);
}

/* Hero Section Enhancements */
@keyframes blob {
  0% { transform: translate(0px, 0px) scale(1); }
  33% { transform: translate(30px, -50px) scale(1.1); }
  66% { transform: translate(-20px, 20px) scale(0.9); }
  100% { transform: translate(0px, 0px) scale(1); }
}

.animate-blob {
  animation: blob 7s infinite;
}

.animation-delay-2000 { animation-delay: -2s; }
.animation-delay-4000 { animation-delay: -4s; }
.animation-delay-6000 { animation-delay: -6s; }

/* -- START: New Hero Visual Cards Styles -- */
.hero-visual-container {
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  grid-template-rows: repeat(9, 1fr);
  gap: 0.75rem;
  height: 540px;
  width: 100%;
  max-width: 520px;
  perspective: 1200px;
  position: relative;
}

.hero-card-wrapper {
  transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out, filter 0.3s ease-in-out, opacity 0.3s ease-in-out;
  z-index: 1;
  will-change: transform, filter, opacity;
  cursor: pointer;
}

.hero-card-rotator {
  height: 100%;
  width: 100%;
}

.hero-visual-container:not(.has-active) .hero-card-wrapper:hover {
  transform: translateY(-8px) scale(1.02);
  z-index: 50;
  box-shadow: 0 20px 35px -10px rgb(0 0 0 / 0.15), 0 10px 15px -8px rgb(0 0 0 / 0.1);
}

.hero-visual-container.has-active .hero-card-wrapper.is-inactive {
  filter: blur(3px);
  opacity: 1;
  transform: scale(0.98);
}

.hero-visual-container.has-active .hero-card-wrapper.is-active {
  transform: scale(1.05);
  z-index: 100;
  box-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.2), 0 15px 20px -10px rgb(0 0 0 / 0.15);
  filter: none;
  opacity: 1;
}

.hero-card {
  height: 100%;
  width: 100%;
  border-radius: 1.5rem; /* 24px */
  border: 1px solid hsl(var(--color-slate-200));
  background-color: hsl(var(--color-slate-50));
  padding: 1rem; /* 16px */
  box-shadow: 0 10px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
  position: relative;
  overflow: hidden;
  cursor: pointer;
}
.dark .hero-card {
  border-color: hsl(var(--color-slate-800));
  background-color: hsl(var(--color-slate-900));
}
.hero-card.is-quote {
  background-color: hsl(var(--color-slate-100));
}
.dark .hero-card.is-quote {
  background-color: hsl(var(--color-slate-800));
}
.hero-card .value-delta {
  text-shadow: 0 0 15px hsla(var(--color-brand-500) / 0.7);
}
.biomarker-status-bar {
  position: absolute;
  left: 0;
  top: 1rem;
  bottom: 1rem;
  width: 5px;
  background-color: hsl(var(--color-brand-500));
  border-radius: 0 4px 4px 0;
}
/* -- END: New Hero Visual Cards Styles -- */


/* -- START: Trust Badges Marquee -- */
@keyframes scroll-marquee {
  from { transform: translateX(0); }
  to { transform: translateX(-50%); }
}
.marquee-container {
  overflow: hidden;
  position: relative;
  width: 100%;
}
.marquee-content {
  display: flex;
  width: 200%; /* Double width for seamless loop */
  animation: scroll-marquee 40s linear infinite;
}
.marquee-item {
  flex-shrink: 0;
  width: calc(100% / 12); /* 6 original + 6 duplicated */
  padding: 0 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
}
.dark .marquee-item img {
  filter: invert(1) brightness(1.5);
}
/* -- END: Trust Badges Marquee -- */


/* -- START: Case Study Stats -- */
.stat-visualizer {
  background-color: hsl(var(--color-slate-200));
  border-radius: 9999px;
  overflow: hidden;
  height: 12px;
}
.dark .stat-visualizer {
  background-color: hsl(var(--color-slate-700));
}
.stat-bar {
  height: 100%;
  border-radius: 9999px;
  transition: width 0.8s cubic-bezier(0.25, 1, 0.5, 1);
}
.stat-bar-before { background-color: hsl(var(--color-slate-400)); }
.stat-bar-after { background-color: hsl(var(--color-brand-500)); }
.stat-marker { transition: left 0.8s ease-out; }
/* -- END: Case Study Stats -- */


/* -- START: Testimonials Carousel -- */
.testimonial-carousel-container {
  overflow: hidden;
  position: relative;
}
.testimonial-carousel-track {
  display: flex;
  transition: transform 0.5s ease-in-out;
}
.testimonial-slide {
  flex: 0 0 100%;
  padding: 0 0.5rem;
}
@media (min-width: 640px) {
  .testimonial-slide { flex-basis: 50%; }
}
@media (min-width: 1024px) {
  .testimonial-slide { flex-basis: 33.3333%; }
}
/* -- END: Testimonials Carousel -- */


/* -- START: Health Quiz -- */
.quiz-option {
  transition: all 0.2s ease-in-out;
}
.quiz-option.selected {
  border-color: hsl(var(--color-brand-500));
  background-color: hsl(var(--color-brand-50));
  transform: translateY(-2px);
  box-shadow: 0 4px 10px -2px hsl(var(--color-brand-500) / 0.2);
}
.dark .quiz-option.selected {
  background-color: hsl(var(--color-brand-900)/0.3);
}

.quiz-progress-bar-bg {
  background-color: hsl(var(--color-slate-200));
}
.dark .quiz-progress-bar-bg {
  background-color: hsl(var(--color-slate-700));
}
.quiz-progress-bar-fg {
  transition: width 0.3s ease-out;
}

@keyframes result-score-anim {
  from { stroke-dashoffset: 283; }
}

.quiz-result-gauge-bg {
  stroke: hsl(var(--color-slate-200));
}
.dark .quiz-result-gauge-bg {
  stroke: hsl(var(--color-slate-700));
}
.quiz-result-gauge-fg {
  stroke: hsl(var(--color-brand-500));
  transition: stroke-dashoffset 1s cubic-bezier(0.25, 1, 0.5, 1);
  animation: result-score-anim 1s cubic-bezier(0.25, 1, 0.5, 1) forwards;
}
/* -- END: Health Quiz -- */

/* -- START: Pricing Tiers Section -- */
.tier-card-recommended {
  transform: scale(1.05);
  border-color: transparent;
  background-image: linear-gradient(hsl(var(--color-slate-50)), hsl(var(--color-slate-50))), linear-gradient(to bottom right, hsl(var(--color-brand-500)), hsl(var(--color-accent-500)));
  background-origin: border-box;
  background-clip: padding-box, border-box;
  box-shadow: var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow);
  box-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.15);
}
.dark .tier-card-recommended {
  background-image: linear-gradient(hsl(var(--color-slate-950)), hsl(var(--color-slate-950))), linear-gradient(to bottom right, hsl(var(--color-brand-500)), hsl(var(--color-accent-500)));
}
.tier-card-highlighted {
  box-shadow: 0 0 0 4px hsl(var(--color-accent-500) / 0.5), 0 10px 25px -5px rgb(0 0 0 / 0.1);
  transform: scale(1.05) translateY(-8px);
}

.feature-tooltip-container {
  position: relative;
  display: inline-flex;
  margin-left: 6px;
}

.feature-tooltip-icon {
  cursor: help;
}

.feature-tooltip-text {
  visibility: hidden;
  opacity: 0;
  width: 240px;
  background-color: hsl(var(--color-slate-800));
  color: #fff;
  text-align: left;
  border-radius: 8px;
  padding: 10px;
  position: absolute;
  z-index: 10;
  bottom: 125%;
  left: 50%;
  transform: translateX(-50%);
  transition: opacity 0.2s, visibility 0.2s;
  font-size: 13px;
  line-height: 1.5;
  pointer-events: none;
}
.dark .feature-tooltip-text {
  background-color: hsl(var(--color-slate-700));
}

.feature-tooltip-text::after {
  content: '';
  position: absolute;
  top: 100%;
  left: 50%;
  margin-left: -5px;
  border-width: 5px;
  border-style: solid;
  border-color: hsl(var(--color-slate-800)) transparent transparent transparent;
}
.dark .feature-tooltip-text::after {
  border-color: hsl(var(--color-slate-700)) transparent transparent transparent;
}

.feature-tooltip-container:hover .feature-tooltip-text {
  visibility: visible;
  opacity: 1;
}
/* -- END: Pricing Tiers Section -- */

/* -- START: Program Selector -- */
.selector-option {
  transition: all 0.2s ease-in-out;
}
.selector-option:hover {
  transform: translateY(-2px);
}
.selector-option.selected {
  border-color: hsl(var(--color-brand-500));
  background-color: hsl(var(--color-brand-50));
  transform: translateY(-2px);
  box-shadow: 0 4px 10px -2px hsl(var(--color-brand-500) / 0.2);
}
.dark .selector-option.selected {
  background-color: hsl(var(--color-brand-900)/0.3);
}
/* -- END: Program Selector -- */

/* -- START: Biomarker Explorer -- */
.biomarker-gauge-track {
  stroke: hsl(var(--color-slate-200));
}
.dark .biomarker-gauge-track {
  stroke: hsl(var(--color-slate-700));
}
.biomarker-gauge-value {
  stroke: hsl(var(--color-slate-400));
  transition: stroke-dashoffset 0.8s cubic-bezier(0.25, 1, 0.5, 1);
}
.biomarker-range-optimal {
  fill: hsl(var(--color-brand-500) / 0.2);
}
.biomarker-range-borderline {
  fill: hsl(var(--color-accent-500) / 0.2);
}
.biomarker-range-high {
  fill: hsl(var(--tw-color-red-500) / 0.2);
}

.biomarker-tab {
  transition: all 0.2s ease-in-out;
  background-color: hsl(var(--color-slate-100));
  color: hsl(var(--color-slate-600));
}
.dark .biomarker-tab {
  background-color: hsl(var(--color-slate-900));
   color: hsl(var(--color-slate-300));
}
.biomarker-tab.active {
  background-color: hsl(var(--color-brand-500));
  color: white;
  box-shadow: 0 4px 10px -2px hsl(var(--color-brand-500) / 0.3);
}
.dark .biomarker-tab.active {
  background-color: hsl(var(--color-brand-600));
  color: white;
}
/* -- END: Biomarker Explorer -- */


/* Subtle background patterns */
.section-bg-pattern {
  background-image: radial-gradient(hsl(var(--color-slate-200) / 0.4) 1px, transparent 1px);
  background-size: 16px 16px;
}
.dark .section-bg-pattern {
  background-image: radial-gradient(hsl(var(--color-slate-800) / 0.5) 1px, transparent 1px);
}

/* Tooltip for trust badges */
.tooltip-container {
  position: relative;
  display: inline-block;
  transition: opacity 0.3s, transform 0.3s;
}
.tooltip-text {
  visibility: hidden;
  width: 140px;
  background-color: hsl(var(--color-slate-800));
  color: #fff;
  text-align: center;
  border-radius: 6px;
  padding: 8px;
  position: absolute;
  z-index: 10;
  bottom: 125%;
  left: 50%;
  margin-left: -70px;
  opacity: 0;
  transition: opacity 0.3s, visibility 0.3s;
  font-size: 12px;
  pointer-events: none;
}
.dark .tooltip-text {
  background-color: hsl(var(--color-slate-100));
  color: hsl(var(--color-slate-900));
}
.tooltip-container:hover .tooltip-text {
  visibility: visible;
  opacity: 1;
}

/* -- START: Journey Timeline -- */
.journey-timeline-container {
  position: relative;
  display: flex;
  flex-direction: column;
  gap: 2rem; /* Spacing between items */
}

/* The connecting line */
.journey-timeline-container::before {
  content: '';
  position: absolute;
  top: 1.5rem; /* Start after the center of the first icon */
  bottom: 1.5rem; /* End before the center of the last icon */
  left: 1.5rem;
  width: 2px;
  background-color: hsl(var(--color-slate-200));
  transform-origin: top;
}
.dark .journey-timeline-container::before {
  background-color: hsl(var(--color-slate-800));
}
/* Animation for the line */
@keyframes grow-line { from { transform: scaleY(0); } to { transform: scaleY(1); } }
.is-visible .journey-timeline-container::before {
  animation: grow-line 1s ease-out forwards;
}

.journey-timeline-item {
  position: relative;
  padding-left: 4.5rem; /* Space for the icon and line */
}

.journey-timeline-content {
  position: relative;
  background: hsl(var(--color-slate-50)/0.5);
  padding: 1.5rem;
  border-radius: 1.5rem;
  border: 1px solid hsl(var(--color-slate-200));
}
.dark .journey-timeline-content {
  background: hsl(var(--color-slate-900)/0.3);
  border-color: hsl(var(--color-slate-800));
}

.journey-timeline-icon {
  position: absolute;
  left: -2.25rem;
  top: 50%;
  transform: translateY(-50%);
  display: grid;
  place-items: center;
  height: 3rem;
  width: 3rem;
  border-radius: 9999px;
  background-color: hsl(var(--color-brand-100));
  color: hsl(var(--color-brand-600));
  border: 4px solid hsl(var(--color-slate-100)); /* To overlap the line */
}
.dark .journey-timeline-icon {
  background-color: hsl(var(--color-brand-900) / 0.4);
  color: hsl(var(--color-brand-300));
  border-color: hsl(var(--color-slate-900)/0.3);
}
/* Animation for the icons */
@keyframes pop-in {
  from { transform: translateY(-50%) scale(0); }
  to { transform: translateY(-50%) scale(1); }
}
.is-visible .journey-timeline-icon {
  animation: pop-in 0.5s ease-out forwards;
}

/* Apply animation delay to each item's icon */
.is-visible .journey-timeline-item:nth-child(1) .journey-timeline-icon { animation-delay: 0.1s; }
.is-visible .journey-timeline-item:nth-child(2) .journey-timeline-icon { animation-delay: 0.3s; }
.is-visible .journey-timeline-item:nth-child(3) .journey-timeline-icon { animation-delay: 0.5s; }
.is-visible .journey-timeline-item:nth-child(4) .journey-timeline-icon { animation-delay: 0.7s; }
/* -- END: Journey Timeline -- */


/* Reading Background Preferences */
.reading-theme-transition { transition: background-color 0.3s, color 0.3s; }
body[data-reading-theme='sepia'] .blog-post-section { background-color: #fbf5e9; }
body[data-reading-theme='sepia'] .blog-post-section .prose, body[data-reading-theme='sepia'] .blog-post-section h1 { color: #5b4636; }
body[data-reading-theme='gray'] .blog-post-section { background-color: #e5e5e5; }
body[data-reading-theme='gray'] .blog-post-section .prose, body[data-reading-theme='gray'] .blog-post-section h1 { color: #262626; }
body[data-reading-theme='dark'] .blog-post-section { background-color: #1a1a1a; }
body[data-reading-theme='dark'] .blog-post-section .prose, body[data-reading-theme='dark'] .blog-post-section h1, body[data-reading-theme='dark'] .blog-post-section a { color: #d1d1d1; }
body[data-reading-theme='dark'] .blog-post-section a:hover { color: #fff; }

/* Improved prose for blog posts */
.prose {
  font-size: var(--prose-font-size, var(--font-size-base));
  line-height: var(--prose-line-height, var(--line-height-relaxed));
  transition: font-size 0.2s, line-height 0.2s, color 0.3s;
}
.prose img { cursor: zoom-in; }
.prose h2 { scroll-margin-top: 80px; }
.prose pre { position: relative; }
.prose pre code { background-color: transparent !important; }
.prose sup[data-footnote] { cursor: help; color: hsl(var(--color-accent-600)); font-weight: bold; }

/* Active TOC link */
.toc-link-active { color: hsl(var(--color-accent-600)) !important; font-weight: 600; transform: translateX(4px); }
.dark .toc-link-active { color: hsl(var(--color-accent-400)) !important; }

/* Threaded comments */
.comment-reply { margin-left: 2.5rem; padding-left: 1rem; border-left: 2px solid hsl(var(--color-slate-200)); }
.dark .comment-reply { border-left-color: hsl(var(--color-slate-800)); }

/* Clap button animation */
@keyframes clap-burst { 0% { transform: scale(1); opacity: 1; } 50% { transform: scale(1.4); opacity: 0.7; } 100% { transform: scale(1); opacity: 1; } }
.clap-burst { animation: clap-burst 0.3s ease-in-out; }
@keyframes copy-feedback { 0% { background-color: hsl(var(--color-slate-200)); } 50% { background-color: hsl(var(--color-accent-300)); }
// comprehensive-health-questionnaire//zcomment.md
[ x ] Linimasa kesehatan pasien yg tambh peristiwa tdk jelas, tdk bs d pencet
[ x ] Riwayat medis pasien ketika d klik, tidak bs klik tombol tambah kondisi
[ x ] Riwayat keluarga, pd tombol tambah riwayat keluarga tdk bs diklik
[ x ] Pd gaya hidup. Tombol tambah diet khusus tdk bisa d klik
[ x ] Tombol tambah suplemen pd suplemen yg dikonsumsi saat ini tdk bisa d klik.
[  ] Saat pilih konsumsi air minum. Jenis air minum tdk bs diganti
[  ] Pd lingkungan dan paparan pasien. Tmpt tinggal saat ini tdk bs d pikih
// comprehensive-health-questionnaire//tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "experimentalDecorators": true,
    "useDefineForClassFields": false,
    "module": "ESNext",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "allowJs": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,

    "paths": {
      "@/*" :  ["./*"]
    }
  }
}

// comprehensive-health-questionnaire//initprompt.tsx
// Continue code the missing parts:
//
// # Project Plan: Interactive Functional Medicine Form
//
// **Goal:** Create an interactive, beautiful, responsive, and user-friendly web-based form from the provided comprehensive Functional Medicine questionnaire, using SvelteKit, Tailwind CSS, and Formspree (free tier).
//
// **Core Technologies:**
// *   Frontend: SvelteKit
// *   Styling: Tailwind CSS
// *   Form Submission: Formspree
// *   Animations: Svelte's `transition:` directive with CSS
//
// **Overall Design Philosophy:**
// *   Multi-Step/Paged Form
// *   Progress Indicator
// *   Clean, Modern, & Accessible UI (Tailwind CSS, ample whitespace, clear typography, color contrast, focus states)
// *   Responsive Design
// *   Non-Intimidating & Engaging (friendly microcopy, subtle icons, break up long sections)
// *   Smooth Transitions
//
// **Key Features:**
// *   Conditional Logic (Show/Hide)
// *   File Uploads
// *   "Prefer not to say / Don't know / Not Applicable" Options
// *   Basic Client-Side Input Validation
// *   Data Submission as Structured JSON to Formspree
// *   Clear Data Structure Mapping
//
// **Maximum Lines of Code Per File:** 200 lines (aiming for 100-200 lines for maintainability).
//
// **Proposed Folder Structure (SvelteKit):**
//
// ```
// src/
// ├── app.html                # Main HTML shell
// ├── app.css                 # Global styles (import Tailwind)
// ├── global.d.ts             # Global TypeScript definitions
// ├── hooks.client.js         # Client-side hooks
// ├── hooks.server.js         # Server-side hooks
// ├── lib/
// │   ├── assets/             # Static assets like icons
// │   ├── components/
// │   │   ├── common/         # General reusable UI components
// │   │   │   ├── Button.svelte
// │   │   │   ├── InputField.svelte
// │   │   │   ├── TextareaField.svelte
// │   │   │   ├── SelectField.svelte
// │   │   │   ├── RadioCard.svelte
// │   │   │   ├── CheckboxCard.svelte
// │   │   │   ├── FileUpload.svelte
// │   │   │   ├── ProgressBar.svelte
// │   │   │   ├── SectionHeader.svelte
// │   │   │   ├── EncouragementMessage.svelte
// │   │   │   ├── EmptyFieldOptions.svelte
// │   │   │   ├── Spinner.svelte
// │   │   │   └── Toast.svelte
// │   │   ├── formSections/   # Components for each major form section
// │   │   │   ├── Section0_Initial.svelte
// │   │   │   ├── Section1_BasicInfo.svelte
// │   │   │   ├── Section2_ChiefComplaints.svelte
// │   │   │   ├── Section3_HealthTimeline/
// │   │   │   │   ├── HealthTimeline.svelte
// │   │   │   │   └── TimelineEntry.svelte
// │   │   │   ├── Section4_MedicalHistory.svelte
// │   │   │   ├── Section5_FamilyHistory.svelte
// │   │   │   ├── Section6_Lifestyle/
// │   │   │   │   ├── Lifestyle.svelte
// │   │   │   │   ├── DietSection.svelte
// │   │   │   │   ├── ActivitySection.svelte
// │   │   │   │   └── SleepSection.svelte
// │   │   │   ├── Section7_SystemReview/
// │   │   │   │   ├── SystemReview.svelte
// │   │   │   │   ├── SymptomCategory.svelte
// │   │   │   │   └── SymptomItem.svelte
// │   │   │   ├── Section8_MedsSupplements.svelte
// │   │   │   ├── Section9_GoalsReadiness.svelte
// │   │   │   └── Section10_Consent.svelte
// │   │   └── AppHeader.svelte
// │   │   └── NavigationControls.svelte
// │   │   └── SaveProgressButton.svelte
// │   ├── stores/             # Svelte stores for state management
// │   │   ├── formStore.js      # Main store for form data, current section, etc.
// │   │   └── uiStore.js        # Store for UI states like toast visibility
// │   ├── utils/              # Utility functions
// │   │   ├── validation.js
// │   │   ├── localStorage.js
// │   │   └── helpers.js        # General helper functions
// │   └── types/              # TypeScript type definitions
// │       └── formData.d.ts
// ├── routes/
// │   └── +page.svelte        # Main page component that orchestrates the form
// │   └── +layout.svelte      # Main layout
// └── vite-env.d.ts           # Vite specific TypeScript definitions
// svelte.config.js
// tailwind.config.cjs
// postcss.config.cjs
// vite.config.js
// package.json
// ```
//
// **Component Structure (Mermaid Diagram):**
//
// ```mermaid
// graph TD
//     A[+page.svelte<br>(Orchestrator)] --> B(AppHeader.svelte)
//     A --> C(ProgressBar.svelte)
//     A --> D(NavigationControls.svelte)
//     A --> E(SaveProgressButton.svelte)
//     A --> F(Toast.svelte)
//     A --> G(formStore.js)
//     A --> H(uiStore.js)
//     A --> I(localStorage.js)
//     A --> J(validation.js)
//     A --> K(helpers.js)
//
//     A --> L(Form Sections)
//     L --> L0(Section0_Initial.svelte)
//     L --> L1(Section1_BasicInfo.svelte)
//     L --> L2(Section2_ChiefComplaints.svelte)
//     L --> L3(Section3_HealthTimeline.svelte)
//     L3 --> L3a(TimelineEntry.svelte)
//     L --> L4(Section4_MedicalHistory.svelte)
//     L --> L5(Section5_FamilyHistory.svelte)
//     L --> L6(Section6_Lifestyle.svelte)
//     L6 --> L6a(DietSection.svelte)
//     L6 --> L6b(ActivitySection.svelte)
//     L6 --> L6c(SleepSection.svelte)
//     L --> L7(Section7_SystemReview.svelte)
//     L7 --> L7a(SymptomCategory.svelte)
//     L7 --> L7b(SymptomItem.svelte)
//     L --> L8(Section8_MedsSupplements.svelte)
//     L --> L9(Section9_GoalsReadiness.svelte)
//     L --> L10(Section10_Consent.svelte)
//
//     L0 --> M(Common Components)
//     L1 --> M
//     L2 --> M
//     L3a --> M
//     L4 --> M
//     L5 --> M
//     L6a --> M
//     L6b --> M
//     L6c --> M
//     L7a --> M
//     L7b --> M
//     L8 --> M
//     L9 --> M
//     L10 --> M
//
//     M --> M1(Button.svelte)
//     M --> M2(InputField.svelte)
//     M --> M3(TextareaField.svelte)
//     M --> M4(SelectField.svelte)
//     M --> M5(RadioCard.svelte)
//     M --> M6(CheckboxCard.svelte)
//     M --> M7(FileUpload.svelte)
//     M --> M8(SectionHeader.svelte)
//     M --> M9(EncouragementMessage.svelte)
//     M --> M10(EmptyFieldOptions.svelte)
//     M --> M11(Spinner.svelte)
//
//     M2 --> M10
//     M3 --> M10
// ```
//
// **Detailed Steps:**
//
// **Phase 0: Project Setup & Foundation**
// 1.  Initialize SvelteKit project.
// 2.  Install Tailwind CSS and configure `tailwind.config.cjs`, `postcss.config.cjs`.
// 3.  Set up `src/app.css` to import Tailwind base, components, utilities.
// 4.  Define custom colors, border radius, box shadows, and animations in `tailwind.config.cjs` based on the provided HTML `:root` variables and the project rules.
// 5.  Define basic typography and body styles in `src/app.css` or `src/routes/+layout.svelte`.
// 6.  Create `src/lib/stores/formStore.js` with initial state (`currentSection`, `formData` object, `totalSections`).
// 7.  Create `src/lib/stores/uiStore.js` (e.g., for toast messages, loading states).
// 8.  Create `src/lib/utils/localStorage.js` utility for saving/loading form progress.
// 9.  Create `src/lib/utils/validation.js` for client-side validation logic.
// 10. Create `src/lib/utils/helpers.js` for general helper functions.
// 11. Create `src/lib/types/formData.d.ts` for TypeScript type definitions for the form data structure.
//
// **Phase 1: Core App Structure & Navigation**
// 1.  Create `src/routes/+page.svelte` (main form orchestrator).
// 2.  Create `src/lib/components/AppHeader.svelte` component (title, subtitle) styled with Tailwind.
// 3.  Create `src/lib/components/common/ProgressBar.svelte` component styled with Tailwind. Accept `currentStep` and `totalSteps` props. Implement shimmer animation.
// 4.  Create `src/lib/components/NavigationControls.svelte` (Previous, Next/Submit buttons) styled with Tailwind. Handle button states (disabled, text change for submit). Emit events for next/prev/submit.
// 5.  Implement basic section switching logic in `+page.svelte` using `formStore.js`.
// 6.  Create `src/lib/components/SaveProgressButton.svelte` styled with Tailwind. Implement save logic using `localStorage.js` and `formStore.js`.
// 7.  Create `src/lib/components/common/Toast.svelte` component styled with Tailwind. Control visibility and message via `uiStore.js`.
//
// **Phase 2: Common Form Element Components**
// 1.  Create `src/lib/components/common/Button.svelte` (primary, secondary variants) styled with Tailwind.
// 2.  Create `src/lib/components/common/InputField.svelte` (text, email, number, date, tel) styled with Tailwind. Include label, required indicator, and slot for description/helper text.
// 3.  Create `src/lib/components/common/TextareaField.svelte` styled with Tailwind. Include label, required indicator.
// 4.  Create `src/lib/components/common/SelectField.svelte` styled with Tailwind. Include label, required indicator.
// 5.  Create `src/lib/components/common/RadioCard.svelte` component styled with Tailwind for radio inputs. Ensure checkmark appears correctly.
// 6.  Create `src/lib/components/common/CheckboxCard.svelte` component styled with Tailwind for checkbox inputs. Ensure checkmark appears correctly.
// 7.  Create `src/lib/components/common/SectionHeader.svelte` styled with Tailwind (icon, title, subtitle).
// 8.  Create `src/lib/components/common/EncouragementMessage.svelte` styled with Tailwind.
// 9.  Create `src/lib/components/common/EmptyFieldOptions.svelte` styled with Tailwind. Implement logic to show/hide and radio buttons for "Privasi", "Tidak tahu", "Tidak Berlaku". Emit event when a reason is selected.
// 10. Integrate `EmptyFieldOptions.svelte` into `InputField.svelte` and `TextareaField.svelte`. Implement logic to show options on blur if empty and not required. Update `formStore.js` with the selected empty reason.
// 11. Create `src/lib/components/common/Spinner.svelte` styled with Tailwind.
// 12. Create `src/lib/components/common/FileUpload.svelte` (basic functionality). Include "Choose File" button and display selected file name.
//
// **Phase 3: Building Form Sections (Iterative)**
// *   For each section from the provided questionnaire (A, B, C, etc.), create a corresponding Svelte component in `src/lib/components/formSections/`.
// *   Implement the specific questions and input types for each section using the common components created in Phase 2.
// *   Implement conditional logic and smooth transitions as specified in the project rules (e.g., showing additional fields based on radio button selection).
// *   Apply styling from the provided HTML structure using Tailwind classes within each section component.
// *   For complex sections like "Health Timeline" and "System Review", create sub-components (`TimelineEntry.svelte`, `SymptomCategory.svelte`, `SymptomItem.svelte`) as outlined in the folder structure.
//
// **Phase 4: Form Logic & Submission**
// 1.  Implement client-side validation in `validation.js` and integrate with `NavigationControls.svelte` (disable Next if invalid). Highlight invalid fields.
// 2.  Implement data collection into `formStore.js` as the user fills each section. Ensure the data structure matches the conceptual JSON provided in the project rules.
// 3.  Implement `saveProgress` function using `localStorage.js`.
// 4.  Implement `loadSavedData` function and prompt the user to continue.
// 5.  Implement auto-save feature (e.g., every 30-60 seconds if data has changed).
// 6.  Configure Formspree endpoint.
// 7.  Implement form submission logic in `+page.svelte` or `NavigationControls.svelte`. Gather all data from `formStore.js`. Include data from `EmptyFieldOptions` where applicable.
// 8.  Show loading state on the submit button.
// 9.  Handle Formspree success/error responses. Display success message/redirect on successful submission (clear local storage). Display error message if submission fails.
//
// **Phase 5: Styling, Polish & Testing**
// 1.  Thoroughly review and apply all styles from the provided HTML to the Svelte components using Tailwind CSS, paying attention to variables, fonts, and specific class usages.
// 2.  Implement animations using Svelte's `transition:` directive and Tailwind/CSS keyframes as defined in `tailwind.config.cjs`.
// 3.  Ensure all conditional logic uses smooth transitions.
// 4.  Test responsiveness thoroughly on various screen sizes.
// 5.  Test all form interactions, conditional logic, and validation.
// 6.  Test file uploads.
// 7.  Test save/load progress functionality.
// 8.  Test form submission to Formspree.
// 9.  Perform accessibility checks (keyboard navigation, contrast, ARIA attributes).
// 10. Add subtle icons where appropriate.
// 11. Refine microcopy and encouragement messages.
// 12. Code cleanup and optimization.

// comprehensive-health-questionnaire//vite.config.ts
import path from 'path';
import { defineConfig, loadEnv } from 'vite';

export default defineConfig(({ mode }) => {
    const env = loadEnv(mode, '.', '');
    return {
      define: {
        'process.env.API_KEY': JSON.stringify(env.GEMINI_API_KEY),
        'process.env.GEMINI_API_KEY': JSON.stringify(env.GEMINI_API_KEY)
      },
      resolve: {
        alias: {
          '@': path.resolve(__dirname, '.'),
        }
      }
    };
});

// comprehensive-health-questionnaire//initq.tsx
Lanjutkan untuk menambahkan bagian atau pertanyaan yang belum ada dalam codebase:

====
Tentu, ini adalah versi yang disempurnakan dari formulir "Ultimate Comprehensive Edition v3.0" dengan penambahan pertanyaan mengenai siapa yang mengisi formulir dan detail kontak yang wajib diisi jika pengisi bukan pasien, serta beberapa penyempurnaan lainnya untuk memastikan ini benar-benar siap menjadi formulir.

Formulir Pra-Konsultasi Functional Medicine - Ultimate Comprehensive Edition v3.1

Tujuan: Formulir ini dirancang untuk mengumpulkan informasi sedetail mungkin mengenai riwayat kesehatan, gaya hidup, dan lingkungan pasien. Jawaban yang jujur dan lengkap akan sangat membantu kami memahami akar penyebab kondisi pasien dan menyusun rencana terapi yang paling personal dan efektif. Pengisian formulir ini mungkin membutuhkan waktu. Tidak semua pertanyaan mungkin relevan; jawablah sebaik mungkin.

BAGIAN AWAL: IDENTITAS PENGISI FORMULIR & PASIEN

Apakah Anda mengisi formulir ini untuk diri sendiri?

☐ Ya, saya adalah pasien. (Lanjutkan ke BAGIAN A)

☐ Tidak, saya mengisi untuk orang lain. (Lanjutkan ke pertanyaan 1a)

1a. Hubungan Anda dengan pasien:
* ☐ Pasangan
* ☐ Orang Tua
* ☐ Anak
* ☐ Saudara Kandung
* ☐ Wali Sah
* ☐ Tenaga Kesehatan Pasien
* ☐ Lainnya (Jelaskan): _________________________

1b. Siapa yang sebaiknya kami hubungi terkait informasi pasien dan jadwal konsultasi?
* ☐ Pasien Langsung (jika kondisi memungkinkan dan diinginkan pasien)
* ☐ Saya (pengisi formulir ini)

1c. Mohon berikan detail kontak utama untuk komunikasi (WAJIB DIISI jika Anda sebagai pengisi formulir yang akan dihubungi atau jika pasien memerlukan bantuan dalam komunikasi):
* Nama Kontak Utama: _________________________
* Nomor WhatsApp Kontak Utama (dengan kode negara, cth: +62812xxxx): _________________________
* Alamat Email Kontak Utama: _________________________
* Pilihan Metode Komunikasi Utama: ☐ WhatsApp ☐ Email

BAGIAN A: INFORMASI DASAR & KONTAK (PASIEN)

Nama Lengkap Pasien: _________________________

Tanggal Lahir Pasien (DD/MM/YYYY): ____________

Jenis Kelamin Pasien Saat Lahir: ☐ Laki-laki ☐ Perempuan

Identitas Gender Pasien Saat Ini (jika berbeda/relevan): _________________________

Alamat Lengkap Pasien: _________________________________________________

No. Telepon Pasien (jika berbeda dari kontak utama): _________________________

Email Pasien (jika berbeda dari kontak utama): _________________________

Pekerjaan Pasien Saat Ini: _________________________ (Jika pensiun, pekerjaan terakhir: _____________)

Jam Kerja Rata-rata/Minggu: ☐ <20 ☐ 20-40 ☐ 41-50 ☐ 51-60 ☐ >60 ☐ Tidak Bekerja/Pensiun

Shift Kerja: ☐ Pagi Tetap ☐ Siang Tetap ☐ Malam Tetap ☐ Rotasi ☐ Fleksibel ☐ Tidak Tentu

Pendidikan Tertinggi Pasien: _________________________

Status Pernikahan Pasien: ☐ Lajang ☐ Menikah ☐ Kohabitasi (Tinggal Bersama) ☐ Cerai ☐ Janda/Duda

Tinggal Dengan Siapa: ☐ Sendiri ☐ Pasangan ☐ Pasangan & Anak ☐ Orang Tua ☐ Teman ☐ Lainnya: _______

Kontak Darurat (Nama & No. Telepon yang bisa dihubungi jika terjadi sesuatu pada pasien): ____________________________________

BAGIAN B: KELUHAN UTAMA & TUJUAN KESEHATAN (PASIEN)

Keluhan Kesehatan Utama Pasien (prioritaskan 3 teratas, jika lebih dari satu):

Keluhan 1: _________________________

Sejak kapan keluhan ini muncul? ____________

Pada skala 1-10 (1=sangat ringan, 10=sangat berat), seberapa parah keluhan ini? ____

Keluhan 2: _________________________

Sejak kapan keluhan ini muncul? ____________

Pada skala 1-10, seberapa parah keluhan ini? ____

Keluhan 3: _________________________

Sejak kapan keluhan ini muncul? ____________

Pada skala 1-10, seberapa parah keluhan ini? ____

Apa yang pasien harapkan dari konsultasi Functional Medicine ini? _________________________

Tujuan Kesehatan Spesifik Pasien (jangka pendek & jangka panjang): _________________________

Apa saja yang telah pasien coba untuk mengatasi keluhan ini? (Sebutkan terapi medis, obat-obatan, suplemen, perubahan gaya hidup, dll. dan hasilnya jika ada)

Faktor yang Memperburuk Keluhan Pasien: (Makanan, aktivitas, stres, waktu tertentu, cuaca, dll.)

Faktor yang Memperbaiki Keluhan Pasien: (Istirahat, obat, makanan, aktivitas tertentu, dll.)

BAGIAN C: TIMELINE KESEHATAN (PERISTIWA PENTING & AWAL MULA PENYAKIT PASIEN)
Instruksi: Buat daftar kronologis peristiwa penting dalam kehidupan pasien dan hubungkan dengan munculnya gejala atau diagnosis penyakit. Mulai dari kelahiran hingga saat ini.

Usia/Tahun	Peristiwa Kehidupan Signifikan (Contoh: lahir, pindah, trauma fisik/emosional, stres berat, pernikahan, perceraian, kehilangan pekerjaan, kelahiran anak, kematian orang terdekat, operasi, penyakit berat, paparan toksin signifikan)	Gejala/Diagnosis yang Muncul Saat Itu atau Segera Setelahnya
		
		
		
		
		

(Bisa ditambahkan baris sesuai kebutuhan)

BAGIAN D: RIWAYAT KESEHATAN PRIBADI (PASIEN)

Kondisi yang Pernah/Sedang Didiagnosis: (Centang semua yang relevan, tambahkan tahun diagnosis jika ingat)

Autoimun:

☐ Tiroiditis Hashimoto (Tahun: ____)

☐ Penyakit Graves (Tahun: ____)

☐ Rheumatoid Arthritis (Tahun: ____)

☐ Lupus (SLE) (Tahun: ____)

☐ Multiple Sclerosis (MS) (Tahun: ____)

☐ Psoriasis/Arthritis Psoriatik (Tahun: ____)

☐ Penyakit Celiac (Tahun: ____)

☐ Penyakit Crohn (Tahun: ____)

☐ Kolitis Ulseratif (Tahun: ____)

☐ Lainnya: _________________________ (Tahun: ____)

Kardiovaskular:

☐ Hipertensi (Tekanan Darah Tinggi) (Tahun: ____)

☐ Penyakit Jantung Koroner (Tahun: ____)

☐ Aritmia (Gangguan Irama Jantung) (Tahun: ____)

☐ Gagal Jantung (Tahun: ____)

☐ Stroke (Tahun: ____)

☐ Kolesterol Tinggi/Dislipidemia (Tahun: ____)

☐ Lainnya: _________________________ (Tahun: ____)

Metabolik/Endokrin:

☐ Diabetes Tipe 1 (Tahun: ____)

☐ Diabetes Tipe 2 (Tahun: ____)

☐ Prediabetes/Resistensi Insulin (Tahun: ____)

☐ Sindrom Metabolik (Tahun: ____)

☐ PCOS (Sindrom Ovarium Polikistik) (Tahun: ____)

☐ Gangguan Tiroid (selain autoimun, cth: hipotiroid, hipertiroid) (Tahun: ____)

☐ Gangguan Adrenal (cth: insufisiensi adrenal) (Tahun: ____)

☐ Osteoporosis/Osteopenia (Tahun: ____)

☐ Lainnya: _________________________ (Tahun: ____)

Pencernaan:

☐ GERD/Refluks Asam (Tahun: ____)

☐ Gastritis (Radang Lambung) (Tahun: ____)

☐ Tukak Lambung/Duodenum (Tahun: ____)

☐ IBS (Irritable Bowel Syndrome) (Tahun: ____)

☐ SIBO (Small Intestinal Bacterial Overgrowth) (Tahun: ____)

☐ Disbiosis Usus (Tahun: ____)

☐ Infeksi Kandida Usus (Tahun: ____)

☐ Penyakit Liver (cth: fatty liver, hepatitis) (Tahun: ____)

☐ Batu Empedu (Tahun: ____)

☐ Hernia Hiatus (Tahun: ____)

☐ Lainnya: _________________________ (Tahun: ____)

Neurologis:

☐ Migrain (Tahun: ____)

☐ Sakit Kepala Tegang Kronis (Tahun: ____)

☐ Neuropati Perifer (Tahun: ____)

☐ Penyakit Parkinson (Tahun: ____)

☐ Alzheimer/Demensia (Tahun: ____)

☐ Kejang/Epilepsi (Tahun: ____)

☐ Vertigo Kronis/Meniere (Tahun: ____)

☐ Lainnya: _________________________ (Tahun: ____)

Pernapasan:

☐ Asma (Tahun: ____)

☐ PPOK/Bronkitis Kronis/Emfisema (Tahun: ____)

☐ Rinitis Alergi Kronis (Tahun: ____)

☐ Sinusitis Kronis (Tahun: ____)

☐ Sleep Apnea (Tahun: ____)

☐ Lainnya: _________________________ (Tahun: ____)

Ginjal/Saluran Kemih:

☐ Gagal Ginjal Kronis/Akut (Tahun: ____)

☐ Batu Ginjal (Tahun: ____)

☐ Infeksi Saluran Kemih Kronis/Berulang (Tahun: ____)

☐ Inkontinensia Urin (Tahun: ____)

☐ Lainnya: _________________________ (Tahun: ____)

Muskuloskeletal:

☐ Osteoarthritis (Tahun: ____)

☐ Fibromyalgia (Tahun: ____)

☐ Nyeri Punggung Kronis (Tahun: ____)

☐ Cedera Muskuloskeletal Berulang (Tahun: ____)

☐ Lainnya: _________________________ (Tahun: ____)

Kulit:

☐ Eksim/Dermatitis Atopik (Tahun: ____)

☐ Jerawat Parah/Kistik (Tahun: ____)

☐ Rosacea (Tahun: ____)

☐ Infeksi Jamur Kulit Kronis (Tahun: ____)

☐ Lainnya: _________________________ (Tahun: ____)

Hematologi/Onkologi:

☐ Anemia (Jenis: _________) (Tahun: ____)

☐ Gangguan Pembekuan Darah (Jenis: _________) (Tahun: ____)

☐ Riwayat Kanker (Jenis: _________ Tahun Diagnosis: ____ Status Saat Ini: ________)

☐ Lainnya: _________________________ (Tahun: ____)

Infeksi Kronis/Berulang:

☐ Penyakit Lyme (Tahun: ____)

☐ Epstein-Barr Virus (EBV) Kronis (Tahun: ____)

☐ Herpes Simpleks/Zoster Berulang (Tahun: ____)

☐ Infeksi Jamur Sistemik (Tahun: ____)

☐ Infeksi Parasit (Jenis: _________) (Tahun: ____)

☐ Lainnya: _________________________ (Tahun: ____)

Kesehatan Mental: (Lihat Bagian Kesehatan Mental lebih detail)

Operasi/Prosedur Medis Mayor yang Pernah Dijalani: (Sebutkan jenis operasi & tahun pelaksanaan)

Rawat Inap di Rumah Sakit (selain karena operasi): (Sebutkan alasan & tahun rawat inap)

Alergi Obat yang Diketahui: (Sebutkan nama obat & jenis reaksi yang timbul)

Alergi Makanan yang Terdiagnosis (biasanya reaksi IgE, muncul cepat): (Sebutkan makanan & jenis reaksi)

Intoleransi/Sensitivitas Makanan yang Diketahui (biasanya reaksi non-IgE, muncul lambat/gejala beragam): (Sebutkan makanan & gejala yang timbul)

Riwayat Transfusi Darah: ☐ Ya (Tahun: ____ Alasan: _________) ☐ Tidak

Riwayat Vaksinasi Dewasa & Reaksi Merugikan yang Signifikan (jika ada):

BAGIAN E: RIWAYAT KESEHATAN KELUARGA (PASIEN)
(Sebutkan untuk Ayah, Ibu, Saudara Kandung, Anak, Kakek/Nenek dari pihak Ayah & Ibu)

Kondisi Medis	Hubungan Keluarga (cth: Ibu, Kakek dari Ayah)	Usia Saat Diagnosis (Perkiraan)
Penyakit Autoimun (Jenis:)		
Kanker (Jenis:)		
Penyakit Jantung/Stroke		
Diabetes (Tipe 1 / Tipe 2)		
Gangguan Tiroid (Jenis:)		
Penyakit Pencernaan (Jenis:)		
Penyakit Neurologis (Jenis:)		
Gangguan Kesehatan Jiwa (Jenis:)		
Alergi Berat/Asma		
Osteoporosis		
Lainnya (Sebutkan):		

(Bisa ditambahkan baris sesuai kebutuhan)

BAGIAN F: RIWAYAT MASA KANAK-KANAK & PERKEMBANGAN (PASIEN)

Kelahiran:

Status Kelahiran: ☐ Cukup Bulan (37-42 minggu) ☐ Prematur (____ minggu) ☐ Postmatur (>42 minggu)

Metode Persalinan: ☐ Normal Pervaginam ☐ Caesar Darurat ☐ Caesar Terencana (Alasan: _________) ☐ Induksi ☐ Dengan Bantuan (Forceps/Vakum)

Berat Lahir: _________ gram/kg

Pemberian ASI: ☐ Eksklusif (selama ____ bulan/tahun) ☐ Campur dengan Formula Sejak Awal ☐ Hanya Formula

Penggunaan Antibiotik Saat Bayi/Anak (<5 tahun): ☐ Tidak Pernah ☐ Jarang (1-2 kali) ☐ Sering (3-5 kali) ☐ Sangat Sering (>5 kali)

Penyakit Infeksi Berulang Saat Anak-anak: (Centang yang relevan)

☐ Infeksi Telinga (Otitis Media)

☐ Radang Tenggorokan/Amandel (Tonsilitis)

☐ Bronkitis/Pneumonia

☐ Lainnya: _________________________

Riwayat Perkembangan: (Centang jika ada riwayat)

☐ Keterlambatan Bicara

☐ Keterlambatan Motorik (merangkak, berjalan)

☐ Kesulitan Belajar Spesifik (cth: disleksia)

☐ ADHD/ADD (terdiagnosis atau gejala kuat)

☐ Spektrum Autisme (terdiagnosis atau gejala kuat)

Pengalaman Tidak Menyenangkan di Masa Kanak-Kanak (ACEs - Adverse Childhood Experiences): (Centang semua yang pernah dialami sebelum usia 18 tahun)

☐ Kekerasan Fisik oleh orang tua/pengasuh

☐ Kekerasan Emosional oleh orang tua/pengasuh (penghinaan, ancaman, penolakan)

☐ Kekerasan Seksual oleh siapapun

☐ Penelantaran Fisik (kebutuhan dasar tidak terpenuhi)

☐ Penelantaran Emosional (kurang kasih sayang, dukungan)

☐ Menyaksikan kekerasan dalam rumah tangga (terhadap ibu/saudara)

☐ Anggota keluarga serumah dengan masalah kesehatan jiwa serius

☐ Anggota keluarga serumah dengan ketergantungan alkohol/narkoba

☐ Anggota keluarga serumah pernah dipenjara

☐ Perceraian atau perpisahan orang tua

Jumlah ACEs yang dicentang: _____

Apakah ada trauma masa kanak-kanak lain yang signifikan? Jelaskan singkat: _________________________

BAGIAN G: GAYA HIDUP (PASIEN)

G1. POLA MAKAN & NUTRISI

Pola Makan Umum Saat Ini: ☐ Omnivora (makan segalanya) ☐ Vegetarian (tidak makan daging/ikan) ☐ Vegan (tidak makan semua produk hewani) ☐ Pescetarian (makan ikan, tidak makan daging lain) ☐ Fleksitarian (dominan nabati, kadang hewani) ☐ Lainnya (Jelaskan): _____________

Diet Khusus yang Pernah/Sedang Dijalani & Durasinya: ☐ Diet Paleo (Durasi: ____) ☐ Diet Keto (Durasi: ____) ☐ Diet Rendah FODMAP (Durasi: ____) ☐ Diet Mediterania (Durasi: ____) ☐ Diet Eliminasi (Sebutkan makanan yang dieliminasi: _________) (Durasi: ____) ☐ Lainnya (Jelaskan): _________________________ (Durasi: ____)

Frekuensi Makan Per Hari: ____ kali makan utama, ____ kali camilan/snack

Konsumsi Harian Rata-rata (perkiraan dalam porsi/jumlah):

Sayuran Hijau Daun (bayam, kangkung, sawi): ____ porsi (1 porsi ≈ 1 mangkuk kecil mentah / ½ mangkuk matang)

Sayuran Lainnya (berwarna-warni seperti wortel, brokoli, tomat): ____ porsi

Buah-buahan: ____ porsi (1 porsi ≈ 1 buah apel/pisang sedang)

Biji-bijian Utuh (nasi merah, quinoa, oats, roti gandum utuh): ____ porsi (1 porsi ≈ ½ - 1 mangkuk matang)

Kacang-kacangan/Biji-bijian (almond, chia seed, flaxseed, dll.): ____ sendok makan/genggam

Protein Hewani (daging merah, unggas, ikan, telur): ____ porsi (1 porsi ≈ ukuran telapak tangan)

Produk Susu (susu, yogurt, keju) / Alternatif Susu (susu almond, kedelai): ____ porsi/gelas

Lemak Sehat (alpukat, minyak zaitun, minyak kelapa): ____ sendok makan

Makanan yang Sering Dikonsumsi (minimal 3 kali seminggu): _________________________

Makanan yang Dihindari atau Tidak Disukai: _________________________

Sumber Protein Utama Anda: _________________________

Sumber Lemak Utama Anda: _________________________

Konsumsi Gula Tambahan (permen, kue, minuman manis, dll.): ☐ Jarang/Tidak Pernah ☐ 1-2 kali/minggu ☐ 3-4 kali/minggu ☐ Setiap Hari

Konsumsi Makanan Olahan/Cepat Saji (fast food, makanan instan, snack kemasan): ☐ Jarang/Tidak Pernah ☐ 1-2 kali/minggu ☐ 3-4 kali/minggu ☐ Setiap Hari

Konsumsi Kafein (kopi, teh, soda berkafein, minuman energi): ____ cangkir/gelas per hari. Jenis utama: _________

Konsumsi Alkohol: ☐ Tidak Pernah ☐ Sosial (1-2 kali/bulan, <2 standar drink/kali) ☐ Ringan (1-3 kali/minggu, <2 standar drink/kali) ☐ Sedang (4-6 kali/minggu atau >2 standar drink/kali) ☐ Berat (setiap hari). Jenis utama & Jumlah rata-rata per kali minum: _________

Air Minum Harian: ____ gelas/liter. Jenis utama: ☐ Air Keran (dimasak/tidak) ☐ Air Kemasan (Galon/Botol) ☐ Air Filter di Rumah (Jenis filter: _____) ☐ Air Alkali ☐ Lainnya: _____

Kebiasaan Makan: (Centang yang sering dilakukan)

☐ Makan terburu-buru

☐ Makan sambil bekerja/menonton TV/menggunakan gadget

☐ Makan dengan sadar (mindful eating: fokus pada makanan, mengunyah perlahan)

☐ Sering melewatkan makan (Sarapan/Makan Siang/Makan Malam)

Food Craving (Keinginan kuat terhadap makanan tertentu): (Centang yang sering dialami)

☐ Makanan Manis ☐ Makanan Asin ☐ Makanan Gurih/MSG ☐ Karbohidrat (roti, pasta, nasi) ☐ Cokelat ☐ Gorengan ☐ Lainnya: _________

Kapan biasanya muncul keinginan ini? (Contoh: sore hari, saat stres, sebelum menstruasi) _________________________

Apakah Anda memasak sendiri sebagian besar makanan Anda? ☐ Ya, hampir selalu ☐ Sering ☐ Kadang-kadang ☐ Jarang ☐ Tidak pernah

Apakah Anda membaca label informasi gizi pada kemasan makanan? ☐ Selalu ☐ Sering ☐ Kadang-kadang ☐ Jarang ☐ Tidak Pernah

Sumber utama pembelian bahan makanan: ☐ Pasar Tradisional ☐ Supermarket ☐ Toko Organik ☐ Pesan Online ☐ Petani Langsung ☐ Lainnya: _________

Suplemen yang Dikonsumsi Saat Ini (Nama, Merek, Dosis, Frekuensi, Alasan Penggunaan, Siapa yang merekomendasikan):

G2. AKTIVITAS FISIK & OLAHRAGA

Frekuensi Olahraga Terstruktur (direncanakan): ____ kali/minggu

Jenis Olahraga Utama yang Rutin Dilakukan: _________________________

Durasi Rata-rata per Sesi Olahraga: ____ menit

Intensitas Olahraga Rata-rata: ☐ Ringan (berkeringat sedikit, napas sedikit meningkat) ☐ Sedang (berkeringat, napas cukup meningkat, masih bisa bicara) ☐ Berat (sangat berkeringat, napas terengah-engah, sulit bicara)

Aktivitas Fisik Harian Lainnya (selain olahraga terstruktur): (Contoh: berjalan kaki ke kantor, berkebun, naik tangga, pekerjaan rumah tangga aktif) _________________________

Tingkat Aktivitas di Pekerjaan: ☐ Dominan Duduk (kerja di meja) ☐ Banyak Berdiri ☐ Banyak Berjalan ☐ Aktivitas Fisik Berat

Perkiraan total jam duduk setiap hari (termasuk di luar jam kerja): ____ jam

Apakah Anda menikmati aktivitas fisik/olahraga? ☐ Sangat Menikmati ☐ Cukup Menikmati ☐ Biasa Saja ☐ Kurang Suka ☐ Tidak Suka

Hambatan Utama untuk Berolahraga Lebih Banyak/Rutin: ☐ Tidak ada waktu ☐ Tidak ada motivasi ☐ Kelelahan ☐ Nyeri/Kondisi fisik ☐ Tidak ada fasilitas ☐ Lainnya: _________

G3. POLA TIDUR & ISTIRAHAT

Jam Tidur Rata-rata per Malam (aktual tidur, bukan waktu di tempat tidur): ____ jam

Jam Tidur Biasa (masuk kamar untuk tidur): ____ Malam | Jam Bangun Biasa: ____ Pagi

Apakah jadwal tidur Anda konsisten (perbedaan <1 jam antara hari kerja & akhir pekan)? ☐ Ya ☐ Tidak

Kualitas Tidur Anda Secara Umum (Skala 1-10, 10=sangat baik, nyenyak, segar saat bangun): ____

Masalah Tidur yang Sering Dialami: (Centang semua yang relevan)

☐ Sulit untuk mulai tidur (membutuhkan >30 menit untuk terlelap)

☐ Sering terbangun di malam hari (Jam berapa biasanya? ____ Apa yang Anda lakukan saat terbangun? ____)

☐ Bangun terlalu pagi dan tidak bisa tidur lagi

☐ Tidur tidak nyenyak/gelisah

☐ Mendengkur keras (dilaporkan orang lain)

☐ Terengah-engah/seperti berhenti napas saat tidur (dilaporkan orang lain / Anda sadari)

☐ Kaki gelisah/tidak nyaman saat mencoba tidur (Restless Leg Syndrome)

☐ Mimpi buruk yang mengganggu secara berulang

☐ Menggertakkan gigi saat tidur (Bruxism)

☐ Tidak ada masalah tidur yang signifikan

Lingkungan Tidur:

Kegelapan Kamar: ☐ Sangat Gelap (tanpa cahaya) ☐ Agak Terang (ada sedikit cahaya masuk) ☐ Cukup Terang

Suhu Kamar: ☐ Sejuk dan Nyaman ☐ Terlalu Hangat ☐ Terlalu Dingin

Kebisingan: ☐ Tenang ☐ Agak Bising (suara samar) ☐ Bising (mengganggu)

Apakah ada hewan peliharaan tidur di ranjang yang sama? ☐ Ya ☐ Tidak

Rutinitas Sebelum Tidur (1-2 jam sebelum tidur): (Contoh: menggunakan gadget, menonton TV, membaca buku fisik, meditasi, mandi air hangat, minum teh herbal) _________________________________________________________________________

Penggunaan Obat Tidur Resep atau Suplemen Tidur (Melatonin, dll.): (Nama, Dosis, Frekuensi) _________________________________________________________________________

Bagaimana perasaan Anda saat bangun pagi (setelah tidur malam yang biasa)? ☐ Segar Bugar dan Berenergi ☐ Cukup Segar ☐ Agak Lelah/Kurang Tidur ☐ Sangat Lelah/Seperti Tidak Tidur

Tidur Siang: ☐ Ya (Durasi rata-rata: ____ menit, Frekuensi: ____ kali/minggu) ☐ Tidak

G4. MANAJEMEN STRES & KESEHATAN EMOSIONAL

Tingkat Stres Rata-rata Anda dalam Sebulan Terakhir (Skala 1-10, 1=tidak stres, 10=sangat stres): ____

Sumber Stres Utama Saat Ini: ☐ Pekerjaan/Karir ☐ Keuangan ☐ Hubungan dengan Pasangan ☐ Hubungan dengan Keluarga ☐ Hubungan dengan Teman ☐ Kesehatan Pribadi ☐ Kesehatan Anggota Keluarga ☐ Peristiwa Kehidupan Besar (pindah, kehilangan, dll.) ☐ Merasa Kesepian ☐ Tuntutan Sosial ☐ Lainnya (Jelaskan): _________________________

Bagaimana Stres Mempengaruhi Anda Secara Fisik? (Contoh: sakit kepala, tegang otot, masalah pencernaan, kelelahan, jantung berdebar) _________________________

Bagaimana Stres Mempengaruhi Anda Secara Emosional/Mental? (Contoh: mudah marah, cemas, sedih, sulit konsentrasi, menarik diri) _________________________

Teknik Manajemen Stres yang Biasa Anda Gunakan & Seberapa Efektif Menurut Anda (Skala 1-5, 5=sangat efektif):

☐ Meditasi/Mindfulness (Efektivitas: ____)

☐ Yoga/Tai Chi (Efektivitas: ____)

☐ Latihan Pernapasan Dalam (Efektivitas: ____)

☐ Menulis Jurnal (Efektivitas: ____)

☐ Menghabiskan Waktu di Alam (Efektivitas: ____)

☐ Melakukan Hobi (Sebutkan: _________) (Efektivitas: ____)

☐ Berbicara dengan Teman/Keluarga Tepercaya (Efektivitas: ____)

☐ Terapi/Konseling Profesional (Efektivitas: ____)

☐ Olahraga (Efektivitas: ____)

☐ Mendengarkan Musik (Efektivitas: ____)

☐ Lainnya (Sebutkan: _________________________) (Efektivitas: ____)

Dukungan Sosial:

Apakah Anda memiliki seseorang yang dapat Anda percaya dan ajak bicara mengenai masalah pribadi? ☐ Ya ☐ Tidak

Seberapa sering Anda bersosialisasi (bertemu/berinteraksi secara bermakna) dengan teman atau keluarga (di luar rumah tangga)? ☐ Setiap Hari ☐ Beberapa Kali/Minggu ☐ Beberapa Kali/Bulan ☐ Jarang Sekali/Hampir Tidak Pernah

Apakah Anda merasa menjadi bagian dari suatu komunitas (kelompok hobi, keagamaan, sosial, dll.)? ☐ Ya ☐ Tidak

Praktik Spiritual/Keagamaan (jika ada dan relevan bagi Anda): _________________________ Apakah ini memberikan Anda kekuatan, kedamaian, atau makna? ☐ Ya ☐ Kadang ☐ Tidak

Kemampuan Mengatakan "Tidak" dan Menetapkan Batasan Pribadi: ☐ Mudah ☐ Kadang Sulit ☐ Sangat Sulit

Waktu yang Anda dedikasikan untuk Relaksasi Murni & Kesenangan Pribadi (tanpa rasa bersalah/tuntutan) Setiap Hari/Minggu: ____ jam

Perasaan Umum Terhadap Hidup Saat Ini: ☐ Sangat Optimis dan Bersemangat ☐ Cukup Optimis ☐ Netral ☐ Cukup Pesimis ☐ Sangat Pesimis dan Putus Asa

Riwayat Trauma Emosional/Psikologis Signifikan (selain ACEs yang sudah disebutkan, jika ada, contoh: kecelakaan berat, kehilangan mendadak, perundungan berat sebagai dewasa): _________________________

Pernah Berkonsultasi atau Menjalani Terapi Kesehatan Mental Profesional (Psikolog/Psikiater)? ☐ Ya (Kapan: _________ Dengan Siapa: _________ Durasi: _________ Apakah membantu? _________) ☐ Tidak

BAGIAN H: LINGKUNGAN & PAPARAN (PASIEN)

Tempat Tinggal Saat Ini: ☐ Perkotaan Padat ☐ Pinggiran Kota ☐ Pedesaan ☐ Dekat Kawasan Industri (Jenis Industri: _________) ☐ Dekat Jalan Raya Utama/Tol ☐ Dekat Lahan Pertanian (Apakah menggunakan pestisida intensif? ☐ Ya ☐ Tidak ☐ Tidak Tahu)

Usia Bangunan Tempat Tinggal Saat Ini: ____ tahun.

Pernah ada masalah jamur (mold) yang terlihat atau tercium, atau kebocoran air yang signifikan di rumah saat ini atau sebelumnya? ☐ Ya (Di mana: _________ Kapan: _________) ☐ Tidak ☐ Tidak Tahu

Sumber Air di Rumah:

Untuk Minum (jika tidak sama dengan G1.13): _________________________

Untuk Mandi/Cuci: ☐ PDAM ☐ Sumur Bor/Gali ☐ Air Pegunungan ☐ Lainnya: _________

Apakah air untuk mandi/cuci difilter? ☐ Ya (Jenis filter: ____) ☐ Tidak

Kualitas Udara Dalam Ruangan (Rumah):

Ventilasi Alami (jendela/pintu dibuka rutin): ☐ Baik (setiap hari) ☐ Sedang (beberapa kali/minggu) ☐ Buruk (jarang/tidak pernah)

Penggunaan AC: ☐ Sering ☐ Kadang ☐ Jarang ☐ Tidak Ada. Frekuensi pembersihan filter AC: _________

Penggunaan Air Purifier: ☐ Ya (Jenis: _________) ☐ Tidak

Penggunaan Pengharum Ruangan Semprot/Elektrik/Lilin Beraroma Sintetis: ☐ Sering ☐ Kadang ☐ Jarang ☐ Tidak Pernah

Apakah ada yang merokok di dalam rumah? ☐ Ya ☐ Tidak

Paparan di Tempat Kerja (Saat Ini atau Riwayat Pekerjaan Lalu yang Signifikan): (Centang yang relevan)

☐ Bahan Kimia (Sebutkan jika tahu: _________)

☐ Debu/Serat (Jenis: _________)

☐ Asap/Uap Logam/Pelarut

☐ Logam Berat (cth: timbal, merkuri, kadmium)

☐ Pestisida/Herbisida

☐ Radiasi (Jenis: _________)

☐ Kebisingan Tinggi Konstan

☐ Getaran Konstan

☐ Tidak ada paparan signifikan yang diketahui

☐ Lainnya: _________________________

Hobi dengan Potensi Paparan Toksin: (Contoh: berkebun dengan pestisida, melukis dengan cat minyak, keramik, otomotif/bengkel, fotografi (bahan kimia cuci film)) _________________________________________________________________________

Penggunaan Produk Perawatan Diri (Skin care, kosmetik, sabun, sampo, deodoran, parfum, pasta gigi):

Apakah Anda memperhatikan kandungan bahan dalam produk yang Anda gunakan? ☐ Ya, selalu ☐ Sering ☐ Kadang-kadang ☐ Tidak

Preferensi Merek/Jenis: ☐ Merek Konvensional Umum ☐ Merek yang mengklaim Natural/Organik ☐ Membuat sendiri ☐ Tidak ada preferensi khusus

Penggunaan Produk Pembersih Rumah Tangga (deterjen, pembersih lantai, disinfektan, dll.):

Preferensi Merek/Jenis: ☐ Merek Konvensional Umum ☐ Merek yang mengklaim Natural/Ramah Lingkungan ☐ Membuat sendiri (cth: cuka, baking soda)

Penggunaan Plastik untuk Makanan/Minuman:

Menyimpan makanan di wadah plastik: ☐ Sering ☐ Kadang ☐ Jarang (lebih suka kaca/stainless steel)

Memanaskan makanan dalam wadah plastik di microwave: ☐ Sering ☐ Kadang ☐ Jarang ☐ Tidak Pernah

Minum dari botol plastik sekali pakai: ☐ Sering ☐ Kadang ☐ Jarang

Konsumsi Ikan Laut Dalam Ukuran Besar (Tuna, todak/swordfish, makarel raja, hiu): ☐ Sering (>2 kali/minggu) ☐ Kadang (1 kali/minggu) ☐ Jarang (beberapa kali/bulan) ☐ Tidak Pernah

Riwayat Tambalan Gigi Amalgam (berwarna perak, mengandung merkuri): ☐ Ya (Perkiraan Jumlah: ____ Apakah masih ada? ☐ Ya ☐ Tidak, sudah dilepas kapan? ____) ☐ Tidak ☐ Tidak Tahu

Paparan EMF (Electromagnetic Fields) yang Intensif:

Rata-rata penggunaan ponsel/gadget per hari (total jam): ____ jam.

Apakah ponsel/gadget sering diletakkan sangat dekat tubuh (saku, bra) atau di dekat kepala saat tidur? ☐ Ya ☐ Tidak

Apakah tempat tinggal/kerja Anda sangat dekat (<100-200m) dengan Menara BTS Seluler atau Saluran Udara Tegangan Ekstra Tinggi (SUTET)? ☐ Ya ☐ Tidak ☐ Tidak Tahu

Riwayat Perjalanan ke Daerah Endemik Penyakit Tertentu dalam 5 Tahun Terakhir (yang mungkin relevan dengan keluhan saat ini): (Sebutkan Negara/Wilayah & Tahun) _________________________________________________________________________

BAGIAN I: SISTEM TUBUH (PENILAIAN GEJALA RINCI PASIEN)
Untuk setiap gejala di bawah ini, beri peringkat Frekuensi (seberapa sering terjadi) dan Keparahan (seberapa mengganggu jika terjadi) dalam 1 bulan terakhir.
Skala Frekuensi: 0 = Tidak Pernah, 1 = Jarang (1-3x/bulan), 2 = Kadang (1-3x/minggu), 3 = Sering (Hampir Setiap Hari)
Skala Keparahan: 0 = Tidak Ada Gejala, 1 = Ringan (sedikit mengganggu), 2 = Sedang (cukup mengganggu aktivitas), 3 = Berat (sangat mengganggu aktivitas)

Gejala	Frekuensi (0-3)	Keparahan (0-3)
UMUM		
Kelelahan, kurang energi		
Perubahan berat badan tanpa sebab jelas		
Demam atau kedinginan tanpa sebab jelas		
Keringat berlebih (siang/malam)		
KEPALA & LEHER		
Sakit Kepala - Tipe Tegang (seperti diikat)		
Sakit Kepala - Tipe Migrain (berdenyut, sering sebelah, mual/sensitif cahaya/suara)		
Pusing/Limbung (kepala terasa ringan)		
Vertigo (sensasi ruangan berputar)		
Nyeri Leher/Kaku Leher		
MATA & PENGLIHATAN		
Penglihatan Kabur/Buram		
Mata Kering/Gatal/Merah/Berair		
Sensitif terhadap Cahaya		
Lingkaran Hitam di Bawah Mata		
TELINGA, HIDUNG, TENGGOROKAN (THT)		
Telinga Berdenging (Tinnitus)		
Gangguan Pendengaran		
Hidung Tersumbat Kronis		
Hidung Meler/Bersin Kronis (bukan flu)		
Sinusitis/Nyeri di Area Sinus		
Post-Nasal Drip (lendir di belakang tenggorokan)		
Sering Sakit Tenggorokan/Radang Amandel		
Sariawan Berulang		
Bau Mulut (Halitosis) yang persisten		
MULUT & GIGI		
Gusi Mudah Berdarah/Bengkak/Nyeri		
Nyeri Rahang/Bunyi Klik pada Sendi Rahang (TMJ)		
Menggertakkan Gigi Saat Tidur (Bruxism)		
SISTEM KARDIOVASKULAR (JANTUNG & PEMBULUH DARAH)		
Jantung Berdebar (Palpitasi)		
Nyeri Dada/Rasa Tertekan di Dada		
Sesak Napas Saat Aktivitas Ringan/Istirahat		
Tangan dan/atau Kaki Sering Terasa Dingin		
Bengkak di Kaki/Pergelangan Kaki		
Vena Varises/Spider Veins yang menonjol		
SISTEM PERNAPASAN		
Batuk Kronis (Kering atau Berdahak)		
Mengi (Napas Berbunyi Ngik-ngik)		
Sesak Napas (di luar aktivitas berat)		
Sering Mengalami Infeksi Saluran Napas		
SISTEM PENCERNAAN		
Perut Kembung/Terasa Penuh Gas		
Nyeri Perut/Kram Perut		
Mual atau Muntah (bukan karena mabuk perjalanan)		
Diare (feses cair >3x/hari)		
Konstipasi/Sembelit (BAB <3x/minggu atau sulit)		
BAB Terasa Tidak Tuntas		
Ada Lendir atau Darah pada Feses		
Heartburn/Refluks Asam/Rasa Terbakar di Dada		
Sulit Menelan Makanan/Minuman		
Bersendawa Berlebihan		
SISTEM URINARIA (PERKEMIHAN)		
Sering Buang Air Kecil (siang hari)		
Nyeri/Perih Saat Buang Air Kecil		
Kebelet/Tidak Bisa Menahan Buang Air Kecil		
Urin Berbau Menyengat/Tidak Biasa/Keruh		
Bangun di Malam Hari untuk BAK (>1 kali)		
Aliran urin lemah/terputus-putus		
SISTEM REPRODUKSI (KHUSUS WANITA)		
Siklus Menstruasi Tidak Teratur		
Nyeri Haid Hebat (Dismenore)		
Perdarahan Haid Sangat Banyak atau Sangat Sedikit		
Gejala PMS Berat (perubahan mood, kembung, nyeri payudara, dll.)		
Keputihan Abnormal (bau, warna, gatal)		
Nyeri Saat Berhubungan Seksual		
Penurunan Libido/Gairah Seksual		
Gejala Menopause/Perimenopause (hot flashes, keringat malam, vagina kering)		
Riwayat Infertilitas/Sulit Hamil		
SISTEM REPRODUKSI (KHUSUS PRIA)		
Penurunan Libido/Gairah Seksual		
Disfungsi Ereksi/Kesulitan Mempertahankan Ereksi		
Masalah Prostat (sering BAK malam hari, aliran urin lemah)		
Nyeri Testis/Panggul		
Riwayat Infertilitas		
SISTEM MUSKULOSKELETAL (OTOT & TULANG)		
Nyeri Sendi		
Kaku Sendi (terutama di pagi hari atau setelah lama tidak bergerak)		
Bengkak pada Sendi		
Nyeri Otot (Myalgia) yang tidak jelas penyebabnya		
Kelemahan Otot		
Kram Otot yang Sering		
SISTEM SARAF & OTAK		
Kesulitan Berpikir Jernih (Brain Fog)		
Sulit Berkonsentrasi/Mempertahankan Fokus		
Daya Ingat Menurun/Mudah Lupa		
Kesemutan/Mati Rasa (Baal) pada Tangan/Kaki		
Tremor/Gemetar pada Tangan atau Bagian Tubuh Lain		
Gangguan Keseimbangan/Koordinasi		
KULIT, RAMBUT, KUKU		
Kulit Kering/Kasar/Bersisik		
Kulit Berminyak/Berjerawat Parah		
Ruam Kulit/Gatal-gatal yang sering muncul		
Eksim/Dermatitis		
Psoriasis		
Mudah Memar		
Rambut Rontok Berlebihan		
Rambut Kering/Rapuh/Mudah Patah/Bercabang		
Ketombe/Kulit Kepala Gatal/Berminyak		
Kuku Rapuh/Mudah Patah/Bergaris/Berubah Warna		
ENERGI & METABOLISME		
Energi Naik Turun Secara Drastis Sepanjang Hari		
Merasa Perlu Kafein untuk Bisa Berfungsi		
Intoleransi Suhu Dingin (mudah kedinginan)		
Intoleransi Suhu Panas (mudah kepanasan)		
Berkeringat Berlebihan atau Justru Kurang Berkeringat		
Berat Badan Sulit Naik atau Sulit Turun meskipun sudah berusaha		
Nafsu Makan Berubah Signifikan (Meningkat atau Menurun drastis)		
SUASANA HATI & EMOSI		
Perasaan Sedih/Depresi yang Mendalam		
Kecemasan/Khawatir Berlebihan		
Mudah Marah/Iritabilitas		
Perubahan Mood yang Cepat dan Drastis		
Kehilangan Minat atau Kesenangan pada Aktivitas yang Biasa Dinikmati		
Merasa Putus Asa/Tidak Berharga		
Serangan Panik (rasa takut intens tiba-tiba, jantung berdebar, sesak)		
LAIN-LAIN		
Sering Merasa Haus Berlebihan		
Sering Merasa Lapar Berlebihan		
Pembengkakan Kelenjar Getah Bening (leher, ketiak, selangkangan)		
Demam Ringan Berulang Tanpa Sebab Jelas		

(Bisa ditambahkan baris sesuai kebutuhan untuk gejala lain yang tidak tercantum)

BAGIAN J: KESIAPAN & HARAPAN (PASIEN)

Apa motivasi terbesar pasien untuk melakukan perubahan kesehatan saat ini? _________________________________________________________________________

Seberapa siap pasien untuk melakukan perubahan gaya hidup (pola makan, olahraga, manajemen stres, dll.) jika direkomendasikan? (Skala 1-10, 1=Tidak Siap Sama Sekali, 10=Sangat Siap dan Termotivasi): ____

Seberapa siap pasien untuk menjalani tes laboratorium tambahan (darah, urin, feses, saliva, dll.) jika diperlukan untuk investigasi lebih lanjut? ☐ Sangat Siap ☐ Cukup Siap ☐ Ragu-ragu ☐ Tidak Siap

Apakah ada batasan finansial yang perlu kami ketahui terkait rekomendasi tes laboratorium atau pembelian suplemen/terapi? (Ini membantu kami memberikan rekomendasi yang paling sesuai dengan kemampuan Anda)

Pertanyaan spesifik yang ingin pasien ajukan kepada kami saat konsultasi nanti?

Dari mana Anda/Pasien mengetahui tentang layanan Functional Medicine kami atau tentang praktisi ini? ☐ Rekomendasi Dokter Lain ☐ Rekomendasi Teman/Keluarga ☐ Media Sosial (Sebutkan: _________) ☐ Website/Artikel Online ☐ Seminar/Workshop ☐ Lainnya (Sebutkan: _________)

BAGIAN K: PERSETUJUAN

Saya (atau sebagai perwakilan pasien yang sah) menyatakan bahwa informasi yang saya berikan dalam formulir ini adalah benar dan selengkap mungkin sejauh pengetahuan saya. Saya memahami bahwa informasi ini akan digunakan untuk membantu praktisi Functional Medicine dalam menganalisis kondisi kesehatan pasien dan menyusun rencana perawatan.

Saya memahami bahwa Functional Medicine adalah pendekatan kolaboratif yang memerlukan partisipasi aktif dari pasien. Saya setuju untuk membahas informasi ini secara terbuka dengan praktisi dan bersedia mempertimbangkan rekomendasi yang diberikan.

Saya juga memahami bahwa data pribadi dan kesehatan pasien akan dijaga kerahasiaannya sesuai dengan etika profesi dan peraturan yang berlaku.

Tanda Tangan (Pasien atau Pengisi Formulir yang Bertanggung Jawab):

Nama Jelas: _________________________
Tanggal: _______________

LAMPIRAN (Jika Ada):
Mohon bawa saat konsultasi atau kirimkan melalui email sebelum jadwal konsultasi jika memungkinkan:

Salinan hasil tes laboratorium terakhir (idealya dalam 1-2 tahun terakhir).

Daftar lengkap obat-obatan (resep & bebas) serta suplemen yang sedang dikonsumsi pasien saat ini (jika belum ditulis lengkap di atas).

Food Diary (Catatan Makanan & Minuman beserta Gejala yang mungkin timbul) selama 3-7 hari terakhir sebelum konsultasi (template bisa diminta jika perlu).

Terima kasih telah meluangkan waktu untuk mengisi formulir komprehensif ini. Informasi yang Anda berikan sangat berharga bagi kami dalam mempersiapkan konsultasi yang terbaik untuk pasien.
--- START OF TYPESCRIPT CHECK ---
Running TypeScript check...
initq.tsx(1,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(1,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(1,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(1,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(1,36): error TS1434: Unexpected keyword or identifier.
initq.tsx(1,41): error TS1434: Unexpected keyword or identifier.
initq.tsx(1,52): error TS1434: Unexpected keyword or identifier.
initq.tsx(1,57): error TS1434: Unexpected keyword or identifier.
initq.tsx(1,63): error TS1434: Unexpected keyword or identifier.
initq.tsx(1,67): error TS1434: Unexpected keyword or identifier.
initq.tsx(3,1): error TS1109: Expression expected.
initq.tsx(3,4): error TS1109: Expression expected.
initq.tsx(4,12): error TS1005: ';' expected.
initq.tsx(4,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,25): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,30): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,44): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,49): error TS1435: Unknown keyword or identifier. Did you mean 'for mulir'?
initq.tsx(4,96): error TS1005: ';' expected.
initq.tsx(4,103): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,114): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,125): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,134): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,140): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,145): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,153): error TS1435: Unknown keyword or identifier. Did you mean 'for mulir'?
initq.tsx(4,162): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,166): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,173): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,180): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,185): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,191): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,197): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,202): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,210): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,230): error TS1005: ';' expected.
initq.tsx(4,239): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,253): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,261): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,267): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,278): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,294): error TS1005: ';' expected.
initq.tsx(4,299): error TS1434: Unexpected keyword or identifier.
initq.tsx(4,316): error TS1003: Identifier expected.
initq.tsx(6,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(6,25): error TS1005: ';' expected.
initq.tsx(6,56): error TS1005: ';' expected.
initq.tsx(6,70): error TS1434: Unexpected keyword or identifier.
initq.tsx(6,78): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,32): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,38): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,51): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,61): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,70): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,78): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,87): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,111): error TS1005: ';' expected.
initq.tsx(8,122): error TS1005: ';' expected.
initq.tsx(8,149): error TS1005: ';' expected.
initq.tsx(8,154): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,160): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,164): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,172): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,177): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,184): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,193): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,198): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,207): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,212): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,221): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,229): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,236): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,240): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,249): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,257): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,264): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,269): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,276): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,285): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,308): error TS1005: ';' expected.
initq.tsx(8,317): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,321): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,329): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,354): error TS1005: ';' expected.
initq.tsx(8,360): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,371): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,388): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,397): error TS1434: Unexpected keyword or identifier.
initq.tsx(8,412): error TS1003: Identifier expected.
initq.tsx(10,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(10,14): error TS1434: Unexpected keyword or identifier.
initq.tsx(10,24): error TS1434: Unexpected keyword or identifier.
initq.tsx(12,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(12,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(12,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(12,21): error TS1435: Unknown keyword or identifier. Did you mean 'for mulir'?
initq.tsx(12,30): error TS1434: Unexpected keyword or identifier.
initq.tsx(12,34): error TS1434: Unexpected keyword or identifier.
initq.tsx(12,40): error TS1434: Unexpected keyword or identifier.
initq.tsx(14,1): error TS1127: Invalid character.
initq.tsx(14,12): error TS1005: ';' expected.
initq.tsx(14,27): error TS1003: Identifier expected.
initq.tsx(14,38): error TS1005: ',' expected.
initq.tsx(14,41): error TS1005: ',' expected.
initq.tsx(14,48): error TS1005: ',' expected.
initq.tsx(16,1): error TS1127: Invalid character.
initq.tsx(16,15): error TS1005: ';' expected.
initq.tsx(16,23): error TS1434: Unexpected keyword or identifier.
initq.tsx(16,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(16,41): error TS1003: Identifier expected.
initq.tsx(16,52): error TS1005: ',' expected.
initq.tsx(16,55): error TS1005: ',' expected.
initq.tsx(16,66): error TS1005: ',' expected.
initq.tsx(16,67): error TS1005: ',' expected.
initq.tsx(16,67): error TS1351: An identifier or keyword cannot immediately follow a numeric literal.
initq.tsx(18,2): error TS1351: An identifier or keyword cannot immediately follow a numeric literal.
initq.tsx(18,14): error TS1005: ';' expected.
initq.tsx(18,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(19,1): error TS1109: Expression expected.
initq.tsx(19,3): error TS1127: Invalid character.
initq.tsx(20,3): error TS1127: Invalid character.
initq.tsx(20,5): error TS1434: Unexpected keyword or identifier.
initq.tsx(21,3): error TS1127: Invalid character.
initq.tsx(22,3): error TS1127: Invalid character.
initq.tsx(22,5): error TS1434: Unexpected keyword or identifier.
initq.tsx(23,3): error TS1127: Invalid character.
initq.tsx(23,5): error TS1434: Unexpected keyword or identifier.
initq.tsx(24,3): error TS1127: Invalid character.
initq.tsx(24,5): error TS1434: Unexpected keyword or identifier.
initq.tsx(24,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(25,3): error TS1127: Invalid character.
initq.tsx(25,23): error TS1005: ';' expected.
initq.tsx(27,2): error TS1351: An identifier or keyword cannot immediately follow a numeric literal.
initq.tsx(27,11): error TS1005: ';' expected.
initq.tsx(27,16): error TS1434: Unexpected keyword or identifier.
initq.tsx(27,26): error TS1434: Unexpected keyword or identifier.
initq.tsx(27,31): error TS1434: Unexpected keyword or identifier.
initq.tsx(27,39): error TS1434: Unexpected keyword or identifier.
initq.tsx(27,47): error TS1434: Unexpected keyword or identifier.
initq.tsx(27,57): error TS1434: Unexpected keyword or identifier.
initq.tsx(27,64): error TS1434: Unexpected keyword or identifier.
initq.tsx(27,68): error TS1434: Unexpected keyword or identifier.
initq.tsx(28,1): error TS1109: Expression expected.
initq.tsx(28,3): error TS1127: Invalid character.
initq.tsx(28,5): error TS1434: Unexpected keyword or identifier.
initq.tsx(28,27): error TS1005: ',' expected.
initq.tsx(28,35): error TS1005: ',' expected.
initq.tsx(28,48): error TS1005: ',' expected.
initq.tsx(28,52): error TS1005: ',' expected.
initq.tsx(28,63): error TS1005: ',' expected.
initq.tsx(29,3): error TS1127: Invalid character.
initq.tsx(29,19): error TS1005: ',' expected.
initq.tsx(29,28): error TS1005: ',' expected.
initq.tsx(31,2): error TS1351: An identifier or keyword cannot immediately follow a numeric literal.
initq.tsx(31,11): error TS1005: ';' expected.
initq.tsx(31,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(31,26): error TS1434: Unexpected keyword or identifier.
initq.tsx(31,33): error TS1434: Unexpected keyword or identifier.
initq.tsx(31,39): error TS1434: Unexpected keyword or identifier.
initq.tsx(31,63): error TS1005: ',' expected.
initq.tsx(31,69): error TS1005: ',' expected.
initq.tsx(31,74): error TS1005: ',' expected.
initq.tsx(31,79): error TS1005: ',' expected.
initq.tsx(31,87): error TS1005: ',' expected.
initq.tsx(31,95): error TS1005: ',' expected.
initq.tsx(31,104): error TS1005: ',' expected.
initq.tsx(31,109): error TS1005: ',' expected.
initq.tsx(31,114): error TS1005: ',' expected.
initq.tsx(31,124): error TS1005: ',' expected.
initq.tsx(31,129): error TS1005: ',' expected.
initq.tsx(31,134): error TS1005: ',' expected.
initq.tsx(31,141): error TS1005: ',' expected.
initq.tsx(31,152): error TS1005: ',' expected.
initq.tsx(31,160): error TS1005: ',' expected.
initq.tsx(31,166): error TS1005: ',' expected.
initq.tsx(31,177): error TS1005: ';' expected.
initq.tsx(32,1): error TS1109: Expression expected.
initq.tsx(32,8): error TS1005: ';' expected.
initq.tsx(33,9): error TS1005: ';' expected.
initq.tsx(33,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(33,39): error TS1005: ',' expected.
initq.tsx(33,44): error TS1005: ',' expected.
initq.tsx(33,55): error TS1005: ',' expected.
initq.tsx(33,63): error TS1351: An identifier or keyword cannot immediately follow a numeric literal.
initq.tsx(33,68): error TS1005: ';' expected.
initq.tsx(34,10): error TS1005: ';' expected.
initq.tsx(34,16): error TS1434: Unexpected keyword or identifier.
initq.tsx(35,11): error TS1005: ';' expected.
initq.tsx(35,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(35,36): error TS1127: Invalid character.
initq.tsx(35,47): error TS1127: Invalid character.
initq.tsx(37,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(37,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(39,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(39,6): error TS1434: Unexpected keyword or identifier.
initq.tsx(41,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(41,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(41,34): error TS1005: ';' expected.
initq.tsx(43,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(43,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(43,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(43,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(43,34): error TS1127: Invalid character.
initq.tsx(43,46): error TS1127: Invalid character.
initq.tsx(45,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(45,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(45,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(45,25): error TS1434: Unexpected keyword or identifier.
initq.tsx(45,40): error TS1005: ',' expected.
initq.tsx(45,56): error TS1005: ';' expected.
initq.tsx(47,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(47,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(49,13): error TS1005: ';' expected.
initq.tsx(49,26): error TS1005: ',' expected.
initq.tsx(49,34): error TS1005: ',' expected.
initq.tsx(49,39): error TS1005: ',' expected.
initq.tsx(49,46): error TS1005: ',' expected.
initq.tsx(49,52): error TS1005: ';' expected.
initq.tsx(51,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(51,20): error TS1005: ',' expected.
initq.tsx(51,28): error TS1005: ',' expected.
initq.tsx(51,33): error TS1005: ',' expected.
initq.tsx(51,40): error TS1005: ',' expected.
initq.tsx(51,46): error TS1005: ';' expected.
initq.tsx(53,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(53,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(53,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(53,60): error TS1005: ',' expected.
initq.tsx(53,79): error TS1005: ',' expected.
initq.tsx(53,87): error TS1005: ',' expected.
initq.tsx(55,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(55,5): error TS1434: Unexpected keyword or identifier.
initq.tsx(55,27): error TS1005: ';' expected.
initq.tsx(55,29): error TS1127: Invalid character.
initq.tsx(55,31): error TS1109: Expression expected.
initq.tsx(55,35): error TS1127: Invalid character.
initq.tsx(55,43): error TS1127: Invalid character.
initq.tsx(55,51): error TS1127: Invalid character.
initq.tsx(55,59): error TS1127: Invalid character.
initq.tsx(55,61): error TS1109: Expression expected.
initq.tsx(55,65): error TS1127: Invalid character.
initq.tsx(55,67): error TS1434: Unexpected keyword or identifier.
initq.tsx(57,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(57,14): error TS1127: Invalid character.
initq.tsx(57,16): error TS1434: Unexpected keyword or identifier.
initq.tsx(57,27): error TS1127: Invalid character.
initq.tsx(57,29): error TS1435: Unknown keyword or identifier. Did you mean 'using'?
initq.tsx(57,41): error TS1127: Invalid character.
initq.tsx(57,43): error TS1434: Unexpected keyword or identifier.
initq.tsx(57,55): error TS1127: Invalid character.
initq.tsx(57,64): error TS1127: Invalid character.
initq.tsx(57,76): error TS1127: Invalid character.
initq.tsx(57,78): error TS1434: Unexpected keyword or identifier.
initq.tsx(59,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(59,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(61,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(61,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(61,27): error TS1127: Invalid character.
initq.tsx(61,36): error TS1127: Invalid character.
initq.tsx(61,46): error TS1127: Invalid character.
initq.tsx(61,68): error TS1005: ',' expected.
initq.tsx(61,77): error TS1127: Invalid character.
initq.tsx(61,85): error TS1127: Invalid character.
initq.tsx(63,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(63,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(63,23): error TS1127: Invalid character.
initq.tsx(63,33): error TS1127: Invalid character.
initq.tsx(63,44): error TS1127: Invalid character.
initq.tsx(63,62): error TS1127: Invalid character.
initq.tsx(63,64): error TS1434: Unexpected keyword or identifier.
initq.tsx(63,74): error TS1127: Invalid character.
initq.tsx(63,82): error TS1127: Invalid character.
initq.tsx(65,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(65,36): error TS1005: ',' expected.
initq.tsx(65,41): error TS1005: ',' expected.
initq.tsx(65,46): error TS1005: ',' expected.
initq.tsx(65,56): error TS1005: ',' expected.
initq.tsx(65,61): error TS1005: ',' expected.
initq.tsx(65,69): error TS1005: ',' expected.
initq.tsx(65,77): error TS1005: ',' expected.
initq.tsx(65,82): error TS1005: ',' expected.
initq.tsx(65,89): error TS1005: ';' expected.
initq.tsx(67,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(67,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(67,34): error TS1005: ';' expected.
initq.tsx(69,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(69,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(69,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(69,46): error TS1005: ',' expected.
initq.tsx(69,48): error TS1005: ',' expected.
initq.tsx(69,62): error TS1005: ',' expected.
initq.tsx(69,68): error TS1005: ',' expected.
initq.tsx(69,73): error TS1005: ',' expected.
initq.tsx(69,78): error TS1005: ';' expected.
initq.tsx(71,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(71,10): error TS1005: ';' expected.
initq.tsx(73,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(73,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(73,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(73,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(75,1): error TS1005: ':' expected.
initq.tsx(75,6): error TS1434: Unexpected keyword or identifier.
initq.tsx(75,27): error TS1005: ',' expected.
initq.tsx(75,45): error TS1005: ',' expected.
initq.tsx(75,62): error TS1005: ';' expected.
initq.tsx(75,68): error TS1434: Unexpected keyword or identifier.
initq.tsx(77,1): error TS1005: ':' expected.
initq.tsx(77,10): error TS1005: ';' expected.
initq.tsx(79,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(79,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(79,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(79,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(81,1): error TS1005: ':' expected.
initq.tsx(81,6): error TS1434: Unexpected keyword or identifier.
initq.tsx(81,27): error TS1005: ';' expected.
initq.tsx(81,33): error TS1434: Unexpected keyword or identifier.
initq.tsx(83,1): error TS1005: ':' expected.
initq.tsx(83,10): error TS1005: ';' expected.
initq.tsx(85,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(85,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(85,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(85,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(87,1): error TS1005: ':' expected.
initq.tsx(87,6): error TS1434: Unexpected keyword or identifier.
initq.tsx(87,27): error TS1005: ';' expected.
initq.tsx(87,33): error TS1434: Unexpected keyword or identifier.
initq.tsx(89,1): error TS1005: ':' expected.
initq.tsx(89,5): error TS1434: Unexpected keyword or identifier.
initq.tsx(89,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(89,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(89,26): error TS1434: Unexpected keyword or identifier.
initq.tsx(89,31): error TS1434: Unexpected keyword or identifier.
initq.tsx(89,42): error TS1435: Unknown keyword or identifier. Did you mean 'function'?
initq.tsx(89,53): error TS1434: Unexpected keyword or identifier.
initq.tsx(91,1): error TS1005: ':' expected.
initq.tsx(91,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(91,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(91,42): error TS1005: ',' expected.
initq.tsx(91,58): error TS1005: ',' expected.
initq.tsx(91,66): error TS1005: ';' expected.
initq.tsx(93,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(93,5): error TS1434: Unexpected keyword or identifier.
initq.tsx(93,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(93,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(93,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(93,28): error TS1434: Unexpected keyword or identifier.
initq.tsx(93,33): error TS1434: Unexpected keyword or identifier.
initq.tsx(93,39): error TS1434: Unexpected keyword or identifier.
initq.tsx(93,49): error TS1434: Unexpected keyword or identifier.
initq.tsx(93,72): error TS1005: ')' expected.
initq.tsx(93,119): error TS1005: ';' expected.
initq.tsx(93,140): error TS1005: ';' expected.
initq.tsx(93,149): error TS1434: Unexpected keyword or identifier.
initq.tsx(93,154): error TS1434: Unexpected keyword or identifier.
initq.tsx(93,157): error TS1128: Declaration or statement expected.
initq.tsx(95,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(95,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(95,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(95,25): error TS1434: Unexpected keyword or identifier.
initq.tsx(95,75): error TS1005: ')' expected.
initq.tsx(95,96): error TS1003: Identifier expected.
initq.tsx(97,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(97,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(97,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(97,25): error TS1434: Unexpected keyword or identifier.
initq.tsx(97,78): error TS1005: ')' expected.
initq.tsx(97,92): error TS1003: Identifier expected.
initq.tsx(99,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(99,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(99,41): error TS1005: ',' expected.
initq.tsx(99,56): error TS1005: ',' expected.
initq.tsx(99,61): error TS1005: ',' expected.
initq.tsx(99,70): error TS1005: ',' expected.
initq.tsx(100,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,24): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,35): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,45): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,53): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,59): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,69): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,76): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,80): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,90): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,97): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,107): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,114): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,119): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,145): error TS1005: ';' expected.
initq.tsx(100,150): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,160): error TS1434: Unexpected keyword or identifier.
initq.tsx(100,167): error TS1434: Unexpected keyword or identifier.
initq.tsx(102,12): error TS1005: ';' expected.
initq.tsx(102,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(102,50): error TS1005: ',' expected.
initq.tsx(102,74): error TS1005: ',' expected.
initq.tsx(102,97): error TS1005: ',' expected.
initq.tsx(102,139): error TS1005: ',' expected.
initq.tsx(102,160): error TS1005: ',' expected.
initq.tsx(102,175): error TS1005: ',' expected.
initq.tsx(102,181): error TS1005: ',' expected.
initq.tsx(102,209): error TS1005: ',' expected.
initq.tsx(102,224): error TS1005: ',' expected.
initq.tsx(102,231): error TS1005: ',' expected.
initq.tsx(102,243): error TS1005: ';' expected.
initq.tsx(102,260): error TS1005: ';' expected.
initq.tsx(102,265): error TS1434: Unexpected keyword or identifier.
initq.tsx(102,272): error TS1434: Unexpected keyword or identifier.
initq.tsx(102,277): error TS1434: Unexpected keyword or identifier.
initq.tsx(102,281): error TS1434: Unexpected keyword or identifier.
initq.tsx(102,286): error TS1434: Unexpected keyword or identifier.
initq.tsx(109,7): error TS1005: ',' expected.
initq.tsx(109,19): error TS1005: ',' expected.
initq.tsx(109,25): error TS1005: ',' expected.
initq.tsx(109,32): error TS1005: ',' expected.
initq.tsx(111,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(111,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(111,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(113,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(113,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(113,28): error TS1005: ';' expected.
initq.tsx(113,50): error TS1005: ')' expected.
initq.tsx(113,56): error TS1434: Unexpected keyword or identifier.
initq.tsx(113,80): error TS1005: ';' expected.
initq.tsx(113,86): error TS1434: Unexpected keyword or identifier.
initq.tsx(113,96): error TS1434: Unexpected keyword or identifier.
initq.tsx(113,101): error TS1434: Unexpected keyword or identifier.
initq.tsx(113,106): error TS1128: Declaration or statement expected.
initq.tsx(117,1): error TS1127: Invalid character.
initq.tsx(117,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(117,30): error TS1005: ',' expected.
initq.tsx(119,1): error TS1127: Invalid character.
initq.tsx(119,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(119,25): error TS1005: ',' expected.
initq.tsx(121,1): error TS1127: Invalid character.
initq.tsx(121,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(121,30): error TS1005: ',' expected.
initq.tsx(123,1): error TS1127: Invalid character.
initq.tsx(123,21): error TS1005: ',' expected.
initq.tsx(125,1): error TS1127: Invalid character.
initq.tsx(125,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(125,33): error TS1005: ',' expected.
initq.tsx(127,1): error TS1127: Invalid character.
initq.tsx(127,23): error TS1005: ';' expected.
initq.tsx(127,39): error TS1005: ',' expected.
initq.tsx(129,1): error TS1127: Invalid character.
initq.tsx(129,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(129,25): error TS1005: ',' expected.
initq.tsx(131,1): error TS1127: Invalid character.
initq.tsx(131,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(131,24): error TS1005: ',' expected.
initq.tsx(133,1): error TS1127: Invalid character.
initq.tsx(133,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(133,27): error TS1005: ',' expected.
initq.tsx(135,1): error TS1127: Invalid character.
initq.tsx(135,44): error TS1005: ',' expected.
initq.tsx(139,1): error TS1127: Invalid character.
initq.tsx(139,23): error TS1005: ',' expected.
initq.tsx(139,29): error TS1005: ',' expected.
initq.tsx(139,43): error TS1005: ',' expected.
initq.tsx(141,1): error TS1127: Invalid character.
initq.tsx(141,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(141,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(141,34): error TS1005: ',' expected.
initq.tsx(143,1): error TS1127: Invalid character.
initq.tsx(143,21): error TS1005: ',' expected.
initq.tsx(143,27): error TS1005: ',' expected.
initq.tsx(143,42): error TS1005: ',' expected.
initq.tsx(145,1): error TS1127: Invalid character.
initq.tsx(145,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(145,23): error TS1005: ',' expected.
initq.tsx(147,1): error TS1127: Invalid character.
initq.tsx(147,16): error TS1005: ',' expected.
initq.tsx(149,1): error TS1127: Invalid character.
initq.tsx(149,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(149,40): error TS1005: ',' expected.
initq.tsx(151,1): error TS1127: Invalid character.
initq.tsx(151,44): error TS1005: ',' expected.
initq.tsx(153,19): error TS1005: ';' expected.
initq.tsx(155,1): error TS1127: Invalid character.
initq.tsx(155,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(155,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(155,25): error TS1005: ',' expected.
initq.tsx(157,1): error TS1127: Invalid character.
initq.tsx(157,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(157,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(157,25): error TS1005: ',' expected.
initq.tsx(159,1): error TS1127: Invalid character.
initq.tsx(159,26): error TS1005: ';' expected.
initq.tsx(159,40): error TS1005: ',' expected.
initq.tsx(161,1): error TS1127: Invalid character.
initq.tsx(161,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(161,27): error TS1005: ',' expected.
initq.tsx(163,1): error TS1127: Invalid character.
initq.tsx(163,17): error TS1005: ',' expected.
initq.tsx(163,25): error TS1005: ',' expected.
initq.tsx(163,43): error TS1005: ',' expected.
initq.tsx(165,1): error TS1127: Invalid character.
initq.tsx(165,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(165,27): error TS1005: ',' expected.
initq.tsx(165,40): error TS1005: ',' expected.
initq.tsx(165,73): error TS1005: ',' expected.
initq.tsx(167,1): error TS1127: Invalid character.
initq.tsx(167,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(167,24): error TS1005: ',' expected.
initq.tsx(167,39): error TS1005: ',' expected.
initq.tsx(167,54): error TS1005: ',' expected.
initq.tsx(169,1): error TS1127: Invalid character.
initq.tsx(169,33): error TS1005: ',' expected.
initq.tsx(171,1): error TS1127: Invalid character.
initq.tsx(171,44): error TS1005: ',' expected.
initq.tsx(175,1): error TS1127: Invalid character.
initq.tsx(175,16): error TS1005: ';' expected.
initq.tsx(175,27): error TS1005: ',' expected.
initq.tsx(177,1): error TS1127: Invalid character.
initq.tsx(177,21): error TS1005: ',' expected.
initq.tsx(177,36): error TS1005: ',' expected.
initq.tsx(179,1): error TS1127: Invalid character.
initq.tsx(179,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(179,32): error TS1005: ',' expected.
initq.tsx(181,1): error TS1127: Invalid character.
initq.tsx(181,18): error TS1005: ',' expected.
initq.tsx(181,24): error TS1005: ',' expected.
initq.tsx(181,40): error TS1005: ',' expected.
initq.tsx(183,1): error TS1127: Invalid character.
initq.tsx(183,15): error TS1005: ',' expected.
initq.tsx(183,26): error TS1005: ',' expected.
initq.tsx(183,36): error TS1005: ',' expected.
initq.tsx(183,54): error TS1005: ',' expected.
initq.tsx(185,1): error TS1127: Invalid character.
initq.tsx(185,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(185,24): error TS1005: ',' expected.
initq.tsx(187,1): error TS1127: Invalid character.
initq.tsx(187,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(187,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(187,30): error TS1005: ',' expected.
initq.tsx(189,1): error TS1127: Invalid character.
initq.tsx(189,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(189,22): error TS1005: ',' expected.
initq.tsx(189,30): error TS1005: ',' expected.
initq.tsx(189,54): error TS1005: ',' expected.
initq.tsx(191,1): error TS1127: Invalid character.
initq.tsx(191,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(191,21): error TS1005: ',' expected.
initq.tsx(193,1): error TS1127: Invalid character.
initq.tsx(193,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(193,23): error TS1005: ',' expected.
initq.tsx(195,1): error TS1127: Invalid character.
initq.tsx(195,44): error TS1005: ',' expected.
initq.tsx(199,1): error TS1127: Invalid character.
initq.tsx(199,17): error TS1005: ',' expected.
initq.tsx(201,1): error TS1127: Invalid character.
initq.tsx(201,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(201,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(201,16): error TS1434: Unexpected keyword or identifier.
initq.tsx(201,36): error TS1005: ',' expected.
initq.tsx(203,1): error TS1127: Invalid character.
initq.tsx(203,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(203,27): error TS1005: ',' expected.
initq.tsx(205,1): error TS1127: Invalid character.
initq.tsx(205,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(205,28): error TS1005: ',' expected.
initq.tsx(207,1): error TS1127: Invalid character.
initq.tsx(207,28): error TS1005: ',' expected.
initq.tsx(209,1): error TS1127: Invalid character.
initq.tsx(209,25): error TS1005: ',' expected.
initq.tsx(211,1): error TS1127: Invalid character.
initq.tsx(211,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(211,32): error TS1005: ',' expected.
initq.tsx(213,1): error TS1127: Invalid character.
initq.tsx(213,44): error TS1005: ',' expected.
initq.tsx(217,1): error TS1127: Invalid character.
initq.tsx(217,14): error TS1005: ',' expected.
initq.tsx(219,1): error TS1127: Invalid character.
initq.tsx(219,18): error TS1005: ';' expected.
initq.tsx(219,40): error TS1005: ',' expected.
initq.tsx(221,1): error TS1127: Invalid character.
initq.tsx(221,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(221,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(221,31): error TS1005: ',' expected.
initq.tsx(223,1): error TS1127: Invalid character.
initq.tsx(223,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(223,26): error TS1005: ',' expected.
initq.tsx(225,1): error TS1127: Invalid character.
initq.tsx(225,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(225,21): error TS1005: ',' expected.
initq.tsx(227,1): error TS1127: Invalid character.
initq.tsx(227,44): error TS1005: ',' expected.
initq.tsx(229,16): error TS1005: ';' expected.
initq.tsx(231,1): error TS1127: Invalid character.
initq.tsx(231,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(231,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(231,34): error TS1005: ',' expected.
initq.tsx(233,1): error TS1127: Invalid character.
initq.tsx(233,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(233,21): error TS1005: ',' expected.
initq.tsx(235,1): error TS1127: Invalid character.
initq.tsx(235,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(235,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(235,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(235,47): error TS1005: ',' expected.
initq.tsx(237,1): error TS1127: Invalid character.
initq.tsx(237,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(237,28): error TS1005: ',' expected.
initq.tsx(239,1): error TS1127: Invalid character.
initq.tsx(239,44): error TS1005: ',' expected.
initq.tsx(243,1): error TS1127: Invalid character.
initq.tsx(243,24): error TS1005: ',' expected.
initq.tsx(245,1): error TS1127: Invalid character.
initq.tsx(245,22): error TS1005: ',' expected.
initq.tsx(247,1): error TS1127: Invalid character.
initq.tsx(247,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(247,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(247,31): error TS1005: ',' expected.
initq.tsx(249,1): error TS1127: Invalid character.
initq.tsx(249,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(249,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(249,41): error TS1005: ',' expected.
initq.tsx(251,1): error TS1127: Invalid character.
initq.tsx(251,44): error TS1005: ',' expected.
initq.tsx(255,1): error TS1127: Invalid character.
initq.tsx(255,20): error TS1005: ';' expected.
initq.tsx(255,33): error TS1005: ',' expected.
initq.tsx(257,1): error TS1127: Invalid character.
initq.tsx(257,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(257,30): error TS1005: ',' expected.
initq.tsx(259,1): error TS1127: Invalid character.
initq.tsx(259,17): error TS1005: ',' expected.
initq.tsx(261,1): error TS1127: Invalid character.
initq.tsx(261,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(261,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(261,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(261,36): error TS1005: ',' expected.
initq.tsx(263,1): error TS1127: Invalid character.
initq.tsx(263,44): error TS1005: ',' expected.
initq.tsx(265,20): error TS1005: ';' expected.
initq.tsx(267,1): error TS1127: Invalid character.
initq.tsx(267,16): error TS1005: ',' expected.
initq.tsx(267,35): error TS1005: ',' expected.
initq.tsx(269,1): error TS1127: Invalid character.
initq.tsx(269,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(269,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(269,34): error TS1005: ',' expected.
initq.tsx(269,53): error TS1005: ',' expected.
initq.tsx(271,1): error TS1127: Invalid character.
initq.tsx(271,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(271,24): error TS1005: ',' expected.
initq.tsx(271,36): error TS1005: ',' expected.
initq.tsx(271,42): error TS1005: ',' expected.
initq.tsx(271,51): error TS1005: ',' expected.
initq.tsx(271,58): error TS1005: ',' expected.
initq.tsx(271,65): error TS1005: ',' expected.
initq.tsx(271,70): error TS1005: ',' expected.
initq.tsx(271,73): error TS1005: ',' expected.
initq.tsx(273,1): error TS1127: Invalid character.
initq.tsx(273,44): error TS1005: ',' expected.
initq.tsx(275,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(275,24): error TS1005: ';' expected.
initq.tsx(277,1): error TS1127: Invalid character.
initq.tsx(277,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(277,23): error TS1005: ',' expected.
initq.tsx(279,1): error TS1127: Invalid character.
initq.tsx(279,16): error TS1005: ';' expected.
initq.tsx(279,28): error TS1005: ';' expected.
initq.tsx(279,41): error TS1005: ',' expected.
initq.tsx(281,1): error TS1127: Invalid character.
initq.tsx(281,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(281,26): error TS1005: ';' expected.
initq.tsx(281,41): error TS1005: ',' expected.
initq.tsx(283,1): error TS1127: Invalid character.
initq.tsx(283,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(283,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(283,32): error TS1005: ',' expected.
initq.tsx(285,1): error TS1127: Invalid character.
initq.tsx(285,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(285,25): error TS1005: ',' expected.
initq.tsx(285,44): error TS1005: ',' expected.
initq.tsx(287,1): error TS1127: Invalid character.
initq.tsx(287,44): error TS1005: ',' expected.
initq.tsx(289,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(289,26): error TS1005: ')' expected.
initq.tsx(289,33): error TS1434: Unexpected keyword or identifier.
initq.tsx(289,43): error TS1434: Unexpected keyword or identifier.
initq.tsx(289,50): error TS1434: Unexpected keyword or identifier.
initq.tsx(289,56): error TS1434: Unexpected keyword or identifier.
initq.tsx(289,62): error TS1128: Declaration or statement expected.
initq.tsx(291,18): error TS1005: ';' expected.
initq.tsx(291,24): error TS1434: Unexpected keyword or identifier.
initq.tsx(291,30): error TS1434: Unexpected keyword or identifier.
initq.tsx(291,35): error TS1434: Unexpected keyword or identifier.
initq.tsx(291,62): error TS1005: ')' expected.
initq.tsx(291,84): error TS1005: ';' expected.
initq.tsx(291,95): error TS1128: Declaration or statement expected.
initq.tsx(293,1): error TS1435: Unknown keyword or identifier. Did you mean 'await'?
initq.tsx(293,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(293,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(293,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(293,35): error TS1005: ',' expected.
initq.tsx(293,42): error TS1005: ',' expected.
initq.tsx(293,50): error TS1005: ';' expected.
initq.tsx(293,62): error TS1005: ')' expected.
initq.tsx(293,77): error TS1005: ';' expected.
initq.tsx(293,83): error TS1434: Unexpected keyword or identifier.
initq.tsx(293,87): error TS1128: Declaration or statement expected.
initq.tsx(295,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(295,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(295,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(295,39): error TS1005: ')' expected.
initq.tsx(295,57): error TS1005: ';' expected.
initq.tsx(295,64): error TS1434: Unexpected keyword or identifier.
initq.tsx(295,69): error TS1434: Unexpected keyword or identifier.
initq.tsx(295,75): error TS1128: Declaration or statement expected.
initq.tsx(297,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(297,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(297,16): error TS1434: Unexpected keyword or identifier.
initq.tsx(297,44): error TS1005: ',' expected.
initq.tsx(297,51): error TS1005: ',' expected.
initq.tsx(297,63): error TS1005: ',' expected.
initq.tsx(297,69): error TS1005: ';' expected.
initq.tsx(297,81): error TS1005: ')' expected.
initq.tsx(297,97): error TS1005: ';' expected.
initq.tsx(297,103): error TS1128: Declaration or statement expected.
initq.tsx(299,26): error TS1005: ';' expected.
initq.tsx(299,34): error TS1434: Unexpected keyword or identifier.
initq.tsx(299,59): error TS1005: ',' expected.
initq.tsx(299,66): error TS1005: ',' expected.
initq.tsx(299,82): error TS1005: ',' expected.
initq.tsx(299,96): error TS1005: ',' expected.
initq.tsx(299,104): error TS1005: ';' expected.
initq.tsx(299,116): error TS1005: ')' expected.
initq.tsx(299,133): error TS1005: ';' expected.
initq.tsx(299,138): error TS1434: Unexpected keyword or identifier.
initq.tsx(299,144): error TS1128: Declaration or statement expected.
initq.tsx(301,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(301,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(301,26): error TS1127: Invalid character.
initq.tsx(301,37): error TS1005: ',' expected.
initq.tsx(301,44): error TS1005: ',' expected.
initq.tsx(301,50): error TS1005: ',' expected.
initq.tsx(301,63): error TS1127: Invalid character.
initq.tsx(303,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(303,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(303,35): error TS1005: ';' expected.
initq.tsx(303,45): error TS1434: Unexpected keyword or identifier.
initq.tsx(303,67): error TS1005: ',' expected.
initq.tsx(303,71): error TS1005: ';' expected.
initq.tsx(305,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(305,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(305,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(306,11): error TS1005: ',' expected.
initq.tsx(306,17): error TS1005: ',' expected.
initq.tsx(306,36): error TS1005: ',' expected.
initq.tsx(306,63): error TS1005: ',' expected.
initq.tsx(306,68): error TS1005: ',' expected.
initq.tsx(306,74): error TS1005: ',' expected.
initq.tsx(308,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(308,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(308,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(308,37): error TS1005: ',' expected.
initq.tsx(308,50): error TS1005: ',' expected.
initq.tsx(308,55): error TS1005: ',' expected.
initq.tsx(308,61): error TS1005: ';' expected.
initq.tsx(308,66): error TS1434: Unexpected keyword or identifier.
initq.tsx(309,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(309,25): error TS1005: ',' expected.
initq.tsx(310,14): error TS1005: ',' expected.
initq.tsx(311,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(312,16): error TS1005: ',' expected.
initq.tsx(312,25): error TS1005: ',' expected.
initq.tsx(313,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(313,23): error TS1005: ',' expected.
initq.tsx(314,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(314,27): error TS1005: ',' expected.
initq.tsx(315,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(315,27): error TS1005: ',' expected.
initq.tsx(316,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(316,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(316,31): error TS1005: ',' expected.
initq.tsx(317,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(319,19): error TS1005: ';' expected.
initq.tsx(321,7): error TS1005: ')' expected.
initq.tsx(321,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(321,25): error TS1434: Unexpected keyword or identifier.
initq.tsx(321,32): error TS1434: Unexpected keyword or identifier.
initq.tsx(321,41): error TS1128: Declaration or statement expected.
initq.tsx(323,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(323,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(323,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(327,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(327,19): error TS1127: Invalid character.
initq.tsx(327,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(327,40): error TS1005: ',' expected.
initq.tsx(327,48): error TS1127: Invalid character.
initq.tsx(327,65): error TS1005: ',' expected.
initq.tsx(327,73): error TS1127: Invalid character.
initq.tsx(327,86): error TS1109: Expression expected.
initq.tsx(327,90): error TS1005: ',' expected.
initq.tsx(329,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(329,20): error TS1127: Invalid character.
initq.tsx(329,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(329,40): error TS1127: Invalid character.
initq.tsx(329,42): error TS1434: Unexpected keyword or identifier.
initq.tsx(329,57): error TS1127: Invalid character.
initq.tsx(329,59): error TS1434: Unexpected keyword or identifier.
initq.tsx(329,83): error TS1005: ',' expected.
initq.tsx(329,96): error TS1127: Invalid character.
initq.tsx(329,106): error TS1127: Invalid character.
initq.tsx(329,108): error TS1434: Unexpected keyword or identifier.
initq.tsx(331,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(331,14): error TS1434: Unexpected keyword or identifier.
initq.tsx(333,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(333,16): error TS1127: Invalid character.
initq.tsx(333,36): error TS1005: ',' expected.
initq.tsx(333,41): error TS1005: ',' expected.
initq.tsx(333,54): error TS1127: Invalid character.
initq.tsx(333,56): error TS1434: Unexpected keyword or identifier.
initq.tsx(333,63): error TS1434: Unexpected keyword or identifier.
initq.tsx(333,70): error TS1434: Unexpected keyword or identifier.
initq.tsx(333,78): error TS1434: Unexpected keyword or identifier.
initq.tsx(333,89): error TS1127: Invalid character.
initq.tsx(333,91): error TS1435: Unknown keyword or identifier. Did you mean 'any'?
initq.tsx(335,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(335,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(335,23): error TS1434: Unexpected keyword or identifier.
initq.tsx(335,39): error TS1109: Expression expected.
initq.tsx(335,42): error TS1005: ',' expected.
initq.tsx(335,48): error TS1005: ';' expected.
initq.tsx(335,50): error TS1127: Invalid character.
initq.tsx(335,52): error TS1434: Unexpected keyword or identifier.
initq.tsx(335,65): error TS1127: Invalid character.
initq.tsx(335,79): error TS1005: ',' expected.
initq.tsx(335,85): error TS1127: Invalid character.
initq.tsx(335,99): error TS1005: ',' expected.
initq.tsx(335,105): error TS1127: Invalid character.
initq.tsx(335,107): error TS1434: Unexpected keyword or identifier.
initq.tsx(335,122): error TS1109: Expression expected.
initq.tsx(335,125): error TS1005: ',' expected.
initq.tsx(337,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(337,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(337,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(337,27): error TS1434: Unexpected keyword or identifier.
initq.tsx(337,41): error TS1005: ';' expected.
initq.tsx(337,52): error TS1005: ')' expected.
initq.tsx(337,57): error TS1434: Unexpected keyword or identifier.
initq.tsx(337,64): error TS1128: Declaration or statement expected.
initq.tsx(339,1): error TS1127: Invalid character.
initq.tsx(339,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(339,27): error TS1005: ',' expected.
initq.tsx(341,1): error TS1127: Invalid character.
initq.tsx(341,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(343,1): error TS1127: Invalid character.
initq.tsx(345,1): error TS1127: Invalid character.
initq.tsx(347,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(347,32): error TS1005: ')' expected.
initq.tsx(347,37): error TS1434: Unexpected keyword or identifier.
initq.tsx(347,41): error TS1434: Unexpected keyword or identifier.
initq.tsx(347,48): error TS1128: Declaration or statement expected.
initq.tsx(349,1): error TS1127: Invalid character.
initq.tsx(349,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(351,1): error TS1127: Invalid character.
initq.tsx(351,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(353,1): error TS1127: Invalid character.
initq.tsx(353,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(353,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(353,34): error TS1005: ',' expected.
initq.tsx(355,1): error TS1127: Invalid character.
initq.tsx(355,26): error TS1005: ',' expected.
initq.tsx(355,31): error TS1005: ',' expected.
initq.tsx(355,38): error TS1005: ',' expected.
initq.tsx(357,1): error TS1127: Invalid character.
initq.tsx(357,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(357,34): error TS1005: ',' expected.
initq.tsx(357,39): error TS1005: ',' expected.
initq.tsx(357,46): error TS1005: ',' expected.
initq.tsx(359,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(359,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(359,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(359,31): error TS1434: Unexpected keyword or identifier.
initq.tsx(359,34): error TS1434: Unexpected keyword or identifier.
initq.tsx(359,67): error TS1005: ',' expected.
initq.tsx(359,77): error TS1005: ',' expected.
initq.tsx(359,89): error TS1005: ';' expected.
initq.tsx(359,100): error TS1005: ')' expected.
initq.tsx(359,106): error TS1434: Unexpected keyword or identifier.
initq.tsx(359,111): error TS1434: Unexpected keyword or identifier.
initq.tsx(359,118): error TS1434: Unexpected keyword or identifier.
initq.tsx(359,126): error TS1434: Unexpected keyword or identifier.
initq.tsx(359,134): error TS1434: Unexpected keyword or identifier.
initq.tsx(359,142): error TS1005: ';' expected.
initq.tsx(359,147): error TS1128: Declaration or statement expected.
initq.tsx(361,1): error TS1127: Invalid character.
initq.tsx(361,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(361,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(361,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(361,24): error TS1434: Unexpected keyword or identifier.
initq.tsx(363,1): error TS1127: Invalid character.
initq.tsx(363,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(363,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(363,23): error TS1434: Unexpected keyword or identifier.
initq.tsx(363,28): error TS1434: Unexpected keyword or identifier.
initq.tsx(365,1): error TS1127: Invalid character.
initq.tsx(365,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(365,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(365,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(367,1): error TS1127: Invalid character.
initq.tsx(367,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(367,33): error TS1005: ',' expected.
initq.tsx(367,39): error TS1005: ',' expected.
initq.tsx(367,45): error TS1005: ',' expected.
initq.tsx(369,1): error TS1127: Invalid character.
initq.tsx(369,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(369,34): error TS1005: ',' expected.
initq.tsx(369,40): error TS1005: ',' expected.
initq.tsx(371,1): error TS1127: Invalid character.
initq.tsx(371,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(371,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(371,25): error TS1434: Unexpected keyword or identifier.
initq.tsx(371,31): error TS1434: Unexpected keyword or identifier.
initq.tsx(371,54): error TS1005: ',' expected.
initq.tsx(373,1): error TS1127: Invalid character.
initq.tsx(373,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(373,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(373,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(373,28): error TS1434: Unexpected keyword or identifier.
initq.tsx(373,35): error TS1434: Unexpected keyword or identifier.
initq.tsx(373,43): error TS1434: Unexpected keyword or identifier.
initq.tsx(373,53): error TS1434: Unexpected keyword or identifier.
initq.tsx(375,1): error TS1127: Invalid character.
initq.tsx(375,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(375,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(375,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(375,28): error TS1434: Unexpected keyword or identifier.
initq.tsx(375,35): error TS1434: Unexpected keyword or identifier.
initq.tsx(377,1): error TS1127: Invalid character.
initq.tsx(377,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(377,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(377,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(377,28): error TS1434: Unexpected keyword or identifier.
initq.tsx(379,1): error TS1127: Invalid character.
initq.tsx(379,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(379,14): error TS1434: Unexpected keyword or identifier.
initq.tsx(379,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(379,30): error TS1434: Unexpected keyword or identifier.
initq.tsx(381,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(381,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(381,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(383,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(383,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(383,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(383,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(383,36): error TS1005: ';' expected.
initq.tsx(383,41): error TS1434: Unexpected keyword or identifier.
initq.tsx(383,67): error TS1005: ':' expected.
initq.tsx(385,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(385,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(387,10): error TS1005: ';' expected.
initq.tsx(389,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(389,6): error TS1434: Unexpected keyword or identifier.
initq.tsx(389,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(389,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(389,27): error TS1127: Invalid character.
initq.tsx(389,45): error TS1005: ',' expected.
initq.tsx(389,56): error TS1127: Invalid character.
initq.tsx(389,76): error TS1005: ',' expected.
initq.tsx(389,82): error TS1005: ',' expected.
initq.tsx(389,95): error TS1127: Invalid character.
initq.tsx(389,110): error TS1005: ',' expected.
initq.tsx(389,116): error TS1005: ',' expected.
initq.tsx(389,122): error TS1005: ',' expected.
initq.tsx(389,129): error TS1005: ',' expected.
initq.tsx(389,137): error TS1127: Invalid character.
initq.tsx(389,158): error TS1005: ',' expected.
initq.tsx(389,170): error TS1005: ',' expected.
initq.tsx(389,176): error TS1005: ',' expected.
initq.tsx(389,183): error TS1005: ',' expected.
initq.tsx(389,189): error TS1127: Invalid character.
initq.tsx(389,213): error TS1005: ',' expected.
initq.tsx(389,228): error TS1005: ',' expected.
initq.tsx(389,236): error TS1127: Invalid character.
initq.tsx(389,256): error TS1005: ';' expected.
initq.tsx(391,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(391,6): error TS1434: Unexpected keyword or identifier.
initq.tsx(391,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(391,32): error TS1005: ';' expected.
initq.tsx(391,52): error TS1005: ';' expected.
initq.tsx(391,54): error TS1127: Invalid character.
initq.tsx(391,56): error TS1434: Unexpected keyword or identifier.
initq.tsx(391,74): error TS1005: ',' expected.
initq.tsx(391,82): error TS1127: Invalid character.
initq.tsx(391,84): error TS1434: Unexpected keyword or identifier.
initq.tsx(391,101): error TS1005: ',' expected.
initq.tsx(391,109): error TS1127: Invalid character.
initq.tsx(391,111): error TS1434: Unexpected keyword or identifier.
initq.tsx(391,116): error TS1434: Unexpected keyword or identifier.
initq.tsx(391,137): error TS1005: ',' expected.
initq.tsx(391,145): error TS1127: Invalid character.
initq.tsx(391,147): error TS1434: Unexpected keyword or identifier.
initq.tsx(391,171): error TS1005: ',' expected.
initq.tsx(391,179): error TS1127: Invalid character.
initq.tsx(391,181): error TS1434: Unexpected keyword or identifier.
initq.tsx(391,206): error TS1005: ',' expected.
initq.tsx(391,214): error TS1005: ',' expected.
initq.tsx(391,219): error TS1005: ',' expected.
initq.tsx(391,230): error TS1005: ',' expected.
initq.tsx(391,250): error TS1005: ',' expected.
initq.tsx(391,258): error TS1127: Invalid character.
initq.tsx(391,278): error TS1005: ';' expected.
initq.tsx(391,313): error TS1005: ',' expected.
initq.tsx(393,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(393,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(393,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(393,27): error TS1434: Unexpected keyword or identifier.
initq.tsx(393,32): error TS1434: Unexpected keyword or identifier.
initq.tsx(393,37): error TS1434: Unexpected keyword or identifier.
initq.tsx(393,55): error TS1005: ';' expected.
initq.tsx(395,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(395,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(395,38): error TS1005: ',' expected.
initq.tsx(395,44): error TS1005: ',' expected.
initq.tsx(395,57): error TS1005: ';' expected.
initq.tsx(397,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(397,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(397,43): error TS1005: ';' expected.
initq.tsx(397,45): error TS1434: Unexpected keyword or identifier.
initq.tsx(397,59): error TS1005: ',' expected.
initq.tsx(397,65): error TS1127: Invalid character.
initq.tsx(397,69): error TS1005: ',' expected.
initq.tsx(397,77): error TS1005: ',' expected.
initq.tsx(397,83): error TS1005: ',' expected.
initq.tsx(397,92): error TS1127: Invalid character.
initq.tsx(397,102): error TS1005: ',' expected.
initq.tsx(399,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(399,33): error TS1005: ',' expected.
initq.tsx(399,41): error TS1005: ',' expected.
initq.tsx(399,64): error TS1005: ';' expected.
initq.tsx(399,66): error TS1434: Unexpected keyword or identifier.
initq.tsx(401,12): error TS1005: ';' expected.
initq.tsx(401,14): error TS1434: Unexpected keyword or identifier.
initq.tsx(401,28): error TS1005: ',' expected.
initq.tsx(401,34): error TS1127: Invalid character.
initq.tsx(401,38): error TS1005: ',' expected.
initq.tsx(401,43): error TS1005: ',' expected.
initq.tsx(401,55): error TS1005: ',' expected.
initq.tsx(403,13): error TS1005: ';' expected.
initq.tsx(403,24): error TS1005: ',' expected.
initq.tsx(403,50): error TS1005: ',' expected.
initq.tsx(403,57): error TS1005: ',' expected.
initq.tsx(403,62): error TS1005: ';' expected.
initq.tsx(403,64): error TS1434: Unexpected keyword or identifier.
initq.tsx(403,78): error TS1005: ',' expected.
initq.tsx(403,84): error TS1127: Invalid character.
initq.tsx(403,86): error TS1127: Invalid character.
initq.tsx(403,92): error TS1005: ',' expected.
initq.tsx(403,100): error TS1005: ',' expected.
initq.tsx(405,43): error TS1005: ',' expected.
initq.tsx(405,63): error TS1003: Identifier expected.
initq.tsx(405,64): error TS1005: ';' expected.
initq.tsx(405,66): error TS1434: Unexpected keyword or identifier.
initq.tsx(405,71): error TS1434: Unexpected keyword or identifier.
initq.tsx(407,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(407,24): error TS1005: ',' expected.
initq.tsx(407,51): error TS1005: ';' expected.
initq.tsx(407,53): error TS1434: Unexpected keyword or identifier.
initq.tsx(407,67): error TS1005: ',' expected.
initq.tsx(407,73): error TS1127: Invalid character.
initq.tsx(407,82): error TS1005: ',' expected.
initq.tsx(407,90): error TS1005: ',' expected.
initq.tsx(409,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(409,47): error TS1005: ';' expected.
initq.tsx(409,58): error TS1005: ',' expected.
initq.tsx(409,74): error TS1005: ';' expected.
initq.tsx(409,76): error TS1434: Unexpected keyword or identifier.
initq.tsx(411,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(411,30): error TS1005: ',' expected.
initq.tsx(411,45): error TS1005: ',' expected.
initq.tsx(411,52): error TS1005: ';' expected.
initq.tsx(411,54): error TS1434: Unexpected keyword or identifier.
initq.tsx(411,59): error TS1434: Unexpected keyword or identifier.
initq.tsx(413,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(413,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(413,14): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(413,41): error TS1005: ',' expected.
initq.tsx(413,43): error TS1005: ',' expected.
initq.tsx(413,48): error TS1005: ',' expected.
initq.tsx(413,57): error TS1005: ';' expected.
initq.tsx(415,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(415,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(415,14): error TS1434: Unexpected keyword or identifier.
initq.tsx(415,24): error TS1434: Unexpected keyword or identifier.
initq.tsx(415,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(417,1): error TS1435: Unknown keyword or identifier. Did you mean 'number'?
initq.tsx(417,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(417,16): error TS1434: Unexpected keyword or identifier.
initq.tsx(419,1): error TS1435: Unknown keyword or identifier. Did you mean 'number'?
initq.tsx(419,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(419,14): error TS1434: Unexpected keyword or identifier.
initq.tsx(421,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(421,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(421,46): error TS1005: ',' expected.
initq.tsx(421,57): error TS1003: Identifier expected.
initq.tsx(421,58): error TS1005: ';' expected.
initq.tsx(421,60): error TS1127: Invalid character.
initq.tsx(421,75): error TS1005: ';' expected.
initq.tsx(421,82): error TS1127: Invalid character.
initq.tsx(421,88): error TS1005: ';' expected.
initq.tsx(421,100): error TS1127: Invalid character.
initq.tsx(421,106): error TS1005: ';' expected.
initq.tsx(421,118): error TS1127: Invalid character.
initq.tsx(421,120): error TS1434: Unexpected keyword or identifier.
initq.tsx(423,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(423,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(423,31): error TS1005: ';' expected.
initq.tsx(423,42): error TS1005: ',' expected.
initq.tsx(423,56): error TS1005: ',' expected.
initq.tsx(423,70): error TS1005: ',' expected.
initq.tsx(423,78): error TS1005: ';' expected.
initq.tsx(423,80): error TS1127: Invalid character.
initq.tsx(423,95): error TS1005: ';' expected.
initq.tsx(423,102): error TS1127: Invalid character.
initq.tsx(423,108): error TS1005: ';' expected.
initq.tsx(423,120): error TS1127: Invalid character.
initq.tsx(423,126): error TS1005: ';' expected.
initq.tsx(423,138): error TS1127: Invalid character.
initq.tsx(423,140): error TS1434: Unexpected keyword or identifier.
initq.tsx(425,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(425,34): error TS1005: ',' expected.
initq.tsx(425,53): error TS1005: ',' expected.
initq.tsx(425,60): error TS1005: ';' expected.
initq.tsx(425,62): error TS1434: Unexpected keyword or identifier.
initq.tsx(425,81): error TS1005: ';' expected.
initq.tsx(425,97): error TS1005: ';' expected.
initq.tsx(427,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(427,19): error TS1127: Invalid character.
initq.tsx(427,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(427,34): error TS1127: Invalid character.
initq.tsx(427,48): error TS1005: ',' expected.
initq.tsx(427,60): error TS1109: Expression expected.
initq.tsx(427,63): error TS1005: ',' expected.
initq.tsx(427,71): error TS1005: ',' expected.
initq.tsx(427,83): error TS1127: Invalid character.
initq.tsx(427,97): error TS1005: ',' expected.
initq.tsx(427,110): error TS1109: Expression expected.
initq.tsx(427,113): error TS1005: ',' expected.
initq.tsx(427,121): error TS1005: ',' expected.
initq.tsx(427,133): error TS1127: Invalid character.
initq.tsx(427,147): error TS1005: ',' expected.
initq.tsx(427,159): error TS1005: ',' expected.
initq.tsx(427,167): error TS1005: ',' expected.
initq.tsx(427,175): error TS1005: ',' expected.
initq.tsx(427,187): error TS1127: Invalid character.
initq.tsx(427,203): error TS1005: ',' expected.
initq.tsx(427,216): error TS1005: ';' expected.
initq.tsx(427,231): error TS1005: ';' expected.
initq.tsx(427,241): error TS1005: ';' expected.
initq.tsx(427,245): error TS1434: Unexpected keyword or identifier.
initq.tsx(429,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(429,5): error TS1434: Unexpected keyword or identifier.
initq.tsx(429,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(429,43): error TS1005: ';' expected.
initq.tsx(429,50): error TS1127: Invalid character.
initq.tsx(429,52): error TS1434: Unexpected keyword or identifier.
initq.tsx(429,78): error TS1127: Invalid character.
initq.tsx(429,80): error TS1434: Unexpected keyword or identifier.
initq.tsx(429,106): error TS1127: Invalid character.
initq.tsx(429,108): error TS1434: Unexpected keyword or identifier.
initq.tsx(429,112): error TS1434: Unexpected keyword or identifier.
initq.tsx(429,119): error TS1434: Unexpected keyword or identifier.
initq.tsx(429,135): error TS1005: ',' expected.
initq.tsx(429,141): error TS1005: ',' expected.
initq.tsx(429,150): error TS1127: Invalid character.
initq.tsx(429,152): error TS1434: Unexpected keyword or identifier.
initq.tsx(429,163): error TS1127: Invalid character.
initq.tsx(431,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(431,27): error TS1005: ')' expected.
initq.tsx(431,32): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(431,39): error TS1434: Unexpected keyword or identifier.
initq.tsx(431,48): error TS1128: Declaration or statement expected.
initq.tsx(433,1): error TS1127: Invalid character.
initq.tsx(433,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(435,1): error TS1127: Invalid character.
initq.tsx(435,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(435,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(435,33): error TS1005: ';' expected.
initq.tsx(435,48): error TS1005: ';' expected.
initq.tsx(437,1): error TS1127: Invalid character.
initq.tsx(437,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(437,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(437,31): error TS1005: ',' expected.
initq.tsx(437,37): error TS1005: ',' expected.
initq.tsx(437,45): error TS1005: ',' expected.
initq.tsx(437,50): error TS1005: ',' expected.
initq.tsx(437,69): error TS1005: ',' expected.
initq.tsx(439,1): error TS1127: Invalid character.
initq.tsx(439,3): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(439,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(439,42): error TS1005: ',' expected.
initq.tsx(439,54): error TS1005: ',' expected.
initq.tsx(441,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(441,25): error TS1005: ',' expected.
initq.tsx(441,30): error TS1005: ',' expected.
initq.tsx(441,39): error TS1005: ',' expected.
initq.tsx(441,47): error TS1005: ',' expected.
initq.tsx(441,56): error TS1005: ';' expected.
initq.tsx(441,67): error TS1005: ')' expected.
initq.tsx(441,72): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(441,79): error TS1434: Unexpected keyword or identifier.
initq.tsx(441,86): error TS1128: Declaration or statement expected.
initq.tsx(443,1): error TS1127: Invalid character.
initq.tsx(443,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(443,17): error TS1127: Invalid character.
initq.tsx(443,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(443,32): error TS1127: Invalid character.
initq.tsx(443,34): error TS1434: Unexpected keyword or identifier.
initq.tsx(443,52): error TS1127: Invalid character.
initq.tsx(443,86): error TS1127: Invalid character.
initq.tsx(443,96): error TS1127: Invalid character.
initq.tsx(443,107): error TS1127: Invalid character.
initq.tsx(445,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(445,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(445,16): error TS1434: Unexpected keyword or identifier.
initq.tsx(445,23): error TS1434: Unexpected keyword or identifier.
initq.tsx(445,52): error TS1005: ',' expected.
initq.tsx(445,63): error TS1005: ',' expected.
initq.tsx(445,78): error TS1005: ',' expected.
initq.tsx(445,90): error TS1005: '=>' expected.
initq.tsx(447,1): error TS1005: ':' expected.
initq.tsx(447,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(447,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(447,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(447,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(447,38): error TS1434: Unexpected keyword or identifier.
initq.tsx(447,44): error TS1434: Unexpected keyword or identifier.
initq.tsx(447,58): error TS1127: Invalid character.
initq.tsx(447,71): error TS1005: ';' expected.
initq.tsx(447,78): error TS1127: Invalid character.
initq.tsx(447,80): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(447,87): error TS1127: Invalid character.
initq.tsx(447,87): error TS1128: Declaration or statement expected.
initq.tsx(447,103): error TS1127: Invalid character.
initq.tsx(447,112): error TS1127: Invalid character.
initq.tsx(447,114): error TS1434: Unexpected keyword or identifier.
initq.tsx(449,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(449,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(449,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(449,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(449,27): error TS1434: Unexpected keyword or identifier.
initq.tsx(449,37): error TS1434: Unexpected keyword or identifier.
initq.tsx(449,42): error TS1434: Unexpected keyword or identifier.
initq.tsx(449,47): error TS1434: Unexpected keyword or identifier.
initq.tsx(449,64): error TS1127: Invalid character.
initq.tsx(449,73): error TS1127: Invalid character.
initq.tsx(449,75): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(449,82): error TS1127: Invalid character.
initq.tsx(449,82): error TS1128: Declaration or statement expected.
initq.tsx(449,98): error TS1127: Invalid character.
initq.tsx(449,107): error TS1127: Invalid character.
initq.tsx(449,109): error TS1434: Unexpected keyword or identifier.
initq.tsx(451,1): error TS1435: Unknown keyword or identifier. Did you mean 'number'?
initq.tsx(451,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(451,14): error TS1434: Unexpected keyword or identifier.
initq.tsx(451,24): error TS1434: Unexpected keyword or identifier.
initq.tsx(451,39): error TS1127: Invalid character.
initq.tsx(451,41): error TS1434: Unexpected keyword or identifier.
initq.tsx(451,59): error TS1127: Invalid character.
initq.tsx(451,73): error TS1127: Invalid character.
initq.tsx(451,75): error TS1434: Unexpected keyword or identifier.
initq.tsx(451,88): error TS1127: Invalid character.
initq.tsx(451,90): error TS1434: Unexpected keyword or identifier.
initq.tsx(451,103): error TS1127: Invalid character.
initq.tsx(451,105): error TS1434: Unexpected keyword or identifier.
initq.tsx(451,121): error TS1127: Invalid character.
initq.tsx(453,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(453,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(453,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(453,26): error TS1434: Unexpected keyword or identifier.
initq.tsx(453,74): error TS1005: ',' expected.
initq.tsx(453,92): error TS1005: ',' expected.
initq.tsx(453,97): error TS1005: ',' expected.
initq.tsx(453,114): error TS1005: ';' expected.
initq.tsx(455,15): error TS1005: ';' expected.
initq.tsx(457,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(457,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(457,46): error TS1005: ';' expected.
initq.tsx(457,48): error TS1434: Unexpected keyword or identifier.
initq.tsx(459,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(459,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(459,16): error TS1434: Unexpected keyword or identifier.
initq.tsx(459,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(459,27): error TS1434: Unexpected keyword or identifier.
initq.tsx(461,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(461,18): error TS1005: ';' expected.
initq.tsx(461,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(461,37): error TS1434: Unexpected keyword or identifier.
initq.tsx(463,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(463,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(463,30): error TS1005: ';' expected.
initq.tsx(463,32): error TS1127: Invalid character.
initq.tsx(463,54): error TS1005: ',' expected.
initq.tsx(463,69): error TS1005: ',' expected.
initq.tsx(463,77): error TS1005: ',' expected.
initq.tsx(463,88): error TS1127: Invalid character.
initq.tsx(463,117): error TS1005: ',' expected.
initq.tsx(463,123): error TS1005: ',' expected.
initq.tsx(463,140): error TS1005: ',' expected.
initq.tsx(463,145): error TS1005: ',' expected.
initq.tsx(463,153): error TS1127: Invalid character.
initq.tsx(463,169): error TS1005: ',' expected.
initq.tsx(463,188): error TS1005: ',' expected.
initq.tsx(463,210): error TS1005: ',' expected.
initq.tsx(465,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(465,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(465,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(465,40): error TS1005: ',' expected.
initq.tsx(465,49): error TS1005: ',' expected.
initq.tsx(465,61): error TS1005: ';' expected.
initq.tsx(465,81): error TS1005: ',' expected.
initq.tsx(465,86): error TS1005: ',' expected.
initq.tsx(465,89): error TS1005: ',' expected.
initq.tsx(465,112): error TS1005: ',' expected.
initq.tsx(465,130): error TS1005: ',' expected.
initq.tsx(465,136): error TS1005: ',' expected.
initq.tsx(465,143): error TS1005: ',' expected.
initq.tsx(465,150): error TS1005: '=>' expected.
initq.tsx(467,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(467,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(467,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(467,33): error TS1127: Invalid character.
initq.tsx(467,35): error TS1434: Unexpected keyword or identifier.
initq.tsx(467,56): error TS1005: ',' expected.
initq.tsx(467,59): error TS1005: ',' expected.
initq.tsx(467,65): error TS1127: Invalid character.
initq.tsx(467,67): error TS1434: Unexpected keyword or identifier.
initq.tsx(467,82): error TS1127: Invalid character.
initq.tsx(467,84): error TS1434: Unexpected keyword or identifier.
initq.tsx(467,100): error TS1127: Invalid character.
initq.tsx(467,102): error TS1434: Unexpected keyword or identifier.
initq.tsx(467,112): error TS1434: Unexpected keyword or identifier.
initq.tsx(469,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(469,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(469,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(469,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(469,27): error TS1435: Unknown keyword or identifier. Did you mean 'set iap'?
initq.tsx(469,49): error TS1005: ',' expected.
initq.tsx(469,52): error TS1005: ',' expected.
initq.tsx(469,57): error TS1005: ',' expected.
initq.tsx(469,61): error TS1005: ',' expected.
initq.tsx(469,67): error TS1005: ';' expected.
initq.tsx(469,69): error TS1434: Unexpected keyword or identifier.
initq.tsx(471,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(471,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(471,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(471,23): error TS1434: Unexpected keyword or identifier.
initq.tsx(471,49): error TS1127: Invalid character.
initq.tsx(471,51): error TS1434: Unexpected keyword or identifier.
initq.tsx(471,68): error TS1127: Invalid character.
initq.tsx(471,70): error TS1434: Unexpected keyword or identifier.
initq.tsx(471,86): error TS1127: Invalid character.
initq.tsx(471,88): error TS1434: Unexpected keyword or identifier.
initq.tsx(471,99): error TS1127: Invalid character.
initq.tsx(471,101): error TS1434: Unexpected keyword or identifier.
initq.tsx(471,113): error TS1127: Invalid character.
initq.tsx(471,115): error TS1434: Unexpected keyword or identifier.
initq.tsx(473,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(473,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(473,16): error TS1434: Unexpected keyword or identifier.
initq.tsx(473,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(473,34): error TS1434: Unexpected keyword or identifier.
initq.tsx(473,52): error TS1005: ';' expected.
initq.tsx(473,54): error TS1127: Invalid character.
initq.tsx(473,56): error TS1434: Unexpected keyword or identifier.
initq.tsx(473,62): error TS1434: Unexpected keyword or identifier.
initq.tsx(473,72): error TS1127: Invalid character.
initq.tsx(473,74): error TS1434: Unexpected keyword or identifier.
initq.tsx(473,80): error TS1434: Unexpected keyword or identifier.
initq.tsx(473,93): error TS1127: Invalid character.
initq.tsx(473,105): error TS1127: Invalid character.
initq.tsx(473,121): error TS1005: ';' expected.
initq.tsx(473,127): error TS1127: Invalid character.
initq.tsx(473,129): error TS1434: Unexpected keyword or identifier.
initq.tsx(473,135): error TS1434: Unexpected keyword or identifier.
initq.tsx(473,149): error TS1127: Invalid character.
initq.tsx(475,10): error TS1005: ';' expected.
initq.tsx(477,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(477,5): error TS1434: Unexpected keyword or identifier.
initq.tsx(477,21): error TS1005: ';' expected.
initq.tsx(477,39): error TS1005: ',' expected.
initq.tsx(477,52): error TS1005: ',' expected.
initq.tsx(477,58): error TS1005: ',' expected.
initq.tsx(477,61): error TS1005: ',' expected.
initq.tsx(477,68): error TS1005: ',' expected.
initq.tsx(477,74): error TS1005: ';' expected.
initq.tsx(477,76): error TS1434: Unexpected keyword or identifier.
initq.tsx(479,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(479,5): error TS1434: Unexpected keyword or identifier.
initq.tsx(479,24): error TS1005: ',' expected.
initq.tsx(479,30): error TS1005: ',' expected.
initq.tsx(479,36): error TS1005: ',' expected.
initq.tsx(479,42): error TS1005: ';' expected.
initq.tsx(479,44): error TS1434: Unexpected keyword or identifier.
initq.tsx(479,61): error TS1005: ';' expected.
initq.tsx(479,75): error TS1434: Unexpected keyword or identifier.
initq.tsx(481,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(481,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(481,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(481,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(481,50): error TS1005: ',' expected.
initq.tsx(481,54): error TS1005: ',' expected.
initq.tsx(481,61): error TS1005: ',' expected.
initq.tsx(481,66): error TS1005: ',' expected.
initq.tsx(481,80): error TS1005: ',' expected.
initq.tsx(481,88): error TS1127: Invalid character.
initq.tsx(481,93): error TS1127: Invalid character.
initq.tsx(483,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(483,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(483,16): error TS1434: Unexpected keyword or identifier.
initq.tsx(483,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(483,40): error TS1005: ',' expected.
initq.tsx(483,56): error TS1005: ',' expected.
initq.tsx(483,77): error TS1005: ',' expected.
initq.tsx(483,82): error TS1005: ',' expected.
initq.tsx(483,89): error TS1005: ';' expected.
initq.tsx(485,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(485,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(485,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(485,20): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(485,45): error TS1005: ')' expected.
initq.tsx(485,51): error TS1434: Unexpected keyword or identifier.
initq.tsx(485,56): error TS1434: Unexpected keyword or identifier.
initq.tsx(485,63): error TS1128: Declaration or statement expected.
initq.tsx(487,1): error TS1127: Invalid character.
initq.tsx(487,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(487,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(487,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(487,44): error TS1005: ',' expected.
initq.tsx(487,50): error TS1005: ',' expected.
initq.tsx(487,56): error TS1005: ',' expected.
initq.tsx(489,1): error TS1127: Invalid character.
initq.tsx(489,3): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(489,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(489,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(489,23): error TS1434: Unexpected keyword or identifier.
initq.tsx(489,39): error TS1005: ',' expected.
initq.tsx(489,46): error TS1005: ',' expected.
initq.tsx(489,61): error TS1005: ':' expected.
initq.tsx(489,65): error TS1005: ',' expected.
initq.tsx(489,70): error TS1005: ',' expected.
initq.tsx(489,75): error TS1005: ',' expected.
initq.tsx(489,83): error TS1005: ',' expected.
initq.tsx(489,88): error TS1005: ',' expected.
initq.tsx(489,103): error TS1005: ':' expected.
initq.tsx(491,1): error TS1127: Invalid character.
initq.tsx(491,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(491,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(491,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(491,23): error TS1434: Unexpected keyword or identifier.
initq.tsx(491,27): error TS1434: Unexpected keyword or identifier.
initq.tsx(491,33): error TS1434: Unexpected keyword or identifier.
initq.tsx(491,38): error TS1434: Unexpected keyword or identifier.
initq.tsx(493,1): error TS1127: Invalid character.
initq.tsx(493,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(493,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(495,1): error TS1127: Invalid character.
initq.tsx(495,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(495,32): error TS1005: ',' expected.
initq.tsx(495,38): error TS1005: ',' expected.
initq.tsx(497,1): error TS1127: Invalid character.
initq.tsx(497,26): error TS1005: ';' expected.
initq.tsx(497,35): error TS1434: Unexpected keyword or identifier.
initq.tsx(497,41): error TS1434: Unexpected keyword or identifier.
initq.tsx(497,64): error TS1005: ',' expected.
initq.tsx(497,70): error TS1005: ',' expected.
initq.tsx(497,82): error TS1005: ',' expected.
initq.tsx(499,1): error TS1127: Invalid character.
initq.tsx(499,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(499,22): error TS1005: ';' expected.
initq.tsx(499,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(499,34): error TS1434: Unexpected keyword or identifier.
initq.tsx(499,58): error TS1005: ',' expected.
initq.tsx(499,62): error TS1005: ',' expected.
initq.tsx(501,1): error TS1127: Invalid character.
initq.tsx(501,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(501,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(501,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(501,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(501,31): error TS1434: Unexpected keyword or identifier.
initq.tsx(503,1): error TS1127: Invalid character.
initq.tsx(503,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(503,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(503,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(505,1): error TS1127: Invalid character.
initq.tsx(505,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(505,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(505,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(505,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(505,27): error TS1434: Unexpected keyword or identifier.
initq.tsx(507,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(509,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(509,18): error TS1127: Invalid character.
initq.tsx(509,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(509,40): error TS1005: ',' expected.
initq.tsx(509,48): error TS1127: Invalid character.
initq.tsx(509,50): error TS1434: Unexpected keyword or identifier.
initq.tsx(509,67): error TS1005: ',' expected.
initq.tsx(509,75): error TS1005: ',' expected.
initq.tsx(509,82): error TS1005: ',' expected.
initq.tsx(509,89): error TS1127: Invalid character.
initq.tsx(509,91): error TS1434: Unexpected keyword or identifier.
initq.tsx(511,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(511,13): error TS1127: Invalid character.
initq.tsx(511,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(511,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(511,32): error TS1127: Invalid character.
initq.tsx(511,34): error TS1434: Unexpected keyword or identifier.
initq.tsx(511,49): error TS1127: Invalid character.
initq.tsx(511,51): error TS1434: Unexpected keyword or identifier.
initq.tsx(513,13): error TS1127: Invalid character.
initq.tsx(513,22): error TS1127: Invalid character.
initq.tsx(513,24): error TS1434: Unexpected keyword or identifier.
initq.tsx(513,43): error TS1005: ',' expected.
initq.tsx(513,50): error TS1127: Invalid character.
initq.tsx(515,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(515,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(515,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(515,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(515,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(515,35): error TS1434: Unexpected keyword or identifier.
initq.tsx(515,38): error TS1434: Unexpected keyword or identifier.
initq.tsx(515,46): error TS1434: Unexpected keyword or identifier.
initq.tsx(515,57): error TS1127: Invalid character.
initq.tsx(515,62): error TS1127: Invalid character.
initq.tsx(517,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(517,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(517,30): error TS1005: ',' expected.
initq.tsx(517,34): error TS1005: ',' expected.
initq.tsx(517,42): error TS1005: ',' expected.
initq.tsx(517,48): error TS1005: ';' expected.
initq.tsx(517,71): error TS1005: ',' expected.
initq.tsx(517,88): error TS1005: ',' expected.
initq.tsx(517,100): error TS1005: ',' expected.
initq.tsx(517,105): error TS1005: ',' expected.
initq.tsx(517,128): error TS1005: ',' expected.
initq.tsx(517,132): error TS1005: ',' expected.
initq.tsx(517,146): error TS1005: ',' expected.
initq.tsx(517,150): error TS1005: ',' expected.
initq.tsx(517,158): error TS1005: '=>' expected.
initq.tsx(519,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(519,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(519,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(519,23): error TS1434: Unexpected keyword or identifier.
initq.tsx(519,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(519,34): error TS1434: Unexpected keyword or identifier.
initq.tsx(519,65): error TS1003: Identifier expected.
initq.tsx(519,66): error TS1005: ';' expected.
initq.tsx(519,93): error TS1005: ';' expected.
initq.tsx(521,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(521,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(521,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(521,25): error TS1434: Unexpected keyword or identifier.
initq.tsx(521,30): error TS1434: Unexpected keyword or identifier.
initq.tsx(521,51): error TS1005: ',' expected.
initq.tsx(521,57): error TS1005: ',' expected.
initq.tsx(521,63): error TS1005: ',' expected.
initq.tsx(521,68): error TS1005: ',' expected.
initq.tsx(521,76): error TS1127: Invalid character.
initq.tsx(521,78): error TS1434: Unexpected keyword or identifier.
initq.tsx(521,84): error TS1434: Unexpected keyword or identifier.
initq.tsx(521,90): error TS1434: Unexpected keyword or identifier.
initq.tsx(521,104): error TS1127: Invalid character.
initq.tsx(521,106): error TS1434: Unexpected keyword or identifier.
initq.tsx(521,118): error TS1127: Invalid character.
initq.tsx(521,120): error TS1434: Unexpected keyword or identifier.
initq.tsx(521,138): error TS1005: ';' expected.
initq.tsx(521,144): error TS1127: Invalid character.
initq.tsx(521,146): error TS1434: Unexpected keyword or identifier.
initq.tsx(521,167): error TS1005: ';' expected.
initq.tsx(523,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(523,14): error TS1127: Invalid character.
initq.tsx(523,27): error TS1005: ',' expected.
initq.tsx(523,36): error TS1005: ',' expected.
initq.tsx(523,43): error TS1005: ',' expected.
initq.tsx(523,59): error TS1005: ',' expected.
initq.tsx(523,66): error TS1005: ',' expected.
initq.tsx(523,79): error TS1127: Invalid character.
initq.tsx(525,15): error TS1005: ';' expected.
initq.tsx(525,33): error TS1005: ';' expected.
initq.tsx(527,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(527,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(527,25): error TS1005: ';' expected.
initq.tsx(527,30): error TS1434: Unexpected keyword or identifier.
initq.tsx(527,36): error TS1434: Unexpected keyword or identifier.
initq.tsx(527,60): error TS1005: ',' expected.
initq.tsx(527,74): error TS1005: ',' expected.
initq.tsx(527,91): error TS1005: ',' expected.
initq.tsx(527,97): error TS1005: ';' expected.
initq.tsx(529,1): error TS1435: Unknown keyword or identifier. Did you mean 'number'?
initq.tsx(529,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(529,14): error TS1434: Unexpected keyword or identifier.
initq.tsx(529,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(529,30): error TS1127: Invalid character.
initq.tsx(529,48): error TS1127: Invalid character.
initq.tsx(529,59): error TS1127: Invalid character.
initq.tsx(529,61): error TS1434: Unexpected keyword or identifier.
initq.tsx(529,70): error TS1434: Unexpected keyword or identifier.
initq.tsx(529,86): error TS1127: Invalid character.
initq.tsx(529,88): error TS1434: Unexpected keyword or identifier.
initq.tsx(529,97): error TS1434: Unexpected keyword or identifier.
initq.tsx(529,113): error TS1127: Invalid character.
initq.tsx(529,115): error TS1434: Unexpected keyword or identifier.
initq.tsx(529,124): error TS1434: Unexpected keyword or identifier.
initq.tsx(529,137): error TS1127: Invalid character.
initq.tsx(529,139): error TS1434: Unexpected keyword or identifier.
initq.tsx(529,157): error TS1127: Invalid character.
initq.tsx(529,159): error TS1434: Unexpected keyword or identifier.
initq.tsx(529,169): error TS1434: Unexpected keyword or identifier.
initq.tsx(529,186): error TS1127: Invalid character.
initq.tsx(529,188): error TS1434: Unexpected keyword or identifier.
initq.tsx(529,198): error TS1434: Unexpected keyword or identifier.
initq.tsx(529,239): error TS1003: Identifier expected.
initq.tsx(529,241): error TS1127: Invalid character.
initq.tsx(529,243): error TS1434: Unexpected keyword or identifier.
initq.tsx(529,259): error TS1127: Invalid character.
initq.tsx(529,261): error TS1434: Unexpected keyword or identifier.
initq.tsx(529,277): error TS1127: Invalid character.
initq.tsx(529,297): error TS1005: ';' expected.
initq.tsx(531,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(531,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(531,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(531,30): error TS1434: Unexpected keyword or identifier.
initq.tsx(531,35): error TS1434: Unexpected keyword or identifier.
initq.tsx(531,64): error TS1005: ',' expected.
initq.tsx(531,79): error TS1005: ',' expected.
initq.tsx(531,93): error TS1005: ',' expected.
initq.tsx(531,124): error TS1005: ',' expected.
initq.tsx(531,134): error TS1005: '=>' expected.
initq.tsx(533,1): error TS1005: ':' expected.
initq.tsx(533,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(533,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(533,30): error TS1434: Unexpected keyword or identifier.
initq.tsx(533,35): error TS1434: Unexpected keyword or identifier.
initq.tsx(533,75): error TS1005: ',' expected.
initq.tsx(533,102): error TS1005: ',' expected.
initq.tsx(533,123): error TS1005: ',' expected.
initq.tsx(533,129): error TS1005: '=>' expected.
initq.tsx(535,1): error TS1005: ':' expected.
initq.tsx(535,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(535,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(535,24): error TS1434: Unexpected keyword or identifier.
initq.tsx(535,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(535,35): error TS1434: Unexpected keyword or identifier.
initq.tsx(535,59): error TS1005: ';' expected.
initq.tsx(535,67): error TS1434: Unexpected keyword or identifier.
initq.tsx(535,87): error TS1005: ',' expected.
initq.tsx(535,101): error TS1005: ',' expected.
initq.tsx(535,109): error TS1005: ';' expected.
initq.tsx(537,1): error TS1127: Invalid character.
initq.tsx(537,36): error TS1005: ',' expected.
initq.tsx(539,1): error TS1127: Invalid character.
initq.tsx(539,12): error TS1005: ';' expected.
initq.tsx(539,28): error TS1005: ',' expected.
initq.tsx(541,1): error TS1127: Invalid character.
initq.tsx(541,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(541,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(541,40): error TS1005: ',' expected.
initq.tsx(543,1): error TS1127: Invalid character.
initq.tsx(543,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(543,30): error TS1005: ',' expected.
initq.tsx(545,1): error TS1127: Invalid character.
initq.tsx(545,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(545,16): error TS1434: Unexpected keyword or identifier.
initq.tsx(545,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(545,42): error TS1005: ',' expected.
initq.tsx(547,1): error TS1127: Invalid character.
initq.tsx(547,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(547,27): error TS1005: ',' expected.
initq.tsx(547,52): error TS1005: ',' expected.
initq.tsx(549,1): error TS1127: Invalid character.
initq.tsx(549,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(549,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(549,35): error TS1005: ';' expected.
initq.tsx(549,57): error TS1005: ',' expected.
initq.tsx(551,1): error TS1127: Invalid character.
initq.tsx(551,20): error TS1005: ';' expected.
initq.tsx(551,44): error TS1005: ',' expected.
initq.tsx(553,1): error TS1127: Invalid character.
initq.tsx(553,24): error TS1005: ',' expected.
initq.tsx(555,1): error TS1127: Invalid character.
initq.tsx(555,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(555,34): error TS1005: ',' expected.
initq.tsx(557,1): error TS1127: Invalid character.
initq.tsx(557,20): error TS1005: ',' expected.
initq.tsx(557,61): error TS1005: ',' expected.
initq.tsx(559,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(561,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(561,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(561,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(561,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(561,32): error TS1434: Unexpected keyword or identifier.
initq.tsx(561,37): error TS1434: Unexpected keyword or identifier.
initq.tsx(561,43): error TS1434: Unexpected keyword or identifier.
initq.tsx(561,48): error TS1434: Unexpected keyword or identifier.
initq.tsx(561,56): error TS1434: Unexpected keyword or identifier.
initq.tsx(561,60): error TS1434: Unexpected keyword or identifier.
initq.tsx(561,65): error TS1434: Unexpected keyword or identifier.
initq.tsx(561,72): error TS1434: Unexpected keyword or identifier.
initq.tsx(561,81): error TS1434: Unexpected keyword or identifier.
initq.tsx(561,98): error TS1127: Invalid character.
initq.tsx(561,103): error TS1127: Invalid character.
initq.tsx(563,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(563,10): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(563,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(563,59): error TS1005: ',' expected.
initq.tsx(563,66): error TS1005: ',' expected.
initq.tsx(563,76): error TS1005: ';' expected.
initq.tsx(563,83): error TS1434: Unexpected keyword or identifier.
initq.tsx(563,89): error TS1434: Unexpected keyword or identifier.
initq.tsx(563,107): error TS1005: ',' expected.
initq.tsx(563,112): error TS1005: ',' expected.
initq.tsx(563,118): error TS1005: ',' expected.
initq.tsx(563,127): error TS1127: Invalid character.
initq.tsx(563,129): error TS1434: Unexpected keyword or identifier.
initq.tsx(563,141): error TS1127: Invalid character.
initq.tsx(563,143): error TS1434: Unexpected keyword or identifier.
initq.tsx(563,164): error TS1127: Invalid character.
initq.tsx(563,166): error TS1434: Unexpected keyword or identifier.
initq.tsx(563,186): error TS1127: Invalid character.
initq.tsx(563,188): error TS1434: Unexpected keyword or identifier.
initq.tsx(563,209): error TS1005: ';' expected.
initq.tsx(565,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(565,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(565,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(565,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(565,28): error TS1434: Unexpected keyword or identifier.
initq.tsx(565,35): error TS1434: Unexpected keyword or identifier.
initq.tsx(565,40): error TS1434: Unexpected keyword or identifier.
initq.tsx(565,66): error TS1005: ',' expected.
initq.tsx(565,95): error TS1003: Identifier expected.
initq.tsx(565,98): error TS1127: Invalid character.
initq.tsx(565,103): error TS1127: Invalid character.
initq.tsx(567,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(567,35): error TS1005: ',' expected.
initq.tsx(567,39): error TS1005: ',' expected.
initq.tsx(567,43): error TS1005: ',' expected.
initq.tsx(567,51): error TS1005: ',' expected.
initq.tsx(567,56): error TS1005: ',' expected.
initq.tsx(567,61): error TS1005: ';' expected.
initq.tsx(567,63): error TS1434: Unexpected keyword or identifier.
initq.tsx(567,89): error TS1434: Unexpected keyword or identifier.
initq.tsx(567,96): error TS1434: Unexpected keyword or identifier.
initq.tsx(567,100): error TS1434: Unexpected keyword or identifier.
initq.tsx(567,111): error TS1434: Unexpected keyword or identifier.
initq.tsx(567,142): error TS1005: ';' expected.
initq.tsx(567,149): error TS1127: Invalid character.
initq.tsx(567,154): error TS1127: Invalid character.
initq.tsx(567,163): error TS1127: Invalid character.
initq.tsx(569,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(569,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(569,30): error TS1005: ';' expected.
initq.tsx(569,34): error TS1434: Unexpected keyword or identifier.
initq.tsx(569,45): error TS1434: Unexpected keyword or identifier.
initq.tsx(569,62): error TS1127: Invalid character.
initq.tsx(569,70): error TS1127: Invalid character.
initq.tsx(569,72): error TS1434: Unexpected keyword or identifier.
initq.tsx(569,85): error TS1127: Invalid character.
initq.tsx(569,87): error TS1434: Unexpected keyword or identifier.
initq.tsx(571,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(571,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(571,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(571,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(571,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(571,35): error TS1434: Unexpected keyword or identifier.
initq.tsx(571,64): error TS1005: ';' expected.
initq.tsx(571,79): error TS1005: ',' expected.
initq.tsx(571,84): error TS1005: ',' expected.
initq.tsx(571,103): error TS1005: ';' expected.
initq.tsx(571,121): error TS1005: ';' expected.
initq.tsx(571,123): error TS1434: Unexpected keyword or identifier.
initq.tsx(573,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(573,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(573,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(573,24): error TS1434: Unexpected keyword or identifier.
initq.tsx(573,30): error TS1434: Unexpected keyword or identifier.
initq.tsx(573,40): error TS1127: Invalid character.
initq.tsx(573,42): error TS1434: Unexpected keyword or identifier.
initq.tsx(573,49): error TS1434: Unexpected keyword or identifier.
initq.tsx(573,57): error TS1434: Unexpected keyword or identifier.
initq.tsx(573,73): error TS1127: Invalid character.
initq.tsx(573,75): error TS1434: Unexpected keyword or identifier.
initq.tsx(573,89): error TS1127: Invalid character.
initq.tsx(573,98): error TS1127: Invalid character.
initq.tsx(573,100): error TS1434: Unexpected keyword or identifier.
initq.tsx(573,114): error TS1127: Invalid character.
initq.tsx(573,116): error TS1434: Unexpected keyword or identifier.
initq.tsx(573,123): error TS1434: Unexpected keyword or identifier.
initq.tsx(573,131): error TS1434: Unexpected keyword or identifier.
initq.tsx(573,135): error TS1434: Unexpected keyword or identifier.
initq.tsx(575,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(575,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(575,37): error TS1005: ';' expected.
initq.tsx(575,56): error TS1005: ',' expected.
initq.tsx(575,61): error TS1005: ',' expected.
initq.tsx(575,66): error TS1005: ',' expected.
initq.tsx(575,72): error TS1005: ',' expected.
initq.tsx(575,89): error TS1005: ',' expected.
initq.tsx(575,100): error TS1005: ',' expected.
initq.tsx(575,113): error TS1005: ',' expected.
initq.tsx(575,131): error TS1005: ',' expected.
initq.tsx(575,153): error TS1005: ',' expected.
initq.tsx(575,159): error TS1005: ',' expected.
initq.tsx(575,167): error TS1005: ',' expected.
initq.tsx(575,174): error TS1005: ';' expected.
initq.tsx(577,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(577,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(577,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(577,27): error TS1434: Unexpected keyword or identifier.
initq.tsx(577,37): error TS1434: Unexpected keyword or identifier.
initq.tsx(577,44): error TS1434: Unexpected keyword or identifier.
initq.tsx(577,54): error TS1434: Unexpected keyword or identifier.
initq.tsx(577,95): error TS1127: Invalid character.
initq.tsx(577,106): error TS1005: ',' expected.
initq.tsx(577,118): error TS1005: ',' expected.
initq.tsx(577,125): error TS1005: ',' expected.
initq.tsx(577,130): error TS1005: ',' expected.
initq.tsx(577,142): error TS1005: ',' expected.
initq.tsx(577,148): error TS1005: ',' expected.
initq.tsx(577,160): error TS1005: ',' expected.
initq.tsx(577,167): error TS1005: ',' expected.
initq.tsx(577,186): error TS1005: ':' expected.
initq.tsx(577,188): error TS1127: Invalid character.
initq.tsx(579,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(581,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(581,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(581,16): error TS1434: Unexpected keyword or identifier.
initq.tsx(581,26): error TS1127: Invalid character.
initq.tsx(581,28): error TS1434: Unexpected keyword or identifier.
initq.tsx(581,44): error TS1127: Invalid character.
initq.tsx(581,46): error TS1434: Unexpected keyword or identifier.
initq.tsx(581,61): error TS1127: Invalid character.
initq.tsx(581,72): error TS1127: Invalid character.
initq.tsx(581,74): error TS1434: Unexpected keyword or identifier.
initq.tsx(581,80): error TS1434: Unexpected keyword or identifier.
initq.tsx(581,104): error TS1005: ',' expected.
initq.tsx(581,112): error TS1005: ',' expected.
initq.tsx(581,125): error TS1127: Invalid character.
initq.tsx(581,127): error TS1434: Unexpected keyword or identifier.
initq.tsx(581,133): error TS1434: Unexpected keyword or identifier.
initq.tsx(581,139): error TS1434: Unexpected keyword or identifier.
initq.tsx(581,154): error TS1127: Invalid character.
initq.tsx(581,156): error TS1434: Unexpected keyword or identifier.
initq.tsx(581,162): error TS1434: Unexpected keyword or identifier.
initq.tsx(581,186): error TS1005: ',' expected.
initq.tsx(581,198): error TS1005: ',' expected.
initq.tsx(581,208): error TS1005: ',' expected.
initq.tsx(581,218): error TS1127: Invalid character.
initq.tsx(581,223): error TS1127: Invalid character.
initq.tsx(581,231): error TS1127: Invalid character.
initq.tsx(581,239): error TS1005: ',' expected.
initq.tsx(583,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(583,6): error TS1434: Unexpected keyword or identifier.
initq.tsx(583,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(583,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(583,30): error TS1434: Unexpected keyword or identifier.
initq.tsx(583,40): error TS1434: Unexpected keyword or identifier.
initq.tsx(583,51): error TS1003: Identifier expected.
initq.tsx(585,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(585,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(585,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(585,33): error TS1005: ';' expected.
initq.tsx(585,38): error TS1434: Unexpected keyword or identifier.
initq.tsx(585,47): error TS1434: Unexpected keyword or identifier.
initq.tsx(585,66): error TS1005: ';' expected.
initq.tsx(585,76): error TS1434: Unexpected keyword or identifier.
initq.tsx(585,80): error TS1434: Unexpected keyword or identifier.
initq.tsx(585,85): error TS1434: Unexpected keyword or identifier.
initq.tsx(585,96): error TS1434: Unexpected keyword or identifier.
initq.tsx(585,99): error TS1434: Unexpected keyword or identifier.
initq.tsx(585,105): error TS1434: Unexpected keyword or identifier.
initq.tsx(585,110): error TS1434: Unexpected keyword or identifier.
initq.tsx(585,114): error TS1434: Unexpected keyword or identifier.
initq.tsx(585,131): error TS1127: Invalid character.
initq.tsx(585,140): error TS1005: ',' expected.
initq.tsx(585,144): error TS1005: ',' expected.
initq.tsx(585,156): error TS1005: ',' expected.
initq.tsx(585,161): error TS1005: ',' expected.
initq.tsx(585,174): error TS1127: Invalid character.
initq.tsx(585,182): error TS1127: Invalid character.
initq.tsx(585,184): error TS1434: Unexpected keyword or identifier.
initq.tsx(587,1): error TS1435: Unknown keyword or identifier. Did you mean 'number'?
initq.tsx(587,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(587,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(589,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(589,19): error TS1005: ',' expected.
initq.tsx(589,25): error TS1005: ',' expected.
initq.tsx(589,30): error TS1005: ',' expected.
initq.tsx(589,37): error TS1005: ',' expected.
initq.tsx(589,39): error TS1005: ',' expected.
initq.tsx(589,43): error TS1005: ';' expected.
initq.tsx(591,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(591,17): error TS1005: ';' expected.
initq.tsx(591,19): error TS1127: Invalid character.
initq.tsx(591,26): error TS1127: Invalid character.
initq.tsx(591,28): error TS1434: Unexpected keyword or identifier.
initq.tsx(591,43): error TS1127: Invalid character.
initq.tsx(591,45): error TS1434: Unexpected keyword or identifier.
initq.tsx(591,60): error TS1127: Invalid character.
initq.tsx(593,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(593,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(593,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(593,29): error TS1005: ';' expected.
initq.tsx(593,39): error TS1127: Invalid character.
initq.tsx(593,51): error TS1005: ',' expected.
initq.tsx(593,57): error TS1005: ',' expected.
initq.tsx(593,65): error TS1127: Invalid character.
initq.tsx(595,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(595,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(595,16): error TS1434: Unexpected keyword or identifier.
initq.tsx(595,37): error TS1005: ';' expected.
initq.tsx(597,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(597,32): error TS1005: ',' expected.
initq.tsx(597,39): error TS1005: ',' expected.
initq.tsx(597,45): error TS1005: ';' expected.
initq.tsx(597,47): error TS1127: Invalid character.
initq.tsx(597,62): error TS1005: ',' expected.
initq.tsx(597,68): error TS1127: Invalid character.
initq.tsx(597,87): error TS1005: ',' expected.
initq.tsx(597,100): error TS1127: Invalid character.
initq.tsx(597,122): error TS1005: ',' expected.
initq.tsx(599,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(599,16): error TS1127: Invalid character.
initq.tsx(599,18): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(599,25): error TS1127: Invalid character.
initq.tsx(599,25): error TS1128: Declaration or statement expected.
initq.tsx(599,34): error TS1127: Invalid character.
initq.tsx(599,43): error TS1127: Invalid character.
initq.tsx(599,45): error TS1434: Unexpected keyword or identifier.
initq.tsx(599,66): error TS1005: ';' expected.
initq.tsx(599,78): error TS1434: Unexpected keyword or identifier.
initq.tsx(601,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(601,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(601,26): error TS1127: Invalid character.
initq.tsx(601,37): error TS1005: ',' expected.
initq.tsx(601,50): error TS1127: Invalid character.
initq.tsx(603,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(603,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(603,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(603,53): error TS1005: ';' expected.
initq.tsx(603,72): error TS1127: Invalid character.
initq.tsx(603,74): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(603,81): error TS1127: Invalid character.
initq.tsx(603,81): error TS1128: Declaration or statement expected.
initq.tsx(603,90): error TS1127: Invalid character.
initq.tsx(603,99): error TS1127: Invalid character.
initq.tsx(603,101): error TS1434: Unexpected keyword or identifier.
initq.tsx(605,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(605,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(605,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(605,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(605,25): error TS1434: Unexpected keyword or identifier.
initq.tsx(605,28): error TS1434: Unexpected keyword or identifier.
initq.tsx(605,41): error TS1127: Invalid character.
initq.tsx(605,46): error TS1127: Invalid character.
initq.tsx(607,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(607,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(607,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(607,31): error TS1005: ',' expected.
initq.tsx(607,35): error TS1005: ',' expected.
initq.tsx(607,40): error TS1005: ',' expected.
initq.tsx(607,48): error TS1005: ',' expected.
initq.tsx(607,58): error TS1005: ',' expected.
initq.tsx(607,63): error TS1005: ',' expected.
initq.tsx(607,68): error TS1005: ',' expected.
initq.tsx(607,79): error TS1005: ';' expected.
initq.tsx(607,90): error TS1005: ')' expected.
initq.tsx(607,95): error TS1434: Unexpected keyword or identifier.
initq.tsx(607,102): error TS1128: Declaration or statement expected.
initq.tsx(609,1): error TS1127: Invalid character.
initq.tsx(609,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(609,25): error TS1005: ',' expected.
initq.tsx(609,30): error TS1005: ',' expected.
initq.tsx(609,34): error TS1005: ',' expected.
initq.tsx(611,1): error TS1127: Invalid character.
initq.tsx(611,20): error TS1005: ',' expected.
initq.tsx(613,1): error TS1127: Invalid character.
initq.tsx(613,12): error TS1005: ';' expected.
initq.tsx(615,1): error TS1127: Invalid character.
initq.tsx(615,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(615,19): error TS1005: ',' expected.
initq.tsx(617,1): error TS1127: Invalid character.
initq.tsx(619,1): error TS1127: Invalid character.
initq.tsx(619,17): error TS1005: ',' expected.
initq.tsx(621,1): error TS1127: Invalid character.
initq.tsx(621,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(621,14): error TS1434: Unexpected keyword or identifier.
initq.tsx(623,1): error TS1127: Invalid character.
initq.tsx(623,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(625,1): error TS1127: Invalid character.
initq.tsx(625,3): error TS1434: Unexpected keyword or identifier.
initq.tsx(625,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(625,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(625,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(625,32): error TS1434: Unexpected keyword or identifier.
initq.tsx(627,1): error TS1127: Invalid character.
initq.tsx(629,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(629,6): error TS1434: Unexpected keyword or identifier.
initq.tsx(629,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(629,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(629,55): error TS1005: ',' expected.
initq.tsx(629,62): error TS1005: ',' expected.
initq.tsx(629,81): error TS1005: ',' expected.
initq.tsx(629,88): error TS1005: ',' expected.
initq.tsx(629,92): error TS1005: ',' expected.
initq.tsx(629,117): error TS1005: ',' expected.
initq.tsx(629,160): error TS1005: ';' expected.
initq.tsx(631,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(631,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(631,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(631,40): error TS1005: ',' expected.
initq.tsx(631,94): error TS1005: ',' expected.
initq.tsx(631,99): error TS1005: ';' expected.
initq.tsx(633,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(633,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(633,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(633,27): error TS1434: Unexpected keyword or identifier.
initq.tsx(633,37): error TS1434: Unexpected keyword or identifier.
initq.tsx(633,43): error TS1434: Unexpected keyword or identifier.
initq.tsx(633,49): error TS1434: Unexpected keyword or identifier.
initq.tsx(633,56): error TS1434: Unexpected keyword or identifier.
initq.tsx(633,61): error TS1434: Unexpected keyword or identifier.
initq.tsx(633,75): error TS1127: Invalid character.
initq.tsx(633,88): error TS1127: Invalid character.
initq.tsx(633,90): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(633,97): error TS1127: Invalid character.
initq.tsx(633,97): error TS1128: Declaration or statement expected.
initq.tsx(633,113): error TS1127: Invalid character.
initq.tsx(635,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(635,23): error TS1005: ';' expected.
initq.tsx(635,25): error TS1127: Invalid character.
initq.tsx(635,27): error TS1434: Unexpected keyword or identifier.
initq.tsx(635,33): error TS1434: Unexpected keyword or identifier.
initq.tsx(635,51): error TS1127: Invalid character.
initq.tsx(635,53): error TS1434: Unexpected keyword or identifier.
initq.tsx(635,59): error TS1434: Unexpected keyword or identifier.
initq.tsx(635,64): error TS1434: Unexpected keyword or identifier.
initq.tsx(635,90): error TS1127: Invalid character.
initq.tsx(635,92): error TS1434: Unexpected keyword or identifier.
initq.tsx(635,108): error TS1127: Invalid character.
initq.tsx(635,110): error TS1434: Unexpected keyword or identifier.
initq.tsx(635,116): error TS1434: Unexpected keyword or identifier.
initq.tsx(635,120): error TS1434: Unexpected keyword or identifier.
initq.tsx(637,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(637,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(637,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(637,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(637,63): error TS1005: ',' expected.
initq.tsx(637,88): error TS1003: Identifier expected.
initq.tsx(637,89): error TS1005: ';' expected.
initq.tsx(639,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(639,23): error TS1005: ';' expected.
initq.tsx(639,25): error TS1127: Invalid character.
initq.tsx(639,27): error TS1434: Unexpected keyword or identifier.
initq.tsx(639,33): error TS1434: Unexpected keyword or identifier.
initq.tsx(639,51): error TS1127: Invalid character.
initq.tsx(639,53): error TS1434: Unexpected keyword or identifier.
initq.tsx(639,59): error TS1434: Unexpected keyword or identifier.
initq.tsx(639,64): error TS1434: Unexpected keyword or identifier.
initq.tsx(639,88): error TS1005: ';' expected.
initq.tsx(639,99): error TS1127: Invalid character.
initq.tsx(639,101): error TS1434: Unexpected keyword or identifier.
initq.tsx(639,121): error TS1005: ',' expected.
initq.tsx(639,136): error TS1005: ',' expected.
initq.tsx(641,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(641,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(641,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(641,41): error TS1005: ';' expected.
initq.tsx(643,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(643,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(643,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(643,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(643,37): error TS1127: Invalid character.
initq.tsx(643,39): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(643,46): error TS1127: Invalid character.
initq.tsx(643,46): error TS1128: Declaration or statement expected.
initq.tsx(643,55): error TS1127: Invalid character.
initq.tsx(643,71): error TS1005: ',' expected.
initq.tsx(643,76): error TS1005: ',' expected.
initq.tsx(643,91): error TS1005: ',' expected.
initq.tsx(645,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(645,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(645,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(645,26): error TS1434: Unexpected keyword or identifier.
initq.tsx(645,32): error TS1434: Unexpected keyword or identifier.
initq.tsx(645,40): error TS1434: Unexpected keyword or identifier.
initq.tsx(645,54): error TS1127: Invalid character.
initq.tsx(645,56): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(645,63): error TS1127: Invalid character.
initq.tsx(645,63): error TS1128: Declaration or statement expected.
initq.tsx(645,72): error TS1127: Invalid character.
initq.tsx(645,81): error TS1127: Invalid character.
initq.tsx(645,83): error TS1434: Unexpected keyword or identifier.
initq.tsx(647,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(647,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(647,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(647,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(647,26): error TS1434: Unexpected keyword or identifier.
initq.tsx(647,40): error TS1127: Invalid character.
initq.tsx(647,42): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(647,49): error TS1127: Invalid character.
initq.tsx(647,49): error TS1128: Declaration or statement expected.
initq.tsx(647,58): error TS1127: Invalid character.
initq.tsx(649,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(649,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(649,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(649,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(649,26): error TS1434: Unexpected keyword or identifier.
initq.tsx(649,71): error TS1005: ',' expected.
initq.tsx(649,81): error TS1005: ';' expected.
initq.tsx(649,83): error TS1127: Invalid character.
initq.tsx(649,93): error TS1109: Expression expected.
initq.tsx(649,96): error TS1005: ',' expected.
initq.tsx(649,109): error TS1127: Invalid character.
initq.tsx(649,121): error TS1005: ',' expected.
initq.tsx(649,134): error TS1127: Invalid character.
initq.tsx(649,153): error TS1005: ',' expected.
initq.tsx(649,165): error TS1127: Invalid character.
initq.tsx(649,167): error TS1434: Unexpected keyword or identifier.
initq.tsx(651,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(651,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(651,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(651,41): error TS1005: ',' expected.
initq.tsx(651,59): error TS1005: ',' expected.
initq.tsx(651,67): error TS1005: ';' expected.
initq.tsx(651,69): error TS1127: Invalid character.
initq.tsx(651,85): error TS1005: ',' expected.
initq.tsx(651,91): error TS1005: ',' expected.
initq.tsx(651,98): error TS1005: ',' expected.
initq.tsx(651,105): error TS1005: ',' expected.
initq.tsx(651,111): error TS1005: ',' expected.
initq.tsx(651,116): error TS1127: Invalid character.
initq.tsx(651,121): error TS1127: Invalid character.
initq.tsx(651,136): error TS1005: ',' expected.
initq.tsx(651,144): error TS1005: ',' expected.
initq.tsx(651,155): error TS1005: ':' expected.
initq.tsx(651,157): error TS1127: Invalid character.
initq.tsx(651,165): error TS1127: Invalid character.
initq.tsx(651,167): error TS1434: Unexpected keyword or identifier.
initq.tsx(653,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(653,30): error TS1005: ',' expected.
initq.tsx(653,38): error TS1005: ';' expected.
initq.tsx(655,11): error TS1005: ';' expected.
initq.tsx(655,36): error TS1005: ';' expected.
initq.tsx(655,52): error TS1005: ',' expected.
initq.tsx(655,56): error TS1005: ';' expected.
initq.tsx(655,58): error TS1434: Unexpected keyword or identifier.
initq.tsx(655,67): error TS1003: Identifier expected.
initq.tsx(657,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(657,22): error TS1005: ';' expected.
initq.tsx(657,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(657,40): error TS1434: Unexpected keyword or identifier.
initq.tsx(657,47): error TS1434: Unexpected keyword or identifier.
initq.tsx(657,71): error TS1005: ';' expected.
initq.tsx(657,76): error TS1434: Unexpected keyword or identifier.
initq.tsx(657,79): error TS1434: Unexpected keyword or identifier.
initq.tsx(657,85): error TS1434: Unexpected keyword or identifier.
initq.tsx(657,92): error TS1434: Unexpected keyword or identifier.
initq.tsx(657,104): error TS1127: Invalid character.
initq.tsx(657,109): error TS1127: Invalid character.
initq.tsx(659,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(659,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(659,29): error TS1005: ';' expected.
initq.tsx(659,34): error TS1434: Unexpected keyword or identifier.
initq.tsx(659,48): error TS1109: Expression expected.
initq.tsx(659,56): error TS1351: An identifier or keyword cannot immediately follow a numeric literal.
initq.tsx(659,59): error TS1005: ';' expected.
initq.tsx(659,66): error TS1434: Unexpected keyword or identifier.
initq.tsx(659,73): error TS1434: Unexpected keyword or identifier.
initq.tsx(659,77): error TS1434: Unexpected keyword or identifier.
initq.tsx(659,85): error TS1434: Unexpected keyword or identifier.
initq.tsx(659,90): error TS1434: Unexpected keyword or identifier.
initq.tsx(659,98): error TS1434: Unexpected keyword or identifier.
initq.tsx(659,104): error TS1434: Unexpected keyword or identifier.
initq.tsx(659,113): error TS1434: Unexpected keyword or identifier.
initq.tsx(659,136): error TS1127: Invalid character.
initq.tsx(659,141): error TS1127: Invalid character.
initq.tsx(659,149): error TS1127: Invalid character.
initq.tsx(659,151): error TS1434: Unexpected keyword or identifier.
initq.tsx(661,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(661,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(661,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(661,23): error TS1434: Unexpected keyword or identifier.
initq.tsx(661,30): error TS1434: Unexpected keyword or identifier.
initq.tsx(661,38): error TS1434: Unexpected keyword or identifier.
initq.tsx(661,47): error TS1434: Unexpected keyword or identifier.
initq.tsx(661,56): error TS1434: Unexpected keyword or identifier.
initq.tsx(661,64): error TS1005: ';' expected.
initq.tsx(661,85): error TS1005: ',' expected.
initq.tsx(661,93): error TS1005: ',' expected.
initq.tsx(661,101): error TS1005: ',' expected.
initq.tsx(661,108): error TS1005: ',' expected.
initq.tsx(661,116): error TS1005: ',' expected.
initq.tsx(661,121): error TS1005: ',' expected.
initq.tsx(661,125): error TS1005: ';' expected.
initq.tsx(661,137): error TS1005: ')' expected.
initq.tsx(661,159): error TS1005: ';' expected.
initq.tsx(663,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(663,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(663,35): error TS1005: ',' expected.
initq.tsx(663,42): error TS1005: ',' expected.
initq.tsx(663,48): error TS1005: ',' expected.
initq.tsx(664,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(664,7): error TS1435: Unknown keyword or identifier. Did you mean 'set iap'?
initq.tsx(664,14): error TS1434: Unexpected keyword or identifier.
initq.tsx(664,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(664,24): error TS1434: Unexpected keyword or identifier.
initq.tsx(664,40): error TS1005: ';' expected.
initq.tsx(664,70): error TS1005: ',' expected.
initq.tsx(664,77): error TS1005: ',' expected.
initq.tsx(664,86): error TS1005: ';' expected.
initq.tsx(664,110): error TS1005: ',' expected.
initq.tsx(664,121): error TS1005: ',' expected.
initq.tsx(664,126): error TS1005: ',' expected.
initq.tsx(664,135): error TS1005: ';' expected.
initq.tsx(664,143): error TS1005: ';' expected.
initq.tsx(664,158): error TS1003: Identifier expected.
initq.tsx(665,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(665,28): error TS1005: ';' expected.
initq.tsx(665,51): error TS1351: An identifier or keyword cannot immediately follow a numeric literal.
initq.tsx(665,76): error TS1351: An identifier or keyword cannot immediately follow a numeric literal.
initq.tsx(665,106): error TS1005: ',' expected.
initq.tsx(665,113): error TS1005: ',' expected.
initq.tsx(666,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(666,28): error TS1005: ';' expected.
initq.tsx(666,60): error TS1005: ',' expected.
initq.tsx(666,91): error TS1005: ',' expected.
initq.tsx(666,102): error TS1005: ',' expected.
initq.tsx(666,132): error TS1005: ',' expected.
initq.tsx(666,143): error TS1005: ',' expected.
initq.tsx(668,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(668,24): error TS1005: ';' expected.
initq.tsx(670,19): error TS1005: ';' expected.
initq.tsx(671,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(671,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(671,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(671,23): error TS1434: Unexpected keyword or identifier.
initq.tsx(671,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(672,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(672,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(672,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(672,23): error TS1434: Unexpected keyword or identifier.
initq.tsx(672,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(673,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(675,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(675,21): error TS1005: ';' expected.
initq.tsx(675,37): error TS1005: ',' expected.
initq.tsx(676,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(676,21): error TS1005: ';' expected.
initq.tsx(676,48): error TS1005: ',' expected.
initq.tsx(676,71): error TS1005: ',' expected.
initq.tsx(677,24): error TS1005: ',' expected.
initq.tsx(677,31): error TS1005: ',' expected.
initq.tsx(678,18): error TS1005: ',' expected.
initq.tsx(678,26): error TS1005: ',' expected.
initq.tsx(679,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(679,18): error TS1005: ';' expected.
initq.tsx(681,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(682,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(683,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(683,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(684,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(684,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(684,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(684,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(686,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(687,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(688,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(688,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(689,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(689,21): error TS1005: ';' expected.
initq.tsx(689,35): error TS1005: ',' expected.
initq.tsx(690,17): error TS1005: ';' expected.
initq.tsx(690,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(691,12): error TS1005: ';' expected.
initq.tsx(691,25): error TS1005: ',' expected.
initq.tsx(691,28): error TS1005: ',' expected.
initq.tsx(691,37): error TS1005: ',' expected.
initq.tsx(692,1): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(692,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(692,33): error TS1005: ';' expected.
initq.tsx(693,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(694,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(694,23): error TS1005: ';' expected.
initq.tsx(696,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(696,6): error TS1434: Unexpected keyword or identifier.
initq.tsx(697,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(697,20): error TS1005: ';' expected.
initq.tsx(697,25): error TS1434: Unexpected keyword or identifier.
initq.tsx(697,30): error TS1434: Unexpected keyword or identifier.
initq.tsx(698,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(698,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(698,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(699,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(699,43): error TS1005: ',' expected.
initq.tsx(700,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(701,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(701,17): error TS1005: ';' expected.
initq.tsx(701,26): error TS1434: Unexpected keyword or identifier.
initq.tsx(702,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(702,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(702,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(702,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(703,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(703,17): error TS1005: ';' expected.
initq.tsx(703,22): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(703,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(704,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(704,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(704,29): error TS1005: ';' expected.
initq.tsx(705,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(705,21): error TS1005: ';' expected.
initq.tsx(705,27): error TS1434: Unexpected keyword or identifier.
initq.tsx(706,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(707,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(707,22): error TS1005: ',' expected.
initq.tsx(707,27): error TS1005: ',' expected.
initq.tsx(708,14): error TS1005: ',' expected.
initq.tsx(708,23): error TS1005: ',' expected.
initq.tsx(709,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(709,17): error TS1005: ',' expected.
initq.tsx(709,22): error TS1005: ',' expected.
initq.tsx(709,32): error TS1005: ',' expected.
initq.tsx(710,1): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(710,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(710,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(710,26): error TS1434: Unexpected keyword or identifier.
initq.tsx(711,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(712,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(712,22): error TS1005: ';' expected.
initq.tsx(713,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(713,18): error TS1005: ';' expected.
initq.tsx(714,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(714,6): error TS1434: Unexpected keyword or identifier.
initq.tsx(714,25): error TS1005: ',' expected.
initq.tsx(714,32): error TS1005: ',' expected.
initq.tsx(714,38): error TS1005: ',' expected.
initq.tsx(715,14): error TS1005: ',' expected.
initq.tsx(715,21): error TS1351: An identifier or keyword cannot immediately follow a numeric literal.
initq.tsx(716,28): error TS1351: An identifier or keyword cannot immediately follow a numeric literal.
initq.tsx(716,37): error TS1005: ',' expected.
initq.tsx(716,42): error TS1005: ',' expected.
initq.tsx(717,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(717,5): error TS1434: Unexpected keyword or identifier.
initq.tsx(717,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(718,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(718,5): error TS1434: Unexpected keyword or identifier.
initq.tsx(718,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(718,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(718,23): error TS1434: Unexpected keyword or identifier.
initq.tsx(719,19): error TS1005: ';' expected.
initq.tsx(719,29): error TS1005: ';' expected.
initq.tsx(719,38): error TS1434: Unexpected keyword or identifier.
initq.tsx(720,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(720,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(721,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(722,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(723,1): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(723,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(723,14): error TS1434: Unexpected keyword or identifier.
initq.tsx(723,31): error TS1005: ',' expected.
initq.tsx(724,13): error TS1005: ';' expected.
initq.tsx(724,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(724,24): error TS1434: Unexpected keyword or identifier.
initq.tsx(725,15): error TS1005: ';' expected.
initq.tsx(725,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(725,28): error TS1434: Unexpected keyword or identifier.
initq.tsx(725,34): error TS1434: Unexpected keyword or identifier.
initq.tsx(726,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(726,6): error TS1434: Unexpected keyword or identifier.
initq.tsx(726,29): error TS1005: ';' expected.
initq.tsx(727,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(727,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(727,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(727,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(727,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(727,33): error TS1109: Expression expected.
initq.tsx(727,36): error TS1005: ',' expected.
initq.tsx(728,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(728,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(729,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(729,27): error TS1005: ',' expected.
initq.tsx(730,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(730,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(730,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(731,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(731,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(732,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(732,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(732,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(732,24): error TS1434: Unexpected keyword or identifier.
initq.tsx(732,31): error TS1434: Unexpected keyword or identifier.
initq.tsx(732,36): error TS1434: Unexpected keyword or identifier.
initq.tsx(733,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(733,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(733,29): error TS1005: ',' expected.
initq.tsx(733,50): error TS1005: ',' expected.
initq.tsx(733,64): error TS1003: Identifier expected.
initq.tsx(734,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(735,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(735,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(735,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(736,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(736,25): error TS1005: ';' expected.
initq.tsx(737,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(737,37): error TS1005: ',' expected.
initq.tsx(737,55): error TS1005: ',' expected.
initq.tsx(737,69): error TS1005: ',' expected.
initq.tsx(738,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(738,28): error TS1005: ';' expected.
initq.tsx(739,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(739,27): error TS1005: ',' expected.
initq.tsx(740,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(740,25): error TS1005: ';' expected.
initq.tsx(741,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(741,28): error TS1005: ';' expected.
initq.tsx(742,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(742,25): error TS1005: ',' expected.
initq.tsx(742,29): error TS1005: ',' expected.
initq.tsx(742,35): error TS1005: ',' expected.
initq.tsx(742,48): error TS1005: ',' expected.
initq.tsx(742,53): error TS1005: ',' expected.
initq.tsx(743,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(744,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(745,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(746,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(747,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(747,22): error TS1005: ',' expected.
initq.tsx(747,25): error TS1005: ',' expected.
initq.tsx(747,30): error TS1005: ',' expected.
initq.tsx(747,35): error TS1005: ',' expected.
initq.tsx(747,40): error TS1005: ',' expected.
initq.tsx(747,48): error TS1005: ',' expected.
initq.tsx(747,53): error TS1005: ',' expected.
initq.tsx(747,59): error TS1005: ',' expected.
initq.tsx(748,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(748,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(749,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(749,22): error TS1005: ';' expected.
initq.tsx(749,27): error TS1434: Unexpected keyword or identifier.
initq.tsx(749,33): error TS1434: Unexpected keyword or identifier.
initq.tsx(750,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(751,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(751,6): error TS1434: Unexpected keyword or identifier.
initq.tsx(751,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(752,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(753,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(753,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(753,34): error TS1005: ',' expected.
initq.tsx(754,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(754,37): error TS1005: ';' expected.
initq.tsx(755,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(755,6): error TS1434: Unexpected keyword or identifier.
initq.tsx(755,26): error TS1005: ';' expected.
initq.tsx(756,16): error TS1005: ';' expected.
initq.tsx(756,28): error TS1005: ';' expected.
initq.tsx(757,16): error TS1005: ';' expected.
initq.tsx(757,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(757,28): error TS1434: Unexpected keyword or identifier.
initq.tsx(757,33): error TS1434: Unexpected keyword or identifier.
initq.tsx(757,40): error TS1434: Unexpected keyword or identifier.
initq.tsx(758,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(760,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(761,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(761,28): error TS1005: ';' expected.
initq.tsx(762,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(762,24): error TS1005: ';' expected.
initq.tsx(762,29): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(765,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(766,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(766,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(767,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(767,27): error TS1005: ';' expected.
initq.tsx(768,15): error TS1005: ';' expected.
initq.tsx(769,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(769,18): error TS1005: ';' expected.
initq.tsx(769,41): error TS1005: ';' expected.
initq.tsx(771,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(771,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(771,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(771,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(771,26): error TS1434: Unexpected keyword or identifier.
initq.tsx(771,34): error TS1434: Unexpected keyword or identifier.
initq.tsx(772,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(772,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(772,14): error TS1434: Unexpected keyword or identifier.
initq.tsx(772,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(772,27): error TS1434: Unexpected keyword or identifier.
initq.tsx(773,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(773,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(773,32): error TS1005: ',' expected.
initq.tsx(774,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(774,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(774,31): error TS1005: ',' expected.
initq.tsx(775,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(775,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(775,24): error TS1434: Unexpected keyword or identifier.
initq.tsx(775,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(775,36): error TS1434: Unexpected keyword or identifier.
initq.tsx(776,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(776,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(776,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(776,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(776,24): error TS1434: Unexpected keyword or identifier.
initq.tsx(776,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(776,35): error TS1434: Unexpected keyword or identifier.
initq.tsx(776,41): error TS1434: Unexpected keyword or identifier.
initq.tsx(776,50): error TS1434: Unexpected keyword or identifier.
initq.tsx(777,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(777,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(777,13): error TS1434: Unexpected keyword or identifier.
initq.tsx(777,43): error TS1005: ',' expected.
initq.tsx(777,48): error TS1005: ',' expected.
initq.tsx(777,56): error TS1005: ',' expected.
initq.tsx(778,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(779,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(779,24): error TS1005: ';' expected.
initq.tsx(780,20): error TS1005: ';' expected.
initq.tsx(781,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(782,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(782,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(782,16): error TS1434: Unexpected keyword or identifier.
initq.tsx(782,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(782,27): error TS1434: Unexpected keyword or identifier.
initq.tsx(783,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(783,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(783,18): error TS1434: Unexpected keyword or identifier.
initq.tsx(783,23): error TS1434: Unexpected keyword or identifier.
initq.tsx(783,34): error TS1434: Unexpected keyword or identifier.
initq.tsx(783,39): error TS1434: Unexpected keyword or identifier.
initq.tsx(783,49): error TS1434: Unexpected keyword or identifier.
initq.tsx(783,54): error TS1434: Unexpected keyword or identifier.
initq.tsx(784,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(784,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(784,24): error TS1005: ';' expected.
initq.tsx(785,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(785,22): error TS1005: ',' expected.
initq.tsx(785,28): error TS1005: ',' expected.
initq.tsx(785,35): error TS1005: ',' expected.
initq.tsx(785,54): error TS1005: ',' expected.
initq.tsx(787,1): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(787,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(787,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(788,1): error TS1435: Unknown keyword or identifier. Did you mean 'string'?
initq.tsx(788,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(788,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(789,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(789,14): error TS1434: Unexpected keyword or identifier.
initq.tsx(789,23): error TS1435: Unknown keyword or identifier. Did you mean 'get'?
initq.tsx(790,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(790,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(790,14): error TS1434: Unexpected keyword or identifier.
initq.tsx(790,23): error TS1434: Unexpected keyword or identifier.
initq.tsx(790,29): error TS1434: Unexpected keyword or identifier.
initq.tsx(792,7): error TS1005: ',' expected.
initq.tsx(792,19): error TS1005: ',' expected.
initq.tsx(792,25): error TS1005: ',' expected.
initq.tsx(792,32): error TS1005: ',' expected.
initq.tsx(792,42): error TS1005: ',' expected.
initq.tsx(792,48): error TS1005: ',' expected.
initq.tsx(792,55): error TS1005: ',' expected.
initq.tsx(792,60): error TS1005: ',' expected.
initq.tsx(792,65): error TS1005: ',' expected.
initq.tsx(792,71): error TS1005: ',' expected.
initq.tsx(794,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(796,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(796,5): error TS1434: Unexpected keyword or identifier.
initq.tsx(796,14): error TS1434: Unexpected keyword or identifier.
initq.tsx(796,23): error TS1434: Unexpected keyword or identifier.
initq.tsx(796,30): error TS1434: Unexpected keyword or identifier.
initq.tsx(796,36): error TS1434: Unexpected keyword or identifier.
initq.tsx(796,46): error TS1434: Unexpected keyword or identifier.
initq.tsx(796,56): error TS1434: Unexpected keyword or identifier.
initq.tsx(796,66): error TS1434: Unexpected keyword or identifier.
initq.tsx(798,1): error TS1005: ':' expected.
initq.tsx(798,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(798,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(798,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(798,28): error TS1434: Unexpected keyword or identifier.
initq.tsx(798,38): error TS1434: Unexpected keyword or identifier.
initq.tsx(798,48): error TS1434: Unexpected keyword or identifier.
initq.tsx(798,65): error TS1005: ',' expected.
initq.tsx(798,92): error TS1005: ',' expected.
initq.tsx(798,103): error TS1003: Identifier expected.
initq.tsx(798,105): error TS1005: ';' expected.
initq.tsx(798,135): error TS1005: ')' expected.
initq.tsx(798,149): error TS1005: ';' expected.
initq.tsx(798,154): error TS1434: Unexpected keyword or identifier.
initq.tsx(798,177): error TS1005: ';' expected.
initq.tsx(798,182): error TS1434: Unexpected keyword or identifier.
initq.tsx(798,186): error TS1434: Unexpected keyword or identifier.
initq.tsx(798,197): error TS1128: Declaration or statement expected.
initq.tsx(798,198): error TS1128: Declaration or statement expected.
initq.tsx(800,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(800,10): error TS1434: Unexpected keyword or identifier.
initq.tsx(800,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(800,22): error TS1434: Unexpected keyword or identifier.
initq.tsx(800,28): error TS1434: Unexpected keyword or identifier.
initq.tsx(800,38): error TS1434: Unexpected keyword or identifier.
initq.tsx(800,42): error TS1434: Unexpected keyword or identifier.
initq.tsx(800,97): error TS1003: Identifier expected.
initq.tsx(800,99): error TS1005: ';' expected.
initq.tsx(800,104): error TS1434: Unexpected keyword or identifier.
initq.tsx(800,115): error TS1434: Unexpected keyword or identifier.
initq.tsx(800,121): error TS1434: Unexpected keyword or identifier.
initq.tsx(800,133): error TS1434: Unexpected keyword or identifier.
initq.tsx(800,147): error TS1127: Invalid character.
initq.tsx(800,149): error TS1434: Unexpected keyword or identifier.
initq.tsx(800,161): error TS1127: Invalid character.
initq.tsx(800,163): error TS1434: Unexpected keyword or identifier.
initq.tsx(800,174): error TS1127: Invalid character.
initq.tsx(800,186): error TS1127: Invalid character.
initq.tsx(800,188): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,30): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,35): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,41): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,46): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,54): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,62): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,74): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,78): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,91): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,96): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,128): error TS1005: ')' expected.
initq.tsx(802,137): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,142): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,153): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,165): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,170): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,177): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,184): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,191): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,201): error TS1434: Unexpected keyword or identifier.
initq.tsx(802,205): error TS1128: Declaration or statement expected.
initq.tsx(804,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(804,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(804,21): error TS1434: Unexpected keyword or identifier.
initq.tsx(804,26): error TS1434: Unexpected keyword or identifier.
initq.tsx(804,32): error TS1434: Unexpected keyword or identifier.
initq.tsx(804,39): error TS1434: Unexpected keyword or identifier.
initq.tsx(804,46): error TS1434: Unexpected keyword or identifier.
initq.tsx(804,53): error TS1434: Unexpected keyword or identifier.
initq.tsx(804,58): error TS1434: Unexpected keyword or identifier.
initq.tsx(804,63): error TS1434: Unexpected keyword or identifier.
initq.tsx(806,6): error TS1005: ':' expected.
initq.tsx(806,23): error TS1005: ';' expected.
initq.tsx(806,34): error TS1434: Unexpected keyword or identifier.
initq.tsx(806,42): error TS1434: Unexpected keyword or identifier.
initq.tsx(806,50): error TS1435: Unknown keyword or identifier. Did you mean 'function'?
initq.tsx(806,61): error TS1434: Unexpected keyword or identifier.
initq.tsx(806,70): error TS1434: Unexpected keyword or identifier.
initq.tsx(806,75): error TS1434: Unexpected keyword or identifier.
initq.tsx(806,80): error TS1434: Unexpected keyword or identifier.
initq.tsx(806,88): error TS1434: Unexpected keyword or identifier.
initq.tsx(806,102): error TS1127: Invalid character.
initq.tsx(806,104): error TS1434: Unexpected keyword or identifier.
initq.tsx(806,116): error TS1434: Unexpected keyword or identifier.
initq.tsx(806,128): error TS1127: Invalid character.
initq.tsx(806,130): error TS1434: Unexpected keyword or identifier.
initq.tsx(806,157): error TS1127: Invalid character.
initq.tsx(806,159): error TS1434: Unexpected keyword or identifier.
initq.tsx(806,181): error TS1005: ',' expected.
initq.tsx(806,194): error TS1127: Invalid character.
initq.tsx(806,212): error TS1005: ';' expected.
initq.tsx(806,219): error TS1127: Invalid character.
initq.tsx(806,238): error TS1127: Invalid character.
initq.tsx(806,257): error TS1005: ',' expected.
initq.tsx(808,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,12): error TS1005: ',' expected.
initq.tsx(810,20): error TS1005: ',' expected.
initq.tsx(810,31): error TS1005: ',' expected.
initq.tsx(810,38): error TS1005: ',' expected.
initq.tsx(810,43): error TS1005: ',' expected.
initq.tsx(810,48): error TS1005: ';' expected.
initq.tsx(810,59): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,65): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,75): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,80): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,85): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,93): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,99): error TS1435: Unknown keyword or identifier. Did you mean 'for mulir'?
initq.tsx(810,108): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,112): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,119): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,125): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,129): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,139): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,147): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,154): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,177): error TS1005: ';' expected.
initq.tsx(810,186): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,192): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,202): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,206): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,211): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,221): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,227): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,236): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,245): error TS1435: Unknown keyword or identifier. Did you mean 'function'?
initq.tsx(810,256): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,265): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,271): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,284): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,292): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,302): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,309): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,313): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,322): error TS1434: Unexpected keyword or identifier.
initq.tsx(810,340): error TS1003: Identifier expected.
initq.tsx(812,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,6): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,21): error TS1435: Unknown keyword or identifier. Did you mean 'function'?
initq.tsx(812,32): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,41): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,48): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,59): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,71): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,76): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,87): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,99): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,105): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,123): error TS1005: ';' expected.
initq.tsx(812,130): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,136): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,145): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,155): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,159): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,166): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,174): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,181): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,190): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,194): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,203): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,220): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,232): error TS1434: Unexpected keyword or identifier.
initq.tsx(812,247): error TS1003: Identifier expected.
initq.tsx(814,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,6): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,11): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,26): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,31): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,39): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,43): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,53): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,60): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,65): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,72): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,87): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,94): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,101): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,107): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,115): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,119): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,129): error TS1434: Unexpected keyword or identifier.
initq.tsx(814,142): error TS1003: Identifier expected.
initq.tsx(816,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(816,22): error TS1005: ',' expected.
initq.tsx(816,27): error TS1005: ',' expected.
initq.tsx(816,35): error TS1005: ',' expected.
initq.tsx(816,44): error TS1005: ',' expected.
initq.tsx(816,49): error TS1005: ',' expected.
initq.tsx(816,61): error TS1005: ',' expected.
initq.tsx(816,67): error TS1005: ';' expected.
initq.tsx(818,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(821,16): error TS1005: ',' expected.
initq.tsx(821,20): error TS1005: ';' expected.
initq.tsx(822,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(822,7): error TS1434: Unexpected keyword or identifier.
initq.tsx(822,12): error TS1434: Unexpected keyword or identifier.
initq.tsx(822,17): error TS1434: Unexpected keyword or identifier.
initq.tsx(822,28): error TS1434: Unexpected keyword or identifier.
initq.tsx(822,33): error TS1434: Unexpected keyword or identifier.
initq.tsx(822,42): error TS1434: Unexpected keyword or identifier.
initq.tsx(822,50): error TS1434: Unexpected keyword or identifier.
initq.tsx(822,56): error TS1434: Unexpected keyword or identifier.
initq.tsx(822,64): error TS1434: Unexpected keyword or identifier.
initq.tsx(822,71): error TS1434: Unexpected keyword or identifier.
initq.tsx(822,82): error TS1434: Unexpected keyword or identifier.
initq.tsx(824,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(824,9): error TS1434: Unexpected keyword or identifier.
initq.tsx(824,15): error TS1434: Unexpected keyword or identifier.
initq.tsx(824,19): error TS1434: Unexpected keyword or identifier.
initq.tsx(824,50): error TS1005: ',' expected.
initq.tsx(824,56): error TS1005: ',' expected.
initq.tsx(824,60): error TS1005: ',' expected.
initq.tsx(824,66): error TS1005: ',' expected.
initq.tsx(824,76): error TS1003: Identifier expected.
initq.tsx(826,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(826,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(826,44): error TS1005: ';' expected.
initq.tsx(826,50): error TS1434: Unexpected keyword or identifier.
initq.tsx(826,59): error TS1434: Unexpected keyword or identifier.
initq.tsx(826,64): error TS1434: Unexpected keyword or identifier.
initq.tsx(826,71): error TS1434: Unexpected keyword or identifier.
initq.tsx(826,82): error TS1434: Unexpected keyword or identifier.
initq.tsx(826,89): error TS1434: Unexpected keyword or identifier.
initq.tsx(826,104): error TS1005: ',' expected.
initq.tsx(826,110): error TS1005: ',' expected.
initq.tsx(826,118): error TS1005: ',' expected.
initq.tsx(826,126): error TS1005: ',' expected.
initq.tsx(826,129): error TS1005: ',' expected.
initq.tsx(826,135): error TS1003: Identifier expected.
initq.tsx(828,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(828,21): error TS1005: ',' expected.
initq.tsx(828,39): error TS1005: ',' expected.
initq.tsx(828,47): error TS1005: ',' expected.
initq.tsx(828,54): error TS1005: ',' expected.
initq.tsx(828,59): error TS1005: ',' expected.
initq.tsx(828,67): error TS1005: ',' expected.
initq.tsx(828,75): error TS1005: ';' expected.
initq.tsx(828,86): error TS1005: ';' expected.
initq.tsx(828,91): error TS1434: Unexpected keyword or identifier.
initq.tsx(828,100): error TS1434: Unexpected keyword or identifier.
initq.tsx(828,129): error TS1005: ',' expected.
initq.tsx(828,134): error TS1005: ',' expected.
initq.tsx(828,142): error TS1005: ',' expected.
initq.tsx(828,147): error TS1005: ',' expected.
initq.tsx(828,154): error TS1003: Identifier expected.
initq.tsx(830,1): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,8): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,14): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,20): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,31): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,37): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,43): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,51): error TS1435: Unknown keyword or identifier. Did you mean 'for mulir'?
initq.tsx(830,60): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,88): error TS1005: ';' expected.
initq.tsx(830,93): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,98): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,106): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,113): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,122): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,127): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,132): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,138): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,152): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,163): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,168): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,176): error TS1434: Unexpected keyword or identifier.
initq.tsx(830,189): error TS1003: Identifier expected.

--- START OF LINTER CHECK ---
Running linter...
undefined
 ERR_PNPM_RECURSIVE_EXEC_FIRST_FAIL  Command "lint" not found

// END
